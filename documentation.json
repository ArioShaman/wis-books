{
    "pipes": [
        {
            "name": "FilterByAuthorPipe",
            "id": "pipe-FilterByAuthorPipe-124bb96e8b08bc0f0f2bc41242854cfb",
            "file": "src/app/books/pipes/filter-by-author.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "books",
                            "type": "Book[]"
                        },
                        {
                            "name": "authorId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Book[]",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "books",
                            "type": "Book[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "authorId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "filterByAuthor",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Book } from '../models/book.model';\n\n@Pipe({\n  name: 'filterByAuthor',\n})\nexport class FilterByAuthorPipe implements PipeTransform {\n\n  public transform(books: Book[], authorId: number): Book[] {\n    if (books.length === 0 || authorId === undefined) {\n      return books;\n    }\n\n    return books.filter(book => book.authorId === authorId);\n  }\n\n}\n"
        },
        {
            "name": "FilterByGenrePipe",
            "id": "pipe-FilterByGenrePipe-53cc2dfab5990d4aa66850427de17d7e",
            "file": "src/app/books/pipes/filter-by-genre.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "books",
                            "type": "Book[]"
                        },
                        {
                            "name": "genreId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Book[]",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "books",
                            "type": "Book[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "genreId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "filterByGenre",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Book } from '../models/book.model';\n\n@Pipe({\n  name: 'filterByGenre',\n})\nexport class FilterByGenrePipe implements PipeTransform {\n\n  public transform(books: Book[], genreId: number): Book[] {\n    if (books.length === 0 || genreId === undefined) {\n      return books;\n    }\n\n    return books.filter(\n      (book) => {\n        return book.genres.findIndex(\n          genre => genre.id === genreId,\n        ) !== -1;\n      },\n    );\n  }\n\n}\n"
        },
        {
            "name": "LocalizedDatePipe",
            "id": "pipe-LocalizedDatePipe-3ba56354c096c885d2f27fbbc762c494",
            "file": "src/app/book/pipes/localized-date.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "localizedDate",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\n\nimport { TranslateService } from '@ngx-translate/core';\n\n@Pipe({\n  name: 'localizedDate',\n})\n\nexport class LocalizedDatePipe implements PipeTransform {\n\n  constructor(\n    private readonly translateService: TranslateService,\n  ) {}\n\n  public transform(value: string): string {\n    return new DatePipe(this.translateService.currentLang)\n      .transform(value, 'medium');\n  }\n\n}\n"
        },
        {
            "name": "SearchTextPipe",
            "id": "pipe-SearchTextPipe-2e66f20a8993b287ae30c9c2af8fbc3a",
            "file": "src/app/books/pipes/search-text.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "books",
                            "type": "Book[]"
                        },
                        {
                            "name": "searchValue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "books",
                            "type": "Book[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "searchText",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Book } from '../models/book.model';\n\n@Pipe({\n  name: 'searchText'\n})\nexport class SearchTextPipe implements PipeTransform {\n\n  public transform(books: Book[], searchValue: string): unknown {\n\n    if (\n      books.length === 0 ||\n      searchValue === undefined ||\n      searchValue.length === 0\n    ) {\n      return books;\n    }\n\n    return books.filter(\n      (book) => {\n        if (\n          book.title.toLowerCase().includes(searchValue.toLowerCase()) ||\n          book.description.toLowerCase().includes(searchValue.toLowerCase())\n        ) {\n          return book;\n        }\n      }\n    );\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "ICanComponentDeactivate",
            "id": "interface-ICanComponentDeactivate-e932c5e862e5a9caf85c28239b619f96",
            "file": "src/app/core/guards/exit.guard.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nexport interface ICanComponentDeactivate {\n  canDeactivate: () => Observable<boolean> | Promise<true> | boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\n@Injectable()\nexport class CanDeactivateGuard implements CanDeactivate<ICanComponentDeactivate> {\n\n  public canDeactivate(\n    component: ICanComponentDeactivate\n  ): Observable<boolean> | boolean | Promise<true> {\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "canDeactivate",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDialogBody",
            "id": "interface-IDialogBody-994976565032a01da15f6bc7ac5c1b51",
            "file": "src/app/core/models/dialog-body.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ISize {\n  height?: string;\n  width?: string;\n}\n\nexport interface IDialogBody {\n  message: string;\n  type: string;\n  payload?: Object;\n\n}\n",
            "properties": [
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "payload",
                    "type": "Object",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IError",
            "id": "interface-IError-dfb253ef085b80e2785c0a1f1b88ce8c",
            "file": "src/app/core/models/error.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IError {\n  error: string;\n  status: number;\n  errors?: Object[];\n}\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "errors",
                    "type": "Object[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "status",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IFilterParam",
            "id": "interface-IFilterParam-38ac6d042676d0aeab261332695ac960",
            "file": "src/app/books/models/filter-param.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IFilterParam {\n  searchText?: string;\n  genreNames?: string[];\n  authorIds?: number[];\n  page?: number;\n\n}\n",
            "properties": [
                {
                    "name": "authorIds",
                    "type": "number[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "genreNames",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "searchText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IForm",
            "id": "interface-IForm-300e77adc353d3f82a6dfc9e2c160723",
            "file": "src/lib/models/form.interface.ts",
            "type": "interface",
            "sourceCode": "import { Author } from '../../app/authors/models/author.model';\n\nexport interface IForm {\n  title: string;\n  description: string;\n  author: Author;\n  genres: [];\n  writingDate: Date;\n  releaseDate: Date;\n  price: number;\n}\n",
            "properties": [
                {
                    "name": "author",
                    "type": "Author",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "genres",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "releaseDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "writingDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPageEvent",
            "id": "interface-IPageEvent-85d862a96da75c2da52b2fe5a72dd0fa",
            "file": "src/app/books/containers/books-list/books-list.container.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil, delay } from 'rxjs/operators';\n\nimport { BooksService } from '../../services/books.service';\nimport { Book } from '../../models/book.model';\nimport { ParamsService } from '../../services/params.service';\nimport { IFilterParam } from '../../models/filter-param.interface';\n\ninterface IPageEvent {\n  length: number;\n  pageIndex: number;\n  pageSize: number;\n  previousPageIndex: number;\n}\n\n@Component({\n  selector: 'app-books-list',\n  templateUrl: './books-list.container.html',\n  styleUrls: ['./books-list.container.sass']\n})\nexport class BooksListContainer implements OnInit, OnDestroy {\n\n  public books: Book[] = [];\n  public shadowBooks = new Array(12);\n\n  public searchText: string;\n\n  public selectedAuthors: number[];\n  public selectedGenres: string[];\n\n  public pageSize = 12;\n  public pageIndex = 0;\n  public countPages = 1;\n  public countRecords = 0;\n  public loaded = false;\n\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly booksService: BooksService,\n    private readonly qParams: ParamsService,\n  ) {}\n\n  public ngOnInit(): void {\n    this._listenParams();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public getBooks(\n    params: IFilterParam\n  ): void {\n    this.loaded = false;\n    this.booksService.getBooks(params)\n      .pipe(\n        delay(700),\n        takeUntil(this._destroy$)\n      )\n      .subscribe(\n        (res) => {\n          this.loaded = true;\n          this.books = res.books;\n          this.countRecords = res.meta.records;\n          this.countPages = res.meta.pages;\n        }\n      );\n  }\n\n  public selectGenre(genreNames: string[]): void {\n    this.qParams.setNewParams({ genreNames });\n  }\n\n  public pageEvent(event: IPageEvent): void {\n    this.pageIndex = event.pageIndex;\n    this.books = [];\n\n    this.qParams.setNewParams({\n      page: this.pageIndex + 1\n    });\n\n    const el = document.getElementsByClassName('grid')[0];\n    el.scrollIntoView();\n  }\n\n\n  private _listenParams(): void {\n    this.qParams.getParams$()\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(res => this.getBooks(res));\n  }\n\n}\n",
            "properties": [
                {
                    "name": "length",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "pageIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "pageSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "previousPageIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IRansackParam",
            "id": "interface-IRansackParam-cfebc8b17bb7bb007e05d86092c27a0d",
            "file": "src/app/core/models/ransack-param.interface.ts",
            "type": "interface",
            "sourceCode": "import { Ransack } from './ransack.enum';\n\nexport interface IRansackParam {\n  matcher: Ransack;\n  name?: string;\n  postfix?: string;\n  from?: string;\n}\n",
            "properties": [
                {
                    "name": "from",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "matcher",
                    "type": "Ransack",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "postfix",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IResponse",
            "id": "interface-IResponse-603d9310209d93eda0dcded043e6a6d1",
            "file": "src/app/core/services/authors.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Author } from '../../authors/models/author.model';\n\ninterface IResponse {\n  authors: Author[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorsService {\n\n  constructor(\n    private readonly http: HttpClient\n  ) { }\n\n  public getAllAuthors(): Observable<Author[]> {\n    const params = {\n      params: new HttpParams().set('limit', '50')\n    };\n\n    return this.http.get<IResponse>('/authors', params)\n      .pipe(map(res => Author.newCollection(Author, res.authors)));\n  }\n\n  public getAuthorById(id: number): Observable<Author> {\n    return this.http.get(`/authors/${id}`)\n      .pipe(map(res => Author.new(Author, res)));\n  }\n\n  public deleteAuthor(id: number): Observable<Author> {\n    const uri = `/authors/${id}`;\n\n    return this.http.delete(uri)\n      .pipe(map(res => Author.new(Author, res)));\n  }\n\n  public createAuthor(author: Author): Observable<Author> {\n    const uri = '/authors';\n    const formData = author._toJSON();\n\n    return this.http.post(uri, formData)\n      .pipe(map(res => Author.new(Author, res)));\n  }\n\n  public updateAuthor(author: Author): Observable<Author> {\n    const uri = `/authors/${author.id}`;\n    const formData = author._toJSON();\n\n    return this.http.put(uri, formData)\n      .pipe(map(res => Author.new(Author, res)));\n  }\n\n}\n",
            "properties": [
                {
                    "name": "authors",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IResponse",
            "id": "interface-IResponse-09e61e43a5abe0b1668a9eb174e47b70-1",
            "file": "src/app/core/services/genres.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Genre } from '../../genres/models/genre.model';\n\ninterface IResponse {\n  genres: Genre[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GenresService {\n\n  constructor(\n    private readonly http: HttpClient\n  ) { }\n\n  public getAllGenres(): Observable<Genre[]> {\n    const params = {\n      params: new HttpParams().set('limit', '50')\n    };\n\n    return this.http.get<IResponse>('/genres', params)\n      .pipe(map(res => Genre.newCollection(Genre, res.genres)));\n  }\n\n  public getGenreById(id: number): Observable<Genre> {\n    return this.http.get(`/genres/${id}`)\n      .pipe(map(res => Genre.new(Genre, res)));\n  }\n\n  public deleteGenre(id: number): Observable<Genre> {\n    const uri = `/genress/${id}`;\n\n    return this.http.delete(uri)\n      .pipe(map(res => Genre.new(Genre, res)));\n  }\n\n  public createGenre(genre: Genre): Observable<Genre> {\n    const uri = '/genres';\n    const formData = genre._toJSON();\n\n    return this.http.post(uri, formData)\n      .pipe(map(res => Genre.new(Genre, res)));\n  }\n\n  public updateGenre(genre: Genre): Observable<Genre> {\n    const uri = `/genres/${genre.id}`;\n    const formData = genre._toJSON();\n\n    return this.http.put(uri, formData)\n      .pipe(map(res => Genre.new(Genre, res)));\n  }\n}\n",
            "properties": [
                {
                    "name": "genres",
                    "type": "Genre[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IResponse-1"
        },
        {
            "name": "ISignInForm",
            "id": "interface-ISignInForm-e8168f3b138ec5de529d0f673cf2a93b",
            "file": "src/app/auth/models/sign-in-form.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ISignInForm {\n  email: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISignUpForm",
            "id": "interface-ISignUpForm-1ef8960d3b9b97003ccfa283819dd93e",
            "file": "src/app/auth/models/sign-up-form.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ISignUpForm {\n  email: string;\n  password: string;\n  passwordConfirmation: string;\n  lastName: string;\n  firstName: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "passwordConfirmation",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISize",
            "id": "interface-ISize-994976565032a01da15f6bc7ac5c1b51",
            "file": "src/app/core/models/dialog-body.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ISize {\n  height?: string;\n  width?: string;\n}\n\nexport interface IDialogBody {\n  message: string;\n  type: string;\n  payload?: Object;\n\n}\n",
            "properties": [
                {
                    "name": "height",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "width",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IStep",
            "id": "interface-IStep-dab5bafde1004236d2126aa0e688687b",
            "file": "src/app/core/models/step.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IStep {\n  id: number;\n  tag: string;\n  label: string;\n  isValid: boolean;\n  submitted: boolean;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isValid",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "submitted",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "tag",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthorsService",
            "id": "injectable-AuthorsService-603d9310209d93eda0dcded043e6a6d1",
            "file": "src/app/core/services/authors.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Author>",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAuthor",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Author>",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllAuthors",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Author[]>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getAuthorById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Author>",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAuthor",
                    "args": [
                        {
                            "name": "author",
                            "type": "Author"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Author>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "author",
                            "type": "Author",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Author } from '../../authors/models/author.model';\n\ninterface IResponse {\n  authors: Author[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorsService {\n\n  constructor(\n    private readonly http: HttpClient\n  ) { }\n\n  public getAllAuthors(): Observable<Author[]> {\n    const params = {\n      params: new HttpParams().set('limit', '50')\n    };\n\n    return this.http.get<IResponse>('/authors', params)\n      .pipe(map(res => Author.newCollection(Author, res.authors)));\n  }\n\n  public getAuthorById(id: number): Observable<Author> {\n    return this.http.get(`/authors/${id}`)\n      .pipe(map(res => Author.new(Author, res)));\n  }\n\n  public deleteAuthor(id: number): Observable<Author> {\n    const uri = `/authors/${id}`;\n\n    return this.http.delete(uri)\n      .pipe(map(res => Author.new(Author, res)));\n  }\n\n  public createAuthor(author: Author): Observable<Author> {\n    const uri = '/authors';\n    const formData = author._toJSON();\n\n    return this.http.post(uri, formData)\n      .pipe(map(res => Author.new(Author, res)));\n  }\n\n  public updateAuthor(author: Author): Observable<Author> {\n    const uri = `/authors/${author.id}`;\n    const formData = author._toJSON();\n\n    return this.http.put(uri, formData)\n      .pipe(map(res => Author.new(Author, res)));\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-7704225027ca03edc0618ad83b81dc63",
            "file": "src/app/auth/services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "data",
                            "type": "ISignInForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ISignInForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "data",
                            "type": "SignUpForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SignUpForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\nimport { SignUpForm } from '../models/sign-up-form.model';\n\nimport { ISignInForm } from './../models/sign-in-form.interface';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n    private readonly http: HttpClient\n  ) { }\n\n  public signIn(data: ISignInForm): Observable<any> {\n    const uri = '/login';\n\n    return this.http.post(uri, data);\n  }\n\n  public signUp(data: SignUpForm): Observable<any> {\n    const formData = data._toJSON();\n\n    const uri = '/registration';\n\n    return this.http.post(uri, formData);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BooksService",
            "id": "injectable-BooksService-0fa2f038df7258c987f8baf75b746b4d",
            "file": "src/app/books/services/books.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "_setFormData",
                    "args": [
                        {
                            "name": "data",
                            "type": "BookRequest"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormData",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "BookRequest",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setParams",
                    "args": [
                        {
                            "name": "qParams",
                            "type": "IFilterParam"
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 153,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "qParams",
                            "type": "IFilterParam",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createBook",
                    "args": [
                        {
                            "name": "data",
                            "type": "BookRequest"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book>",
                    "typeParameters": [],
                    "line": 104,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "BookRequest",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBook",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book>",
                    "typeParameters": [],
                    "line": 122,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAuthorBooks",
                    "args": [
                        {
                            "name": "authorId",
                            "type": "number"
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BooksResponse>",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "authorId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBook",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book>",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBooks",
                    "args": [
                        {
                            "name": "qParams",
                            "type": "IFilterParam"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BooksResponse>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "qParams",
                            "type": "IFilterParam",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGenreBooks",
                    "args": [
                        {
                            "name": "genre",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BooksResponse>",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "genre",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBook",
                    "args": [
                        {
                            "name": "data",
                            "type": "BookRequest"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book>",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "BookRequest",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { Observable, timer } from 'rxjs';\nimport { map, debounce } from 'rxjs/operators';\n\nimport { NgxRansackService, Ransack } from 'ngx-ransack';\n\nimport { Book } from '../models/book.model';\nimport { BooksResponse } from '../models/books-response.model';\nimport { BookRequest } from '../models/book-request.model';\nimport { IFilterParam } from '../models/filter-param.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BooksService {\n\n  constructor(\n    private readonly http: HttpClient,\n    private readonly ransackSerivce: NgxRansackService\n  ) { }\n\n  public getBooks(\n    qParams: IFilterParam\n  ): Observable<BooksResponse> {\n    const params = {\n      params: this._setParams(qParams)\n    };\n\n    return this.http.get('/books', params)\n      .pipe(\n        debounce(() => timer(1500)),\n        map((res: any) => {\n          return BooksResponse.new(\n            BooksResponse,\n            {\n              books: Book.newCollection(Book, res.books),\n              meta: res.meta\n            }\n          );\n        }),\n      );\n  }\n\n  public getAuthorBooks(\n    authorId: number,\n    page: number = 1\n  ): Observable<BooksResponse> {\n    const params = {\n      params: this._setParams({\n        page\n      })\n    };\n\n    return this.http.get(`/authors/${authorId}/books/`, params)\n      .pipe(\n        debounce(() => timer(1500)),\n        map((res: any) => {\n          return BooksResponse.new(\n            BooksResponse,\n            {\n              books: Book.newCollection(Book, res.books),\n              meta: res.meta\n            }\n          );\n        }),\n      );\n  }\n\n  public getGenreBooks(\n    genre: string,\n    page: number = 1\n  ): Observable<BooksResponse> {\n    const params = {\n      params: this._setParams({\n        page,\n        genreNames: [genre]\n      })\n    };\n\n    return this.http.get('/books', params)\n      .pipe(\n        debounce(() => timer(1500)),\n        map((res: any) => {\n          return BooksResponse.new(\n            BooksResponse,\n            {\n              books: Book.newCollection(Book, res.books),\n              meta: res.meta\n            }\n          );\n        }),\n      );\n  }\n\n  public getBook(id: number): Observable<Book> {\n    const uri = `/books/${id}`;\n\n    return this.http.get(uri)\n      .pipe(map((res: any) => Book.new(Book, res)));\n  }\n\n  public createBook(data: BookRequest): Observable<Book> {\n    const formData = this._setFormData(data);\n\n    const uri = `/authors/${data.author.id}/books`;\n\n    return this.http.post(uri, formData)\n      .pipe(map(res => Book.new(Book, res)));\n  }\n\n  public updateBook(data: BookRequest): Observable<Book> {\n    const formData = this._setFormData(data);\n\n    const uri = `/books/${data.id}`;\n\n    return this.http.put(uri, formData)\n      .pipe(map(res => Book.new(Book, res)));\n  }\n\n  public deleteBook(id: number): Observable<Book> {\n    const uri = `/books/${id}`;\n\n    return this.http.delete(uri)\n      .pipe(map((res: any) => Book.new(Book, res)));\n  }\n\n  private _setFormData(data: BookRequest): FormData {\n    const formData = new FormData();\n    formData.append('title', data.title);\n    formData.append('description', data.description);\n    formData.append('writing_date', String(data.writingDate));\n    formData.append('release_date', String(data.releaseDate));\n    formData.append('price', String(data.price));\n\n    if (data.image) {\n      formData.append('image', data.image);\n    }\n\n    // ### FIX ###\n    // Uncomment when backend changes\n    // will be loaded to server\n    // Array.prototype\n    //   .forEach\n    //   .call(data.previews, (file) => {\n    //     formData.append('previews_attributes[][file]', file);\n    //   });\n\n    return formData;\n  }\n\n  private _setParams(qParams: IFilterParam): HttpParams {\n    const page = qParams.page;\n\n    const options = {\n      searchText: {\n        matcher: Ransack.Cont,\n        name: 'title_or_description'\n      },\n      genreNames: {\n        matcher: Ransack.In,\n        name: 'genres_name'\n      },\n      authorIds: {\n        matcher: Ransack.In,\n        name: 'author_id'\n      }\n    };\n\n    delete qParams.page;\n\n    let httpParams = this.ransackSerivce.toRansack(qParams, options);\n    httpParams = httpParams.append('page', String(page));\n    httpParams = httpParams.append('limit', '12');\n\n    return httpParams;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "ransackSerivce",
                        "type": "NgxRansackService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ransackSerivce",
                        "type": "NgxRansackService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-49996af5ab5cad5d5dfc34616ec9b341",
            "file": "src/app/core/services/dialog.service.ts",
            "properties": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "data",
                            "type": "IDialogBody"
                        },
                        {
                            "name": "size",
                            "type": "ISize",
                            "defaultValue": "DEFAULT_SIZE"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IDialogBody",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "size",
                            "type": "ISize",
                            "defaultValue": "DEFAULT_SIZE",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Observable } from 'rxjs';\n\nimport { IDialogBody, ISize } from '../models/dialog-body.interface';\nimport { DialogComponent } from '../components/dialog/dialog.component';\n\nconst DEFAULT_SIZE: ISize = {\n  width: '400px',\n  height: 'auto'\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DialogService {\n\n  constructor(\n    public dialog: MatDialog\n  ) { }\n\n  public openDialog(\n    data: IDialogBody,\n    size: ISize = DEFAULT_SIZE\n  ): Observable<any> {\n    const dialogRef = this.dialog.open(DialogComponent, {\n      width: size.width,\n      height: size.height,\n      data\n    });\n\n    return dialogRef.afterClosed();\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GenresService",
            "id": "injectable-GenresService-09e61e43a5abe0b1668a9eb174e47b70",
            "file": "src/app/core/services/genres.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createGenre",
                    "args": [
                        {
                            "name": "genre",
                            "type": "Genre"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Genre>",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "genre",
                            "type": "Genre",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteGenre",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Genre>",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllGenres",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Genre[]>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getGenreById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Genre>",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateGenre",
                    "args": [
                        {
                            "name": "genre",
                            "type": "Genre"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Genre>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "genre",
                            "type": "Genre",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Genre } from '../../genres/models/genre.model';\n\ninterface IResponse {\n  genres: Genre[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GenresService {\n\n  constructor(\n    private readonly http: HttpClient\n  ) { }\n\n  public getAllGenres(): Observable<Genre[]> {\n    const params = {\n      params: new HttpParams().set('limit', '50')\n    };\n\n    return this.http.get<IResponse>('/genres', params)\n      .pipe(map(res => Genre.newCollection(Genre, res.genres)));\n  }\n\n  public getGenreById(id: number): Observable<Genre> {\n    return this.http.get(`/genres/${id}`)\n      .pipe(map(res => Genre.new(Genre, res)));\n  }\n\n  public deleteGenre(id: number): Observable<Genre> {\n    const uri = `/genress/${id}`;\n\n    return this.http.delete(uri)\n      .pipe(map(res => Genre.new(Genre, res)));\n  }\n\n  public createGenre(genre: Genre): Observable<Genre> {\n    const uri = '/genres';\n    const formData = genre._toJSON();\n\n    return this.http.post(uri, formData)\n      .pipe(map(res => Genre.new(Genre, res)));\n  }\n\n  public updateGenre(genre: Genre): Observable<Genre> {\n    const uri = `/genres/${genre.id}`;\n    const formData = genre._toJSON();\n\n    return this.http.put(uri, formData)\n      .pipe(map(res => Genre.new(Genre, res)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HelperService",
            "id": "injectable-HelperService-42d4da97fa34af05fabe7bb3d8131bf5",
            "file": "src/app/core/services/helper.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "_compareNullAndArray",
                    "args": [
                        {
                            "name": "oldValue",
                            "type": "any"
                        },
                        {
                            "name": "newValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "oldValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMatchWith",
                    "args": [
                        {
                            "name": "prev",
                            "type": "any"
                        },
                        {
                            "name": "cur",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "prev",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cur",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { isMatchWith, isEqual } from 'lodash-es';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HelperService {\n\n  constructor() { }\n\n  public isMatchWith(prev: any, cur: any): boolean {\n    return isMatchWith(cur, prev, this._compareNullAndArray);\n  }\n\n  private _compareNullAndArray(oldValue: any, newValue: any): boolean {\n    if (oldValue === null && Array.isArray(newValue)) {\n      if (newValue.length === 0) {\n        return true;\n      }\n    } else if (isEqual(oldValue, newValue) || oldValue === newValue) {\n      return true;\n    } else if (oldValue === null && newValue.length === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "MatAppearenceService",
            "id": "injectable-MatAppearenceService-93867912532d7d48f8b603984b75a04e",
            "file": "src/app/core/services/mat-appearence.service.ts",
            "properties": [
                {
                    "name": "_activeAppearence",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getActiveAppearance",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getAppearences",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setActiveAppearance",
                    "args": [
                        {
                            "name": "appearence",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "appearence",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "systemAppearence",
                    "args": [],
                    "optional": false,
                    "returnType": "Object",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nconst appearences = [\n  'legacy',\n  'standard',\n  'fill',\n  'outline'\n];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MatAppearenceService {\n\n  private _activeAppearence: string;\n\n  constructor() {\n    const localAppearence = localStorage.getItem('activeAppearence');\n\n    if (localAppearence !== null) {\n      this._activeAppearence = localAppearence;\n    } else {\n      localStorage.setItem('activeAppearence', appearences[0]);\n      this._activeAppearence = appearences[0];\n    }\n  }\n\n  public getAppearences(): Observable<string[]> {\n    return of(appearences);\n  }\n\n  public systemAppearence(): Object {\n    return {\n      appearance: this._activeAppearence\n    };\n  }\n\n  public getActiveAppearance(): string {\n    return this._activeAppearence;\n  }\n\n  public setActiveAppearance(appearence: string): void {\n    localStorage.setItem('activeAppearence', appearence);\n\n    this._activeAppearence = appearence;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "type": "injectable"
        },
        {
            "name": "ParamsService",
            "id": "injectable-ParamsService-f986ba166a6d988aa1177f6c1665c6b6",
            "file": "src/app/books/services/params.service.ts",
            "properties": [
                {
                    "name": "_curParams",
                    "defaultValue": "{\n    page: 1\n  }",
                    "type": "IFilterParam",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_curParams$",
                    "defaultValue": "new BehaviorSubject<IFilterParam>(this._curParams)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_listenQueryParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_setTree",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getParams",
                    "args": [],
                    "optional": false,
                    "returnType": "IFilterParam",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getParams$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IFilterParam>",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setNewParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { IFilterParam } from '../models/filter-param.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ParamsService {\n\n  private _curParams: IFilterParam = {\n    page: 1\n  };\n  private _curParams$ = new BehaviorSubject<IFilterParam>(this._curParams);\n\n  constructor(\n    private readonly router: Router,\n    private readonly route: ActivatedRoute\n  ) {\n    this._listenQueryParams();\n  }\n\n  public setNewParams(params: Object): void {\n    const paramKeys = Object.keys(params);\n\n    paramKeys.forEach((key) => {\n      switch (key) {\n        case 'searchText':\n          if (params['searchText'] && params['searchText'].length > 0) {\n            this._curParams.searchText = params['searchText'];\n          } else {\n            delete this._curParams.searchText;\n          }\n\n          break;\n\n        case 'genreNames':\n          if (params['genreNames'] && params['genreNames'].length > 0) {\n            if (Array.isArray(params['genreNames'])) {\n              this._curParams.genreNames = params['genreNames'];\n            } else {\n              this._curParams.genreNames = Array(params['genreNames']);\n            }\n          } else {\n            delete this._curParams.genreNames;\n          }\n\n          break;\n\n        case 'authorIds':\n          if (params['authorIds'] && params['authorIds'].length > 0) {\n            let authorIds = [];\n\n            if (Array.isArray(params['authorIds'])) {\n              authorIds = params['authorIds'];\n            } else {\n              authorIds = Array(params['authorIds']);\n            }\n\n            this._curParams.authorIds = authorIds\n              .map((strId: string) => parseInt(strId, 0));\n          } else {\n            delete this._curParams.authorIds;\n          }\n\n          break;\n\n        case 'page':\n          this._curParams.page = parseInt(params['page'], 0);\n\n          break;\n      }\n    });\n    this._curParams$.next(this._curParams);\n    this._setTree();\n  }\n\n  public getParams(): IFilterParam {\n    return this._curParams;\n  }\n\n  public getParams$(): Observable<IFilterParam> {\n    return this._curParams$.asObservable();\n  }\n\n  private _listenQueryParams(): void {\n    this.route.queryParamMap\n      .pipe(take(1))\n      .subscribe(\n        params => this.setNewParams(params['params'])\n      );\n  }\n\n  private _setTree(): void {\n    const routeParams = {\n      relativeTo: this.route,\n      replaceUrl: true,\n      queryParams: this.getParams(),\n    };\n\n    this.router.navigate([], routeParams);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RansackService",
            "id": "injectable-RansackService-b6805d87791216e776da253aceb57a67",
            "file": "src/app/core/services/ransack.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "_kebabStr",
                    "args": [
                        {
                            "name": "str",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 171,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setParam",
                    "args": [
                        {
                            "name": "option",
                            "type": "IRansackParam"
                        },
                        {
                            "name": "filters",
                            "type": "any"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "httpParams",
                            "type": "HttpParams"
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "IRansackParam",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toRansack",
                    "args": [
                        {
                            "name": "filters",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 106,
                    "description": "<p>Filter keys must be same with Options keys</p>\n<p>For example:</p>\n<p>filters: {\n   authorId: [1,2,3]\n}</p>\n<p>options: {\n   authorId: {\n     matcher: Ransack.In\n   }\n}</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\n\nimport { Ransack } from '../models/ransack.enum';\nimport { IRansackParam } from '../models/ransack-param.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RansackService {\n\n\n  constructor() { }\n\n  /**\n    * Filter keys must be same with Options keys\n    *\n    * For example:\n    *\n    * filters: {\n    *   authorId: [1,2,3]\n    * }\n    *\n    * options: {\n    *   authorId: {\n    *     matcher: Ransack.In\n    *   }\n    * }\n  */\n\n  /**\n    * Filter can take 3 types of Input params:\n    * Ransack enum operation\n    * Object of IRansackParam\n    * Array of objects IRansackParam\n    *\n    * For example\n    *\n    * {\n    *   authorId: {\n    *     matcher: Ransack.In,\n    *   },\n    *   price: [\n    *     {\n    *       matcher: Ransack.Gt,\n    *       from: 'min'\n    *    },\n    *    {\n    *       matcher: Ransack.Lt,\n    *       from: 'max'\n    *    }\n    *  ],\n    *  title: Ransack.NotEq,\n    *}\n  */\n\n  /**\n    * Options params:\n    *\n    ****\n    * matcher - choose ransack operation;\n\n    ****\n    * postfix - add postfix name to param, for example:\n    *\n    * option = {\n    *   author: {\n    *     postfix: 'id'\n    *   }\n    * }\n    *\n    * return: q[author_id_{matcher}]\n    *\n    ****\n    * name - change naming ransack params from object key to custom name, \n    * for example:\n    *\n    * options = {\n    *   authorId: {\n    *     name: 'authorIds'\n    *   }\n    * };\n    *\n    * return: q[author_ids_{matcher}]\n    *\n    ****\n    * from - choose value of param from input Object by key, for example:\n    *\n    * filters = {\n    *   price: {\n    *     min: 1,\n    *     max: 10\n    *   }\n    * };\n    *\n    * options = {\n    *   price: {\n    *     mathcer: Ransack.Gt,\n    *     from: 'min'\n    *   }\n    * }\n    *\n    * return: 'q[price_gt] = 1'\n  */\n\n  public toRansack(filters: any, options?: any): HttpParams {\n    let httpParams = new HttpParams();\n\n    const keys = Object.keys(filters);\n    keys.forEach((key) => {\n      if (Array.isArray(options[key])) {\n        /** If Options is Array of options */\n\n        options[key].forEach((option) => {\n          httpParams = this._setParam(option, filters, key, httpParams);\n        });\n      } else if (options[key] instanceof Object) {\n        /** If Options is Option object */\n\n        const option = options[key];\n        httpParams = this._setParam(option, filters, key, httpParams);\n      } else {\n        /** If Options is Ransack operation */\n\n        const option = {\n          matcher: options[key]\n        };\n\n        httpParams = this._setParam(option, filters, key, httpParams);\n      }\n    });\n\n    return httpParams;\n  }\n\n  private _setParam(\n    option: IRansackParam,\n    filters: any,\n    key: string,\n    httpParams: HttpParams\n  ): HttpParams {\n    let filter = filters[key];\n\n    const matcher = this._kebabStr(Ransack[option.matcher]);\n\n    const name = option.hasOwnProperty('name') ?\n      this._kebabStr(option.name) : this._kebabStr(key);\n\n    const postfix = option.hasOwnProperty('postfix') ?\n      `_${option.postfix}` : '';\n\n    if (option.hasOwnProperty('from')) {\n      filter = filter[option.from];\n    }\n\n    let paramName = `q[${name}${postfix}_${matcher}]`;\n\n    if (Array.isArray(filter)) {\n      paramName = paramName + '[]';\n\n      filter.forEach((filterEl) => {\n        httpParams = httpParams.set(paramName, filterEl);\n      });\n    } else {\n      httpParams = httpParams.set(paramName, filter);\n    }\n\n    return httpParams;\n  }\n\n  private _kebabStr(str: string): string {\n    return str.split(/(?=[A-Z])/)\n      .map((el) => el.toLowerCase())\n      .join('_');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppValidator",
            "id": "class-AppValidator-59d53da02112588bf758891e22ed1ce6",
            "file": "src/app/core/validators/app.validator.ts",
            "type": "class",
            "sourceCode": "import { ValidatorFn, FormGroup } from '@angular/forms';\n\nexport class AppValidator {\n\n  constructor () { }\n\n  public checkPasswordValidation: ValidatorFn =\n  (control: FormGroup): null => {\n    const password = control.get('password');\n    const passwordConfirmation = control.get('passwordConfirmation');\n\n    if (password.value !== passwordConfirmation.value) {\n      passwordConfirmation.setErrors({ confirmationInvalid: true });\n    }\n\n    return null;\n  }\n\n  public checkDateValidation: ValidatorFn =\n  (control: FormGroup): null => {\n    const wDate = control.get('writingDate');\n    const rDate = control.get('releaseDate');\n\n    if (rDate.value < wDate.value) {\n      rDate.setErrors({ invalidDate: true });\n    }\n\n    return null;\n  }\n\n  public checkImageValidation: ValidatorFn =\n  (control: FormGroup): null => {\n    const imageState = control.get('uploadedImage');\n\n    if (!imageState.value) {\n      imageState.setErrors({ imageError: true });\n    }\n\n    return null;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 3
            },
            "properties": [
                {
                    "name": "checkDateValidation",
                    "defaultValue": "() => {...}",
                    "type": "ValidatorFn",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "checkImageValidation",
                    "defaultValue": "() => {...}",
                    "type": "ValidatorFn",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "checkPasswordValidation",
                    "defaultValue": "() => {...}",
                    "type": "ValidatorFn",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Author",
            "id": "class-Author-81141d61b5eb1cf22b6d82b94311a7df",
            "file": "src/app/authors/models/author.model.ts",
            "type": "class",
            "sourceCode": "import { Alias, Model } from 'tsmodels';\n\nexport class Author extends Model {\n\n  @Alias() public id: number;\n\n  @Alias('first_name') public firstName: string;\n  @Alias('last_name') public lastName: string;\n\n}\n",
            "properties": [
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": "'first_name'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": "'last_name'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Book",
            "id": "class-Book-f8136bfca4a17ca152db7c6768a174a9",
            "file": "src/app/books/models/book.model.ts",
            "type": "class",
            "sourceCode": "import { Alias, Model } from 'tsmodels';\n\nimport { Genre } from '../../genres/models/genre.model';\nimport { Preview } from '../../../lib/models/preview.model';\n\nexport class Book extends Model {\n\n  @Alias() public id: number;\n  @Alias() public description: string;\n  @Alias() public title: string;\n  @Alias() public price: number;\n  @Alias() public genres: Genre[];\n  @Alias() public previews: Preview[];\n  @Alias() public image: string;\n\n  @Alias('author_id') public authorId: number;\n  @Alias('writing_date') public writingDate: string;\n  @Alias('release_date') public releaseDate: string;\n\n}\n\n",
            "properties": [
                {
                    "name": "authorId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": "'author_id'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "genres",
                    "type": "Genre[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "image",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previews",
                    "type": "Preview[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "releaseDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": "'release_date'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "writingDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": "'writing_date'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BookErrorStateMatcher",
            "id": "class-BookErrorStateMatcher-210c36e24e9c529b5247d4f5357d5c83",
            "file": "src/app/core/matchers/error-state.matcher.ts",
            "type": "class",
            "sourceCode": "import { FormGroupDirective, FormControl, NgForm } from '@angular/forms';\n\nimport { ErrorStateMatcher } from '@angular/material/core';\n\nexport class BookErrorStateMatcher implements ErrorStateMatcher {\n\n  public isErrorState(control: FormControl | null,\n                      form: FormGroupDirective | NgForm | null\n                     ): boolean {\n    const isSubmitted = form && form.submitted;\n\n    return !!(control && control.invalid && (isSubmitted));\n  }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "isErrorState",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl | null"
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ErrorStateMatcher"
            ]
        },
        {
            "name": "BookRequest",
            "id": "class-BookRequest-e3c9897345ac4f963fda02444c417d80",
            "file": "src/app/books/models/book-request.model.ts",
            "type": "class",
            "sourceCode": "import { Alias, Model } from 'tsmodels';\n\nimport { Author } from '../../authors/models/author.model';\nimport { Genre } from '../../genres/models/genre.model';\n\nexport class BookRequest extends Model {\n\n  @Alias() public id: number;\n  @Alias() public title: string;\n  @Alias() public description: string;\n  @Alias() public author: Author;\n  @Alias() public genres: Genre[];\n  @Alias() public writingDate: Date;\n  @Alias() public releaseDate: Date;\n  @Alias() public price: number;\n  @Alias() public image: File;\n  @Alias() public previews: FileList;\n\n\n}\n",
            "properties": [
                {
                    "name": "author",
                    "type": "Author",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "genres",
                    "type": "Genre[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "image",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previews",
                    "type": "FileList",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "releaseDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "writingDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BooksResponse",
            "id": "class-BooksResponse-5c2827613cbdcce00860418c9ff07456",
            "file": "src/app/books/models/books-response.model.ts",
            "type": "class",
            "sourceCode": "import { Alias, Model } from 'tsmodels';\n\nimport { Meta } from '../../../lib/models/meta.model';\n\nimport { Book } from './book.model';\n\n\nexport class BooksResponse extends Model {\n\n  @Alias() public books: Book[];\n  @Alias() public meta: Meta;\n\n}\n",
            "properties": [
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "meta",
                    "type": "Meta",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Genre",
            "id": "class-Genre-963deb8a51e764d864c95e4a91a925c2",
            "file": "src/app/genres/models/genre.model.ts",
            "type": "class",
            "sourceCode": "import { Alias, Model } from 'tsmodels';\n\nexport class Genre extends Model {\n\n  @Alias() public id: number;\n  @Alias() public name: string;\n\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Meta",
            "id": "class-Meta-28bc5873ab2306f458ae5bdad8157422",
            "file": "src/lib/models/meta.model.ts",
            "type": "class",
            "sourceCode": "import { Alias, Model } from 'tsmodels';\n\nexport class Meta extends Model {\n\n  @Alias() public pages: number;\n  @Alias() public records: number;\n  @Alias() public limit: number;\n  @Alias() public page: number;\n\n}\n",
            "properties": [
                {
                    "name": "limit",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pages",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "records",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Preview",
            "id": "class-Preview-7ed97f2d935b2b1336c0e0d7d861fd38",
            "file": "src/lib/models/preview.model.ts",
            "type": "class",
            "sourceCode": "import { Alias, Model } from 'tsmodels';\n\nexport class Preview extends Model {\n\n  @Alias() public id: number;\n  @Alias() public image: string;\n  @Alias() public file: string;\n\n}\n",
            "properties": [
                {
                    "name": "file",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "image",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SignInRequest",
            "id": "class-SignInRequest-201e1a12d762722bb41ca19b528b02fc",
            "file": "src/app/auth/models/sign-in-request.model.ts",
            "type": "class",
            "sourceCode": "import { Alias, Model } from 'tsmodels';\n\n\nexport class SignInRequest extends Model {\n\n  @Alias() public email: string;\n  @Alias() public password: string;\n\n  @Alias('first_name')\n  public firstName: string;\n\n  @Alias('last_name')\n  public lastName: string;\n\n  @Alias('password_confirmation')\n  public passwordConfirmation: string;\n\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": "'first_name'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": "'last_name'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "passwordConfirmation",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": "'password_confirmation'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SignUpForm",
            "id": "class-SignUpForm-212bea7c7e132c67b0adf254c02685b7",
            "file": "src/app/auth/models/sign-up-form.model.ts",
            "type": "class",
            "sourceCode": "import { Alias, Model } from 'tsmodels';\n\nexport class SignUpForm extends Model {\n\n  @Alias() public email: string;\n  @Alias() public password: string;\n\n  @Alias('password_confirmation') public passwordConfirmation: string;\n  @Alias('first_name') public firstName: string;\n  @Alias('last_name') public lastName: string;\n\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": "'first_name'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": "'last_name'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "passwordConfirmation",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "Alias",
                            "stringifiedArguments": "'password_confirmation'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Model",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StepErrorStateMatcher",
            "id": "class-StepErrorStateMatcher-d9355b9dd851d482d059752b1702e433",
            "file": "src/app/core/matchers/step-error-state.matcher.ts",
            "type": "class",
            "sourceCode": "import { FormGroupDirective, FormControl, NgForm } from '@angular/forms';\n\nimport { ErrorStateMatcher } from '@angular/material/core';\n\nimport { IStep } from '../models/step.interface';\n\nexport class StepErrorStateMatcher implements ErrorStateMatcher {\n\n  private _step: IStep;\n\n  constructor(step: IStep) {\n    this._step = step;\n  }\n\n  public isErrorState(control: FormControl | null,\n                      form: FormGroupDirective | NgForm | null,\n                     ): boolean {\n    const isSubmitted = this._step && this._step.submitted;\n\n    return !!(control && control.invalid && (isSubmitted));\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "step",
                        "type": "IStep"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "step",
                        "type": "IStep",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_step",
                    "type": "IStep",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isErrorState",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl | null"
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ErrorStateMatcher"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AccountBooksListContainer",
            "id": "component-AccountBooksListContainer-6f0f8a11ba66ad912d4d1ba1193443ea",
            "file": "src/app/account/containers/account-books-list/account-books-list.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-books-list",
            "styleUrls": [
                "./account-books-list.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./account-books-list.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "books",
                    "defaultValue": "[]",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loaded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "shadowBooks",
                    "defaultValue": "new Array(12)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil, delay } from 'rxjs/operators';\n\nimport { BooksService } from '../../../books/services/books.service';\nimport { Book } from '../../../books/models/book.model';\n\n@Component({\n  selector: 'app-account-books-list',\n  templateUrl: './account-books-list.container.html',\n  styleUrls: ['./account-books-list.container.sass']\n})\nexport class AccountBooksListContainer implements OnInit, OnDestroy {\n\n  public books: Book[] = [];\n  public shadowBooks = new Array(12);\n  public loaded = false;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly booksService: BooksService\n  ) { }\n\n  public ngOnInit(): void {\n    this.getBooks();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public getBooks(): void {\n    this.loaded = false;\n    this.booksService.getBooks({})\n      .pipe(\n        delay(700),\n        takeUntil(this._destroy$)\n      )\n      .subscribe(\n        (res) => {\n          this.loaded = true;\n          this.books = res.books;\n        }\n      );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n$base-color: #ddd\n$shine-color: #e8e8e8\n$animation-duration: 1.6s\n$grey: #bdbbbb\n\napp-book\n  margin-left: 30px\n\n  @include mobile\n    margin-left: 0px\n\n  &:nth-child(3n+1)\n    margin-left: 0px\n    \n    @include desk\n      margin-left: 30px\n\n    @include tablet\n      margin-left: 30px\n    \n    @include mobile\n      margin-left: 0px\n\n  &:nth-child(2n+1)\n    @include desk\n      margin-left: 0px\n\n    @include tablet\n      margin-left: 0px\n    \n    @include mobile\n      margin-left: 0px\n\nmat-paginator\n  width: 100%\n  margin-top: 25px\n\n.container\n  width: 100%\n  display: flex\n  flex-wrap: wrap\n  margin-bottom: 50px\n\n@keyframes hiding\n  0%\n    opacity: 1\n  100%\n    opacity: 0\n\n.shadow-book\n  margin-top: 30px\n  margin-left: 30px\n  position: relative\n  background: #ececec\n  width: 300px\n  height: 375px\n  clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 100% 0%)\n  opacity: 1\n  animation: hiding 1.5s linear\n  \n  @include tablet\n    width: 275px\n\n  @include mobile\n    width: 275px\n    margin-left: 0px\n\n  .gradient\n    background-image: linear-gradient(90deg, $base-color 0px, $shine-color 40px, $base-color 80px) \n    height: 130%\n    width: 140%\n    transform: rotate(15deg) translate(-20%, -10%)\n    animation: loading $animation-duration infinite linear\n\n  .pad-cont\n    padding: 15px 15px 0px 15px\n\n  .img\n    height: 170px\n    width: 270px\n    transition: 0.6s\n    box-sizing: border-box\n    margin-bottom: 10px\n    background: $grey\n\n    @include tablet\n      width: 245px\n\n    @include mobile\n      width: 245px\n\n  .title\n    height: 25px\n    width: 100%\n    background: $grey\n\n  .text\n    margin-top: 10px\n    height: 50px\n    width: 100%\n    background: $grey\n\n  .price\n    margin-top: 10px\n    width: 75px\n    height: 25px\n    background: $grey\n    float: right\n\n  .genres\n    width: 100%\n    display: flex\n\n    .genre\n      margin-top: 20px\n      height: 25px\n      width: 110px\n      background: $grey\n      margin-left: 15px\n\n  &:nth-child(3n+1)\n    margin-left: 0px\n\n    @include tablet\n      margin-left: 30px\n\n    @include mobile\n      margin-left: 0px\n\n  &:nth-child(2n+1)\n\n    @include tablet\n      margin-left: 0px\n\n    @include mobile\n      margin-left: 0px\n\n@keyframes loading\n  0%\n    background-position: 0px\n  100%\n    background-position: 300px\n    \n    \n.not-found\n  margin-top: 40px\n  box-sizing: border-box\n  height: 200px\n  width: 100%\n  background: #ececec\n  display: flex\n  justify-content: center\n  align-items: center\n",
                    "styleUrl": "./account-books-list.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "booksService",
                        "type": "BooksService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "booksService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"loaded ; else elseBlock\">\n  <div class=\"container\">\n    <app-book *ngFor=\"let book of books\"\n              [book]=\"book\"\n              (genreFilter)=\"selectGenre($event)\">\n    </app-book>    \n  </div>  \n</ng-container>\n\n\n<ng-template #elseBlock>\n  <div class=\"container\">\n    <div  class=\"shadow-book\"\n          *ngFor=\"let book of shadowBooks\">\n      <div class=\"pad-cont\">\n        <div class=\"img\"></div>\n\n        <div class=\"title\"></div>\n\n        <div class=\"text\"></div>\n\n        <div class=\"price\"></div>\n      </div>\n      <div class=\"genres\">\n        <div class=\"genre\"></div>\n\n        <div class=\"genre\"></div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "AccountInfoFormContainer",
            "id": "component-AccountInfoFormContainer-31467852e9d6d61b5e3a75d481bed664",
            "file": "src/app/account-info-form/containers/account-info-form/account-info-form.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-info-form",
            "styleUrls": [
                "./account-info-form.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./account-info-form.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "accountForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "activeStep",
                    "defaultValue": "this.steps[0]",
                    "type": "IStep",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "steps",
                    "defaultValue": "[\n    {\n      id: 1,\n      tag: 'firstStep',\n      label: 'Personal Info',\n      isValid: false,\n      submitted: false\n    },\n    {\n      id: 2,\n      tag: 'secondStep',\n      label: 'Secret Qestions',\n      isValid: false,\n      submitted: false\n    },\n    {\n      id: 3,\n      tag: 'thirdStep',\n      label: 'Enter your credit card data',\n      isValid: false,\n      submitted: false\n    }\n  ]",
                    "type": "IStep[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_nextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_prevStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "activateStep",
                    "args": [
                        {
                            "name": "step",
                            "type": "IStep"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "step",
                            "type": "IStep",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkAction",
                    "args": [
                        {
                            "name": "action",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createQuestion",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 108,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "cf",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "cf",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators\n} from '@angular/forms';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { DialogService } from '../../../core/services/dialog.service';\nimport { IStep } from '../../../core/models/step.interface';\n\n@Component({\n  selector: 'app-account-info-form',\n  templateUrl: './account-info-form.container.html',\n  styleUrls: ['./account-info-form.container.sass']\n})\nexport class AccountInfoFormContainer implements OnInit, OnDestroy {\n\n  public accountForm: FormGroup;\n  public steps: IStep[] = [\n    {\n      id: 1,\n      tag: 'firstStep',\n      label: 'Personal Info',\n      isValid: false,\n      submitted: false\n    },\n    {\n      id: 2,\n      tag: 'secondStep',\n      label: 'Secret Qestions',\n      isValid: false,\n      submitted: false\n    },\n    {\n      id: 3,\n      tag: 'thirdStep',\n      label: 'Enter your credit card data',\n      isValid: false,\n      submitted: false\n    }\n  ];\n\n  public activeStep: IStep = this.steps[0];\n\n  private _destroy$ = new Subject();\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly dialog: DialogService\n  ) { }\n\n  public ngOnInit(): void {\n    this._initForm();\n  }\n\n  public activateStep(step: IStep): void {\n    if (step.id < this.activeStep.id) {\n      this.activeStep = step;\n    } else {\n      this.activeStep.submitted = true;\n\n      if (this.accountForm.get(this.activeStep.tag).valid) {\n        this.activeStep = step;\n      }\n    }\n  }\n\n  public onSubmit(cf: any): void {\n    this.activeStep.submitted = true;\n\n    console.log(cf);\n\n    if (this.accountForm.valid) {\n      const data = {\n        message: 'Form is sended',\n        type: 'single'\n      };\n\n      this.dialog.openDialog(data)\n        .pipe(\n          takeUntil(this._destroy$)\n        )\n        .subscribe();\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public checkAction(action): void {\n    console.log(action);\n    switch (action) {\n      case 'next':\n        this._nextStep();\n        break;\n\n      case 'prev':\n        this._prevStep();\n        break;\n    }\n  }\n\n  public createQuestion(): FormGroup {\n    return this.fb.group({\n      question: '',\n      answer: ''\n    });\n  }\n\n  private _initForm(): void {\n    this.accountForm = this.fb.group({\n      firstStep: this.fb.group({\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        country: ['', Validators.required],\n        city: ['', Validators.required],\n        street: ['', Validators.required],\n        home: ['', Validators.required]\n      }),\n      secondStep: this.fb.group({\n        questions: this.fb.array([this.createQuestion()])\n      }),\n      thirdStep: this.fb.group({\n        numberCard: ['', Validators.required],\n        cardOwner: ['', Validators.compose([\n          Validators.required,\n          Validators.pattern('.*[A-Z0-9]+$')\n        ])],\n        expiredDate: ['', Validators.required],\n        cvv: ['', Validators.required]\n      })\n    });\n  }\n\n  private _nextStep(): void {\n    this.activeStep.submitted = true;\n\n    if (this.accountForm.get(this.activeStep.tag).valid) {\n      const nexInd = this.activeStep.id;\n      this.activeStep = this.steps[nexInd];\n    }\n  }\n\n  private _prevStep(): void {\n    const prevInd = this.activeStep.id - 2;\n    this.activeStep = this.steps[prevInd];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\nh1\n  @include mobile\n    font-size: 25px\n\n.title-line\n  font-weight: 700\n  font-size: 20px\n  display: flex\n  justify-content: space-between\n  align-items: center\n  background: #ececec\n\n  @include mobile\n    font-size: 14px\n\n.steps\n  width: 100%\n  height: 50px\n  display: flex\n\n  @include tablet\n    height: 40px\n\n  @include mobile\n    flex-direction: column\n    height: 120px\n  \n  .step\n    width: 34%\n    background: #ececec\n    height: 50px\n    display: flex\n    justify-content: center\n    align-items: center\n    cursor: pointer\n    font-size: 18px\n    transition: 0.4s\n    user-select: none\n\n    @include tablet\n      font-size: 14px\n\n    @include mobile\n      font-size: 13px\n      width: 100%\n      height: 40px\n\n    &:hover\n      background: rgba(73, 77, 213, 0.4)\n      color: white\n\n    &.active\n      background: $blue\n      color: white\n\n.wrapper\n  width: 100%\n  height: auto\n  position: relative\n\n.form-container\n  width: 100%\n  height: auto\n  background: white\n  box-shadow: $shadow\n  margin-top: 25px\n  padding: 15px 25px 15px 25px\n  box-sizing: border-box\n  position: relative\n\n  @include mobile\n    margin-top: 20px\n    margin-bottom: 20px\n    padding: 5px 15px 5px 15px\n\n\n\n.action-line\n  width: 100%\n  height: 170px\n  margin-top: 20px\n\n.add-button\n  height: 40px\n  width: 150px\n  margin-top: 20px\n\n  @include mobile\n    width: 100%\n\n.line\n  width: 100%\n  height: 60px\n  // background: #ececec\n  margin-top: 20px\n  display: flex\n  justify-content: space-between\n\n  @include mobile\n    flex-direction: column\n    height: auto\n\n.half\n  width: 48%\n  position: relative\n\n  @include mobile\n    width: 100%\n\n.third\n  width: 31%\n\n  @include mobile\n    width: 100%\n\n.sm\n  width: 15%\n\n  @include mobile\n    width: 100%\n\nmat-form-field\n  width: 100%\n",
                    "styleUrl": "./account-info-form.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "dialog",
                        "type": "DialogService"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"steps\">\n  <div class=\"step\"\n       *ngFor=\"let step of steps\"\n       [ngClass]=\"activeStep.id === step.id ? 'active':''\"\n       (click)=\"activateStep(step)\">\n    {{ step.label }}\n  </div>\n</div>\n\n<form class=\"form-container\"\n     [ngSwitch]=\"activeStep.id\"\n     [formGroup]=\"accountForm\"\n     (ngSubmit)=\"onSubmit(accountForm.value)\">\n    <ng-template ngSwitchCase=\"1\">\n      <app-first-step [formGroup]=\"accountForm.get('firstStep')\"\n                      [steps]=\"steps\">\n      </app-first-step>\n    </ng-template>\n\n    <ng-template ngSwitchCase=\"2\">\n      <app-second-step [formGroup]=\"accountForm.get('secondStep')\"\n                        [steps]=\"steps\">\n      </app-second-step>\n    </ng-template>\n\n    <ng-template ngSwitchCase=\"3\">\n      <app-third-step [formGroup]=\"accountForm.get('thirdStep')\"\n                      [steps]=\"steps\">\n      </app-third-step>\n    </ng-template>\n\n    <app-step-buttons [steps]=\"steps\"\n                      [activeStep]=\"activeStep\"\n                      (action)=\"checkAction($event)\">\n    </app-step-buttons>\n  </form>\n"
        },
        {
            "name": "AccountInfoFormView",
            "id": "component-AccountInfoFormView-fccd59b6082946e4ad969a858b468540",
            "file": "src/app/account-info-form/views/account-info-form/account-info-form.view.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-info-form-view",
            "styleUrls": [
                "./account-info-form.view.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./account-info-form.view.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-account-info-form-view',\n  templateUrl: './account-info-form.view.html',\n  styleUrls: ['./account-info-form.view.sass']\n})\nexport class AccountInfoFormView implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account-info-form.view.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid\">\n  <app-account-info-form></app-account-info-form>\n</div>\n"
        },
        {
            "name": "AccountShowContainer",
            "id": "component-AccountShowContainer-56992946773c6032845de5eaba5dfc4d",
            "file": "src/app/account/containers/account-show/account-show.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-show",
            "styleUrls": [
                "./account-show.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./account-show.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "context",
                    "type": "CanvasRenderingContext2D",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "myCanvas",
                    "type": "ElementRef<HTMLCanvasElement>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'myCanvas', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_initChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { MatIconRegistry } from '@angular/material/icon';\n\nimport { Chart } from 'chart.js';\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July'\n];\n\n\n@Component({\n  selector: 'app-account-show',\n  templateUrl: './account-show.container.html',\n  styleUrls: ['./account-show.container.sass']\n})\nexport class AccountShowContainer implements OnInit {\n\n  @ViewChild('myCanvas', { static: true })\n  public myCanvas: ElementRef<HTMLCanvasElement>;\n\n  public context: CanvasRenderingContext2D;\n  public chart = [];\n\n  constructor(\n    private readonly matIconRegistry: MatIconRegistry,\n    private readonly domSanitizer: DomSanitizer\n  ) {\n  }\n\n  public ngOnInit(): void {\n    this._initChart();\n\n    this.matIconRegistry.addSvgIcon(\n      'out',\n      this.domSanitizer\n        .bypassSecurityTrustResourceUrl('../../../../assets/icons/out.svg')\n    );\n\n    this.matIconRegistry.addSvgIcon(\n      'book',\n      this.domSanitizer\n        .bypassSecurityTrustResourceUrl('../../../../assets/icons/book.svg')\n    );\n  }\n\n  private _initChart(): void {\n    this.context = this.myCanvas.nativeElement.getContext('2d');\n\n    this.chart = new Chart(this.context, {\n      type: 'line',\n      data: {\n        labels: months,\n        datasets: [{\n          backgroundColor: 'rgb(73, 77, 213)',\n          borderColor: 'rgb(73, 77, 213)',\n          data: [0, 10, 5, 2, 18, 12, 15]\n        }]\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        plugins: {\n          filler: {\n            propagate: true\n          }\n        }\n      }\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\nh1\n  margin-block-end: 0em\n  margin-top: 40px\n\n  @include mobile\n    font-size: 22px\n\n\n.container\n  width: 1400px\n  top: 70px\n  position: relative\n  margin: 0px auto\n  margin-top: 10px\n  position: relative\n  display: flex\n  justify-content: space-between\n\n  @include desk\n    width: 960px\n\n  @include tablet\n    width: 580px\n    flex-direction: column-reverse\n\n  @include mobile\n    width: 275px\n    flex-direction: column-reverse\n\n  .content-block\n    width: 960px\n    position: relative\n\n    @include desk\n      width: 630px\n\n    @include tablet\n      width: 100%\n\n    @include mobile\n      width: 100%\n\n    .chart-cont\n      width: 100%\n      background: white\n      box-shadow: $shadow\n      margin-top: 20px\n      position: relative\n\n      @include mobile\n        display: none\n\n      .wrapper\n        width: 94%\n        margin: 0px auto\n        padding-top: 20px\n        padding-bottom: 20px\n\n        h3\n          margin-block-start: 0em\n\n        canvas\n          height: 350px\n          width: 100%\n\n          @include desk\n            height: 300px \n\n    .info-cont\n      width: 100%\n      height: auto\n      margin-top: 25px\n      background: $blue\n      box-shadow: $shadow\n      color: white\n      position: relative\n\n      .wrapper\n        width: 92%\n        margin: 0px auto\n        position: relative\n        padding-top: 20px\n        padding-bottom: 20px\n        \n\n        .info-cols\n          position: relative\n          width: 700px\n          height: 200px\n          margin: 0px auto\n          display: flex\n          justify-content: space-between\n\n          @include desk\n            height: 160px\n            width: 550px\n\n          @include tablet\n            height: 140px\n            width: 500px\n\n          @include mobile\n            width: 100%\n            flex-direction: column\n            height: auto\n            align-items: center\n\n          .delimeter\n            height: 140px\n            margin-top: 30px\n            width: 3px\n            background: white\n\n            @include desk\n              height: 90px\n\n            @include tablet\n              height: 90px\n\n            @include mobile\n              width: 120px\n              height: 3px\n\n          .data-el\n            height: 200px\n            width: 200px\n            display: flex\n            justify-content: center\n            align-items: center\n            flex-direction: column\n            cursor: pointer\n            user-select: none\n\n            @include desk\n              height: 160px\n              width: 160px\n            \n            @include tablet\n              height: 140px\n              width: 140px\n\n            &:hover\n              .count\n                background: #111138\n                transform: scale(1.05, 1.05)\n\n            .count\n              height: 100px\n              width: 100px \n              border-radius: 50%\n              font-size: 45px\n              display: flex\n              justify-content: center\n              align-items: center\n              transition: 0.4s\n              background: #4f4fc4\n\n              @include desk\n                font-size: 38px\n\n              @include tablet\n                font-size: 35px\n\n            .text\n              margin-top: 20px\n              font-size: 18px\n              font-weight: 400\n\n              @include desk\n                font-size: 16px\n              \n              @include tablet\n                font-size: 14px\n\n        .email-title\n          font-size: 20px\n          font-weight: 500\n\n        p\n          font-size: 14px\n          font-weight: 300\n\n        .buttons\n          width: 300px\n          display: flex\n          justify-content: space-between\n\n          @include mobile\n            flex-direction: column\n            height: 95px\n            width: 100%\n\n        button\n          border-radius: 25px\n          height: 40px\n          font-weight: 400\n\n          &.white\n            width: 200px\n            color: $blue\n          \n            @include mobile\n              width: 100%\n\n          &.dark\n            color: white\n            background: #111138\n            width: 80px\n\n            @include mobile\n              width: 100%\n\n  .info-col\n    width: 400px\n\n    @include desk\n      width: 280px\n\n    @include tablet\n      width: 100%\n\n    @include mobile\n      width: 100%\n\n    .info-block\n      background: white\n      width: 100%\n      height: auto\n      position: relative\n      box-shadow: $shadow\n      margin-top: 20px\n\n      .wrapper\n        width: 350px\n        height: auto\n        margin: 0px auto\n        padding-top: 25px\n        padding-bottom: 25px\n        position: relative\n        display: flex\n        align-items: center\n        flex-direction: column\n        \n        @include desk\n          width: 250px\n          padding-top: 15px\n          padding-bottom: 15px\n\n        @include tablet\n          width: 90%\n          padding-top: 18px\n          padding-bottom: 18px\n\n        @include mobile\n          width: 90%\n          padding-top: 15px\n          padding-bottom: 15px\n\n        .city\n          text-align: center\n\n        .avatar\n          height: 200px\n          width: 200px\n          background: #e85348\n          border-radius: 50%\n          margin: 0px auto\n          position: relative\n\n          @include desk\n            height: 150px\n            width: 150px\n          \n          img\n            height: 100%\n            width: 100%\n\n        .edit\n          width: 100%\n          // margin: 0px auto\n          margin-top: 15px\n          height: 50px\n          border-radius: 0px\n\n          @include desk\n            height: 40px\n\n          @include tablet\n            height: 40px\n\n          @include mobile\n            height: 40px\n\n        .info\n          padding-top: 10px\n          border-radius: 0px\n\n        .name\n          font-size: 30px\n          font-weight: 800\n          text-align: center\n          margin-top: 10px\n\n  .info-link\n    cursor: pointer\n    height: 70px\n    width: 100%\n    background: white\n    box-shadow: $shadow\n    margin-top: 20px\n    outline: none\n    font-size: 16px\n    font-weight: 400\n    border-radius: 0px\n\n    @include desk\n      height: 50px\n\n    @include tablet\n      height: 60px\n\n    @include mobile\n      height: 60px\n\n    mat-icon\n      width: 24px\n      height: 24px\n      margin-left: 10px\n",
                    "styleUrl": "./account-show.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry"
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <div class=\"content-block\">\n    <div class=\"info-cont\">\n      <div class=\"wrapper\">\n        <div class=\"email-title\">\n          Link your bank account to your friendly account\n        </div>\n\n        <p>\n          Get a better overview of your rental income by having us scan your account for you\n        </p>\n\n        <div class=\"buttons\">\n          <button mat-flat-button\n                  class=\"white\"\n                  routerLink=\"form\">\n            Link bank account\n          </button>\n\n          <button mat-flat-button\n                  class=\"dark\">\n            Later\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"info-cont\">\n      <div class=\"wrapper\">\n        <div class=\"info-cols\">\n          <div class=\"data-el\">\n            <div class=\"count\">\n              33\n            </div>\n            <div class=\"text\">\n              Readed books\n            </div>\n          </div>\n\n          <div class=\"delimeter\"></div>\n\n          <div class=\"data-el\">\n            <div class=\"count\">\n              145\n            </div>\n            <div class=\"text\">\n              Viewed books\n            </div>\n          </div>\n\n          <div class=\"delimeter\"></div>\n\n          <div class=\"data-el\">\n            <div class=\"count\">\n              657\n            </div>\n            <div class=\"text\">\n              Bookmarks\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"chart-cont\">\n      <div class=\"wrapper\">\n        <h3>Your activity</h3>\n\n        <canvas #myCanvas>\n          {{ chart }}\n        </canvas>\n      </div>\n    </div>\n    \n    <h1>Books in reading process:</h1>\n    <app-account-books-list></app-account-books-list>\n  </div>\n\n  <div class=\"info-col\">\n    <div class=\"info-block\">\n      <div class=\"wrapper\">\n        <div class=\"avatar\">\n          <img src=\"../../../../assets/images/faces/face-07.png\">\n        </div>\n  \n        <div class=\"name info\">\n          Rebecka Trump\n        </div>\n  \n        <div class=\"phone info\">\n          +1 (345)-45-67-586\n        </div>\n  \n        <div class=\"city info\">\n          USA, Washington, Portland, OR 97215\n        </div>\n  \n        <div class=\"birthday info\">\n          21.08.1993\n        </div>\n  \n        <button mat-flat-button\n                color=\"primary\"\n                class=\"edit\">\n          Edit\n        </button>\n      </div>\n    </div>\n\n    <button class=\"info-link\"\n            mat-button\n            [routerLink]=\"['/books']\">\n      Recomended books\n      <mat-icon svgIcon=\"book\"></mat-icon>\n    </button>\n\n    <button class=\"info-link\"\n         mat-button\n         [routerLink]=\"['/auth']\">\n      Log Out\n      <mat-icon svgIcon=\"out\"></mat-icon>\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "AccountView",
            "id": "component-AccountView-5a6e698505346cb96abcc41134ea33e9",
            "file": "src/app/account/views/account/account.view.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account",
            "styleUrls": [
                "./account.view.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./account.view.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.view.html',\n  styleUrls: ['./account.view.sass']\n})\nexport class AccountView implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\n.line\n  width: 1400px\n  height: 50px\n  position: relative\n  margin: 0px auto\n  margin-top: 10px\n\n  .log-out\n    float: right\n    height: 50px\n    width: 200px\n    background: white\n    color: $blue\n",
                    "styleUrl": "./account.view.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header\">\n  <div class=\"line\">\n  </div>\n</div>\n\n<app-account-show></app-account-show>\n"
        },
        {
            "name": "AddministrationComponent",
            "id": "component-AddministrationComponent-57c8e5a29ee88afbb0b486d5fc02efbc",
            "file": "src/app/home/components/addministration/addministration.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-addministration",
            "styleUrls": [
                "./addministration.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./addministration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-addministration',\n  templateUrl: './addministration.component.html',\n  styleUrls: ['./addministration.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AddministrationComponent implements OnInit {\n\n  constructor() { }\n\n  public ngOnInit(): void { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\n.title\n  width: 600px\n  margin: 0px auto\n  font-size: 60px\n  color: $black\n  text-align: center\n  font-weight: 600\n  margin-top: 40px\n\n  @include mobile\n    width: 320px\n    margin-top: 20px\n    font-size: 24px\n\n  @include tablet\n    width: 600px\n    margin-top: 20px\n    font-size: 34px\n\n  @include desk\n    margin-top: 20px\n    font-size: 40px\n\n.profiles\n  width: 650px\n  height: 300px\n  margin: 0px auto\n  margin-top: 20px\n  display: flex\n  flex-direction: column\n  justify-content: space-between\n\n  @include mobile\n    width: 320px\n    height: 145px\n\n  @include tablet\n    height: 220px\n    width: 460px\n\n  @include desk\n    height: 220px\n    width: 460px\n\n  .profile-line\n    width: 100%\n    height: 130px\n    display: flex\n    justify-content: space-between\n\n    @include mobile\n      height: 70px\n\n    @include tablet\n      height: 100px\n\n    @include desk\n      height: 100px\n\n    .profile\n      height: 130px\n      width: 130px\n      border-radius: 50%\n      \n      @include mobile\n        height: 70px\n        width: 70px\n\n      @include tablet\n        height: 100px\n        width: 100px\n\n      @include desk\n        height: 100px\n        width: 100px\n\n      img\n        height: 100%\n        width: 100%\n",
                    "styleUrl": "./addministration.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"title\">\n  Administration Profile\n</div>\n\n<div class=\"profiles\">\n  <div class=\"profile-line\">\n    <div class=\"profile\">\n      <img src=\"../../../../assets/images/faces/face-01.png\">\n    </div>\n\n    <div class=\"profile\">\n      <img src=\"../../../../assets/images/faces/face-02.png\">\n    </div>\n\n    <div class=\"profile\">\n      <img src=\"../../../../assets/images/faces/face-03.png\">\n    </div>\n\n    <div class=\"profile\">\n      <img src=\"../../../../assets/images/faces/face-04.png\">\n    </div>\n  </div>\n\n  <div class=\"profile-line\">\n    <div class=\"profile\">\n      <img src=\"../../../../assets/images/faces/face-05.png\">\n    </div>\n\n    <div class=\"profile\">\n      <img src=\"../../../../assets/images/faces/face-06.png\">\n    </div>\n\n    <div class=\"profile\">\n      <img src=\"../../../../assets/images/faces/face-07.png\">\n    </div>\n\n    <div class=\"profile\">\n      <img src=\"../../../../assets/images/faces/face-08.png\">\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-881fab390a28c3cbef31536bbfcba3e9",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeAppearence",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "appearences$",
                    "defaultValue": "new Observable<string[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setActiveAppearence",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatSelectChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatSelectChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { MatSelectChange } from '@angular/material/select';\n\nimport { Observable } from 'rxjs';\n\nimport { MatAppearenceService } from './core/services/mat-appearence.service';\nimport { RansackService } from './core/services/ransack.service';\nimport { Ransack } from './core/models/ransack.enum';\n\nconst testFilters = {\n  // author: [1, 2],\n  authorId: [1, 2],\n  price: {\n    min: 1,\n    max: 2000,\n  },\n  title: 'Nine Coaches Waiting'\n};\n\nconst testOptions = {\n  authorId: {\n    matcher: Ransack.In,\n    // postfix: 'id'\n  },\n  price: [\n    {\n      matcher: Ransack.Gt,\n      from: 'min'\n    },\n    {\n      matcher: Ransack.Lt,\n      from: 'max'\n    }\n  ],\n  title: Ransack.NotEq,\n};\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent implements OnInit {\n\n  public activeAppearence: string;\n  public appearences$ = new Observable<string[]>();\n\n\n  constructor(\n    private appearenceService: MatAppearenceService,\n    private readonly rsService: RansackService,\n    private readonly http: HttpClient\n  ) {\n    this.activeAppearence = appearenceService.getActiveAppearance();\n  }\n\n  public ngOnInit(): void {\n    this.appearences$ = this.appearenceService.getAppearences();\n\n    // const params = {\n    //   params: this.rsService.toRansack(testFilters, testOptions)\n    // };\n\n    // this.http.get('/books', params)\n    //   .subscribe((res) => console.log(res));\n  }\n\n  public setActiveAppearence(event: MatSelectChange): void {\n    this.appearenceService.setActiveAppearance(event.value);\n\n    window.location.reload();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../mixins.sass\"\n\n.body\n  width: 100%\n  height: 100%\n  position: absolute\n\n.side-cont\n  height: 100%\n  width: 100%\n  display: flex \n  flex-direction: column\n  justify-content: space-between\n\n  .select\n    width: 80%\n    margin: 0px auto\n    \n.mat-drawer-container \n  height: 100%\n  background: white\n\na\n  font-size: 20px\n  text-decoration: none !important\n  color: black\n  outline: none\n\n  &:hover, &.active\n    background: rgba(0,0,0,.04)\n    color: rgba(0,0,0,.87)\n\nmat-sidenav\n  width: 400px\n\nmat-sidenav-content\n  @include mobile\n    overflow-x: hidden\n\n\nmat-list-item\n  cursor: pointer\n  user-select: none\n  -webkit-tap-highlight-color: transparent\n\nmat-icon\n  cursor: pointer\n  // background: #ececec\n  position: fixed\n  z-index: 3000\n  top: 20px\n  left: 20px\n\n  @include mobile\n    top: 15px\n    left: 15px  \n",
                    "styleUrl": "./app.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appearenceService",
                        "type": "MatAppearenceService"
                    },
                    {
                        "name": "rsService",
                        "type": "RansackService"
                    },
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "appearenceService",
                        "type": "MatAppearenceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rsService",
                        "type": "RansackService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"body\">\n  \n  <mat-sidenav-container>\n    \n    <mat-sidenav #sidenav>\n      <div class=\"side-cont\">\n        <mat-list>\n          <a [routerLink]=\"['home']\" \n             routerLinkActive=\"active\"\n             mat-list-item\n             (click)=\"sidenav.toggle()\"\n             matRipple>\n            Home\n          </a>\n          <a [routerLink]=\"['books']\" \n             routerLinkActive=\"active\"\n             mat-list-item\n             (click)=\"sidenav.toggle()\"\n             matRipple>\n            Books\n          </a>\n          <a [routerLink]=\"['genres']\"\n             routerLinkActive=\"active\"\n             mat-list-item\n             (click)=\"sidenav.toggle()\"\n             matRipple>\n            Genres\n          </a>\n          <a [routerLink]=\"['authors']\" \n             routerLinkActive=\"active\"\n             mat-list-item\n             (click)=\"sidenav.toggle()\"\n             matRipple>\n            Authors\n          </a>\n          <a [routerLink]=\"['auth']\" \n             routerLinkActive=\"active\"\n             mat-list-item\n             (click)=\"sidenav.toggle()\"\n             matRipple>\n            Sign In\n          </a>\n          <a [routerLink]=\"['account']\" \n             routerLinkActive=\"active\"\n             mat-list-item\n             (click)=\"sidenav.toggle()\"\n             matRipple>\n            Account\n          </a>\n        </mat-list>\n        \n        <mat-form-field class=\"select\" \n        *ngIf=\"(appearences$ | async) as resultAppearences\">\n          <mat-label>Choose an appearence</mat-label>\n  \n          <mat-select [value]=\"activeAppearence\"\n                      (selectionChange)=\"setActiveAppearence($event)\">\n            <mat-option *ngFor=\"let appearence of resultAppearences\"\n                        [value]=\"appearence\">\n            {{ appearence }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </mat-sidenav>\n  \n    <mat-sidenav-content>\n      <mat-icon aria-hidden=\"false\"\n                (click)=\"sidenav.toggle()\">\n        menu\n      </mat-icon>\n      \n      <router-outlet></router-outlet>\n\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</div>\n"
        },
        {
            "name": "AuthorBooksListContainer",
            "id": "component-AuthorBooksListContainer-794fbc399f80ff60d95e1a021a939e7b",
            "file": "src/app/author/containers/author-books-list/author-books-list.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-author-books-list",
            "styleUrls": [
                "./author-books-list.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./author-books-list.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "authorId",
                    "line": 17,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "books",
                    "defaultValue": "[]",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "countPages",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "countRecords",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loaded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageSize",
                    "defaultValue": "12",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "shadowBooks",
                    "defaultValue": "new Array(12)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getBooks",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy } from '@angular/core';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil, delay } from 'rxjs/operators';\n\nimport { BooksService } from '../../../books/services/books.service';\nimport { Book } from '../../../books/models/book.model';\n\n@Component({\n  selector: 'app-author-books-list',\n  templateUrl: './author-books-list.container.html',\n  styleUrls: ['./author-books-list.container.sass']\n})\nexport class AuthorBooksListContainer implements OnInit, OnDestroy {\n\n  @Input('authorId')\n  public authorId: number;\n\n  public shadowBooks = new Array(12);\n  public pageSize = 12;\n  public pageIndex = 1;\n  public countPages = 1;\n  public countRecords = 0;\n  public loaded = false;\n  public books: Book[] = [];\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly booksService: BooksService,\n  ) { }\n\n  public ngOnInit(): void {\n    this._getBooks(this.pageIndex);\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public loadMore(): void {\n    this.pageIndex += 1;\n\n    this._getBooks(this.pageIndex);\n  }\n\n  private _getBooks(\n    page: number\n  ): void {\n    this.booksService.getAuthorBooks(this.authorId, page)\n      .pipe(\n        delay(700),\n        takeUntil(this._destroy$)\n      )\n      .subscribe((res) => {\n        this.loaded = true;\n\n        this.books = this.books.concat(res.books);\n        this.countRecords = res.meta.records;\n        this.countPages = res.meta.pages;\n      });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\napp-book\n  margin-left: 30px\n\n  @include mobile\n    margin-left: 0px\n\n  &:nth-child(3n+1)\n    margin-left: 0px\n    \n    @include tablet\n      margin-left: 30px\n    \n    @include mobile\n      margin-left: 0px\n\n  &:nth-child(2n+1)\n\n    @include tablet\n      margin-left: 0px\n    \n    @include mobile\n      margin-left: 0px\n\nmat-paginator\n  width: 100%\n  margin-top: 25px\n\n.container\n  width: 100%\n  display: flex\n  flex-wrap: wrap\n  margin-bottom: 50px\n\n@keyframes hiding\n  0%\n    opacity: 1\n  100%\n    opacity: 0\n\n.shadow-book\n  margin-top: 30px\n  margin-left: 30px\n  position: relative\n  background: #ececec\n  width: 300px\n  height: 375px\n  clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 100% 0%)\n  opacity: 1\n  animation: hiding 1.5s linear\n  \n  @include tablet\n    width: 275px\n\n  @include mobile\n    width: 275px\n    margin-left: 0px\n\n  .gradient\n    background-image: linear-gradient(90deg, $base-color 0px, $shine-color 40px, $base-color 80px) \n    height: 130%\n    width: 140%\n    transform: rotate(15deg) translate(-20%, -10%)\n    animation: loading $animation-duration infinite linear\n\n  .pad-cont\n    padding: 15px 15px 0px 15px\n\n  .img\n    height: 170px\n    width: 270px\n    transition: 0.6s\n    box-sizing: border-box\n    margin-bottom: 10px\n    background: $grey\n\n    @include tablet\n      width: 245px\n\n    @include mobile\n      width: 245px\n\n  .title\n    height: 25px\n    width: 100%\n    background: $grey\n\n  .text\n    margin-top: 10px\n    height: 50px\n    width: 100%\n    background: $grey\n\n  .price\n    margin-top: 10px\n    width: 75px\n    height: 25px\n    background: $grey\n    float: right\n\n  .genres\n    width: 100%\n    display: flex\n\n    .genre\n      margin-top: 20px\n      height: 25px\n      width: 110px\n      background: $grey\n      margin-left: 15px\n\n  &:nth-child(3n+1)\n    margin-left: 0px\n\n    @include tablet\n      margin-left: 30px\n\n    @include mobile\n      margin-left: 0px\n\n  &:nth-child(2n+1)\n\n    @include tablet\n      margin-left: 0px\n\n    @include mobile\n      margin-left: 0px\n\n@keyframes loading\n  0%\n    background-position: 0px\n  100%\n    background-position: 300px\n    \n    \n.not-found\n  margin-top: 40px\n  box-sizing: border-box\n  height: 200px\n  width: 100%\n  background: #ececec\n  display: flex\n  justify-content: center\n  align-items: center\n\n.action-line\n  width: 100%\n  height: 50px\n  display: flex\n  justify-content: center\n  margin-bottom: 50px\n\n  .load-more\n    width: 200px\n    height: 50px\n",
                    "styleUrl": "./author-books-list.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "booksService",
                        "type": "BooksService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "booksService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"not-found\" \n     *ngIf=\"!countRecords && loaded\">\n  Not found\n</div>\n\n<ng-container *ngIf=\"loaded ; else elseBlock\">\n  <div class=\"container\" >\n    <app-book *ngFor=\"let book of books\" \n              [book]=\"book\">\n    </app-book>    \n  </div>  \n</ng-container>\n\n\n<ng-template #elseBlock>\n  <div class=\"container\">\n    <div  class=\"shadow-book\"\n          *ngFor=\"let book of shadowBooks\">\n      <div class=\"pad-cont\">\n        <div class=\"img\"></div>\n\n        <div class=\"title\"></div>\n\n        <div class=\"text\"></div>\n\n        <div class=\"price\"></div>\n      </div>\n      <div class=\"genres\">\n        <div class=\"genre\"></div>\n\n        <div class=\"genre\"></div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<div class=\"action-line\"\n     *ngIf=\"pageIndex < countPages\">\n    <button mat-flat-button\n            color=\"primary\"\n            class=\"load-more\"\n            (click)=\"loadMore()\">\n        More\n    </button>\n</div>\n"
        },
        {
            "name": "AuthorCardComponent",
            "id": "component-AuthorCardComponent-86f63cb2fe6a90ba5db1cafd570c5ede",
            "file": "src/app/authors/components/author-card/author-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-author-card",
            "styleUrls": [
                "./author-card.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./author-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "author",
                    "line": 14,
                    "type": "Author"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { Author } from '../../models/author.model';\n\n@Component({\n  selector: 'app-author-card',\n  templateUrl: './author-card.component.html',\n  styleUrls: ['./author-card.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AuthorCardComponent implements OnInit {\n\n  @Input('author')\n  public author: Author;\n\n  constructor() { }\n\n  public ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\nmat-card\n  margin-top: 20px\n  cursor: pointer\n  transition: 0.5s\n  \n  &:hover\n    background: #ececec\n    transform: scale(1.1)  \n\n.wrapper\n  width: 190px\n  height: 50px\n  font-weight: 600\n  display: flex\n  justify-content: center\n  align-items: center\n  font-size: 18px\n\n  @include mobile\n    width: 100%\n",
                    "styleUrl": "./author-card.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card fxLayoutAlign=\"start stretch\"\n          [routerLink]=\"['/authors/details', author.id]\">\n  <div class=\"wrapper\">\n    {{ author.firstName }} {{ author.lastName }}\n  </div>\n</mat-card>\n"
        },
        {
            "name": "AuthorCreateContainer",
            "id": "component-AuthorCreateContainer-4680ce28902975e2071b848276c33225",
            "file": "src/app/authors/containers/author-create/author-create.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-author-create",
            "styleUrls": [
                "./author-create.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./author-create.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "authorForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorFormData",
                    "defaultValue": "new Author()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "edited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_snackMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "canDeactivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean | Observable | Promise",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "cf",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "cf",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators\n} from '@angular/forms';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\nimport { DialogService } from '../../../core/services/dialog.service';\nimport { AuthorsService } from '../../../core/services/authors.service';\nimport { IDialogBody } from '../../../core/models/dialog-body.interface';\nimport { Author } from '../../../authors/models/author.model';\n\n@Component({\n  selector: 'app-author-create',\n  templateUrl: './author-create.container.html',\n  styleUrls: ['./author-create.container.sass']\n})\nexport class AuthorCreateContainer implements OnInit, OnDestroy {\n\n  public authorForm: FormGroup;\n  public authorFormData = new Author();\n  public submited = false;\n  public edited = false;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly snack: MatSnackBar,\n    private readonly route: ActivatedRoute,\n    private readonly dialogService: DialogService,\n    private readonly router: Router,\n    private readonly fb: FormBuilder,\n    private readonly authorsService: AuthorsService\n  ) { }\n\n  public ngOnInit(): void {\n    this._initForm();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public onSubmit(cf: Object): void {\n    this.submited = true;\n\n    if (!this.authorForm.invalid) {\n      Object.assign(this.authorFormData, cf);\n\n      this.authorsService.createAuthor(this.authorFormData)\n        .pipe(takeUntil(this._destroy$))\n        .subscribe(() => this._snackMessage());\n    }\n  }\n\n  public canDeactivate(): boolean | Observable<boolean> | Promise<boolean> {\n    if (this.edited && !this.submited) {\n      const data: IDialogBody = {\n        message: 'Are you sure you want to leave form?',\n        type: 'multiple'\n      };\n\n      return new Promise((resolve) => {\n        const close = this.dialogService.openDialog(data)\n          .pipe(\n            take(1),\n            takeUntil(this._destroy$)\n          )\n          .subscribe(res => resolve(res));\n      });\n    }\n\n    return true;\n  }\n\n  private _initForm(): void {\n    this.authorForm = this.fb.group(\n      {\n        firstName: [ '', Validators.required ],\n        lastName: [ '', Validators.required ]\n      }\n    );\n\n    this.authorForm.valueChanges\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(() => this.edited = true);\n  }\n\n  private _snackMessage(): void {\n    this.snack.open('Author created', 'Ok', {\n      duration: 3000,\n      horizontalPosition: 'end',\n      verticalPosition: 'top'\n    });\n\n    this.router.navigate(['/authors']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.line\n  width: 100%\n  display: flex\n  justify-content: space-between\n\n  mat-form-field\n    width: 45%\n",
                    "styleUrl": "./author-create.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snack",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authorsService",
                        "type": "AuthorsService"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "snack",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authorsService",
                        "type": "AuthorsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<form [formGroup]=\"authorForm\"\n      (ngSubmit)=\"onSubmit(authorForm.value)\">\n  \n  <h1>Create Author</h1>\n  \n  <div class=\"line\">\n    <mat-form-field>\n      <mat-label>First Name</mat-label>\n      \n      <input matInput\n             placeholder=\"Enter a First Name\"\n             formControlName=\"firstName\"\n             required\n             autocomplete=\"off\">\n      \n      <mat-error *ngIf=\"authorForm.get('firstName').hasError('required') && submited\"\n                 class=\"error\">\n        Oops, First Name is required!\n      </mat-error>\n    </mat-form-field>  \n\n    <mat-form-field>\n      <mat-label>Last Name</mat-label>\n      \n      <input matInput\n             placeholder=\"Enter a First Name\"\n             formControlName=\"lastName\"\n             required\n             autocomplete=\"off\">\n      \n      <mat-error *ngIf=\"authorForm.get('lastName').hasError('required') && submited\"\n                  class=\"error\">\n        Oops, Last Name is required!\n      </mat-error>\n    </mat-form-field> \n  </div>\n\n  <button type=\"submit\" mat-flat-button\n          color=\"primary\">\n    Save\n  </button>   \n</form>\n"
        },
        {
            "name": "AuthorEditContainer",
            "id": "component-AuthorEditContainer-c0624846007cd2a9f6e7180ca3844f51",
            "file": "src/app/author/containers/author-edit/author-edit.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-author-edit",
            "styleUrls": [
                "./author-edit.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./author-edit.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "author",
                    "type": "Author",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "authorFormData",
                    "defaultValue": "new Author()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "edited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_snackMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "canDeactivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean | Observable | Promise",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "cf",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "cf",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators\n} from '@angular/forms';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\nimport { DialogService } from '../../../core/services/dialog.service';\nimport { AuthorsService } from '../../../core/services/authors.service';\nimport { IDialogBody } from '../../../core/models/dialog-body.interface';\nimport { Author } from '../../../authors/models/author.model';\n\n@Component({\n  selector: 'app-author-edit',\n  templateUrl: './author-edit.container.html',\n  styleUrls: ['./author-edit.container.sass']\n})\nexport class AuthorEditContainer implements OnInit, OnDestroy {\n\n  public authorForm: FormGroup;\n  public authorFormData = new Author();\n  public author: Author;\n  public submited = false;\n  public edited = false;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly snack: MatSnackBar,\n    private readonly route: ActivatedRoute,\n    private readonly dialogService: DialogService,\n    private readonly router: Router,\n    private readonly fb: FormBuilder,\n    private readonly authorsService: AuthorsService\n  ) { }\n\n  public ngOnInit(): void {\n    this.author = this.route.parent.snapshot.data.author;\n    this._initForm();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public onSubmit(cf: Object): void {\n    this.submited = true;\n\n    if (!this.authorForm.invalid) {\n      Object.assign(this.authorFormData, cf);\n\n      this.authorsService.updateAuthor(this.authorFormData)\n        .pipe(takeUntil(this._destroy$))\n        .subscribe(\n          () => this._snackMessage()\n        );\n    }\n  }\n\n  public canDeactivate(): boolean | Observable<boolean> | Promise<boolean> {\n    if (this.edited && !this.submited) {\n      const data: IDialogBody = {\n        message: 'Are you sure you want to leave form?',\n        type: 'multiple'\n      };\n\n      return new Promise((resolve) => {\n        const close = this.dialogService.openDialog(data)\n          .pipe(\n            take(1),\n            takeUntil(this._destroy$)\n          )\n          .subscribe(\n            res => resolve(res)\n          );\n      });\n    }\n\n    return true;\n  }\n\n  private _initForm(): void {\n    this.authorForm = this.fb.group(\n      {\n        id: [ this.author.id, Validators.required ],\n        firstName: [ this.author.firstName, Validators.required ],\n        lastName: [ this.author.lastName, Validators.required ]\n      }\n    );\n\n    this.authorForm.valueChanges\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(() => this.edited = true);\n  }\n\n  private _snackMessage(): void {\n    this.snack.open('Author edited', 'Ok', {\n      duration: 3000,\n      horizontalPosition: 'end',\n      verticalPosition: 'top'\n    });\n\n    this.router.navigate(['/authors']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.line\n  width: 100%\n  display: flex\n  justify-content: space-between\n\n  mat-form-field\n    width: 45%\n",
                    "styleUrl": "./author-edit.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snack",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authorsService",
                        "type": "AuthorsService"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "snack",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authorsService",
                        "type": "AuthorsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<form [formGroup]=\"authorForm\"\n      (ngSubmit)=\"onSubmit(authorForm.value)\">\n  \n  <h1>Edit Author</h1>\n  \n  <div class=\"line\">\n    <mat-form-field>\n      <mat-label>First Name</mat-label>\n      \n      <input matInput\n             placeholder=\"Enter a First Name\"\n             formControlName=\"firstName\"\n             required\n             autocomplete=\"off\">\n      \n      <mat-error *ngIf=\"authorForm.get('firstName').hasError('required') && submited\"\n                 class=\"error\">\n        Oops, First Name is required!\n      </mat-error>\n    </mat-form-field>  \n\n    <mat-form-field>\n      <mat-label>Last Name</mat-label>\n      \n      <input matInput\n             placeholder=\"Enter a First Name\"\n             formControlName=\"lastName\"\n             required\n             autocomplete=\"off\">\n      \n      <mat-error *ngIf=\"authorForm.get('lastName').hasError('required') && submited\"\n                  class=\"error\">\n        Oops, Last Name is required!\n      </mat-error>\n    </mat-form-field> \n  </div>\n\n  <button type=\"submit\" mat-flat-button\n          color=\"primary\"\n          [disabled]=\"!edited && authorForm.valid\">\n    Save\n  </button>   \n</form>\n"
        },
        {
            "name": "AuthorShowContainer",
            "id": "component-AuthorShowContainer-521117fbd4ed7b2a95773d645db15609",
            "file": "src/app/author/containers/author-show/author-show.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-author-show",
            "styleUrls": [
                "./author-show.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./author-show.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "author",
                    "type": "Author",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "books",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n\nimport { Author } from '../../../authors/models/author.model';\nimport { Book } from '../../../books/models/book.model';\n\n@Component({\n  selector: 'app-author-show',\n  templateUrl: './author-show.container.html',\n  styleUrls: ['./author-show.container.sass']\n})\nexport class AuthorShowContainer implements OnInit {\n\n  public author: Author;\n  public books: Book[];\n\n\n  constructor(\n    private readonly route: ActivatedRoute,\n  ) { }\n\n  public ngOnInit(): void {\n    this.author = this.route.snapshot.parent.data.author;\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.line\n  height: 3px\n  width: 100%\n  background: #ececec\n\n  &.marg\n    margin-top: 50px\n\n.bold\n  font-weight: 600\n  font-size: 20px\n  margin-top: 20px\n",
                    "styleUrl": "./author-show.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>\n  {{ author.firstName }} {{ author.lastName }}\n</h1>\n\n<div class=\"line\"></div>\n<h2>\n  Biography\n</h2>\n<div class=\"line\"></div>\n\n<p>\n  William Shakespeare (bapt. 26 April 1564 – 23 April 1616)[a] was an English playwright, poet, and actor, widely regarded as the greatest writer in the English language and the world's greatest dramatist.[2][3][4] He is often called England's national poet and the \"Bard of Avon\" (or simply \"the Bard\").[5][b] His extant works, including collaborations, consist of some 39 plays,[c] 154 sonnets, two long narrative poems, and a few other verses, some of uncertain authorship. His plays have been translated into every major living language and are performed more often than those of any other playwright.[7] They also continue to be studied and reinterpreted.\n</p>\n<p>\n  Shakespeare was born and raised in Stratford-upon-Avon, Warwickshire. At the age of 18, he married Anne Hathaway, with whom he had three children: Susanna and twins Hamnet and Judith. Sometime between 1585 and 1592, he began a successful career in London as an actor, writer, and part-owner of a playing company called the Lord Chamberlain's Men, later known as the King's Men. At age 49 (around 1613), he appears to have retired to Stratford, where he died three years later. Few records of Shakespeare's private life survive; this has stimulated considerable speculation about such matters as his physical appearance, his sexuality, his religious beliefs, and whether the works attributed to him were written by others.\n</p>\n\n<div class=\"line marg\"></div>\n<h2>Related books</h2>\n<div class=\"line\"></div>\n\n<app-author-books-list [authorId]=\"author.id\">\n</app-author-books-list>\n"
        },
        {
            "name": "AuthorsListContainer",
            "id": "component-AuthorsListContainer-0a1b71506d58b0ce9345875634a4b087",
            "file": "src/app/authors/containers/authors-list/authors-list.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-authors-list",
            "styleUrls": [
                "./authors-list.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./authors-list.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "authors",
                    "defaultValue": "[]",
                    "type": "Author[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getAuthors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { AuthorsService } from '../../../core/services/authors.service';\nimport { Author } from '../../models/author.model';\n\n@Component({\n  selector: 'app-authors-list',\n  templateUrl: './authors-list.container.html',\n  styleUrls: ['./authors-list.container.sass']\n})\nexport class AuthorsListContainer implements OnInit, OnDestroy {\n\n  public authors: Author[] = [];\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private authorsService: AuthorsService\n  ) { }\n\n  public ngOnInit(): void {\n    this.getAuthors();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public getAuthors(): void {\n    this.authorsService.getAllAuthors()\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(res => this.authors = res);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\napp-author-card\n  margin-left: 20px\n  \n  @include mobile\n    margin-left: 0px\n\n  &:nth-child(4n+1)\n    margin-left: 0px\n\n.container\n  width: 100%\n  display: flex\n  flex-wrap: wrap\n  margin-bottom: 50px\n\n  @include mobile\n    flex-direction: column\n",
                    "styleUrl": "./authors-list.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authorsService",
                        "type": "AuthorsService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "authorsService",
                        "type": "AuthorsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container\">\n  <app-author-card [author]=\"author\"\n                   *ngFor=\"let author of authors\">\n  </app-author-card>\n</div>\n"
        },
        {
            "name": "AuthorsView",
            "id": "component-AuthorsView-a9d4b245b448e991ed36d0ff663617e1",
            "file": "src/app/authors/views/authors/authors.view.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-authors",
            "styleUrls": [
                "./authors.view.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./authors.view.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isHidden",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "openCreate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-authors',\n  templateUrl: './authors.view.html',\n  styleUrls: ['./authors.view.sass']\n})\nexport class AuthorsView implements OnInit, OnDestroy {\n\n  public isHidden = false;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly router: Router\n  ) {\n    this.router.events\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((event) => {\n        if (event instanceof NavigationEnd) {\n          if (event.url.includes('create')) {\n            this.isHidden = true;\n          } else {\n            this.isHidden = false;\n          }\n        }\n      });\n  }\n\n  public ngOnInit(): void {}\n\n  public openCreate(): void {\n    this.router.navigate(['/authors/create']);\n  }\n\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.line\n  display: flex\n  justify-content: space-between\n  align-items: center\n\n  @include mobile\n    flex-direction: column\n  \n  .create\n    height: 50px\n    width: 200px\n    \n    @include mobile\n      width: 100%\n",
                    "styleUrl": "./authors.view.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"header\"></div>\n\n<div class=\"grid\">\n  <div class=\"line\" \n       *ngIf=\"!isHidden\"\n       routerLinkActive=\"active\">\n    <h1>Authors</h1>\n    <button class=\"create\"\n            mat-raised-button\n            (click)=\"openCreate()\">\n      Create Author\n    </button>\n  </div>\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "AuthorView",
            "id": "component-AuthorView-12cca140b38af1bdf2948bda997b99e3",
            "file": "src/app/author/views/author/author.view.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-author",
            "styleUrls": [
                "./author.view.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./author.view.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "author",
                    "type": "Author",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router, NavigationEnd } from '@angular/router';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { DialogService } from '../../../core/services/dialog.service';\nimport { AuthorsService } from '../../../core/services/authors.service';\nimport { Author } from '../../../authors/models/author.model';\n\n@Component({\n  selector: 'app-author',\n  templateUrl: './author.view.html',\n  styleUrls: ['./author.view.sass']\n})\nexport class AuthorView implements OnInit, OnDestroy {\n\n  public author: Author;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly authorsService: AuthorsService,\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly dialog: DialogService\n  ) { }\n\n  public ngOnInit(): void {\n    this.author = this.route.snapshot.data.author;\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public delete(): void {\n    this.dialog.openDialog({\n      message: 'Are you sure you want to delete this author?',\n      type: 'multiple'\n    }).pipe(takeUntil(this._destroy$))\n      .subscribe(\n        (res) => res ? this._delete() : null\n      );\n  }\n\n  private _delete(): void {\n    this.authorsService.deleteAuthor(this.author.id)\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(res => this.router.navigate(['/authors']));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.actions\n  width: 275px\n  height: 40px\n  right: 0px\n  position: absolute\n  display: flex\n  justify-content: space-between\n\n  button\n    width: 125px\n\n    &.active\n      display: none\n\n.content\n  top: 50px\n  position: relative\n",
                    "styleUrl": "./author.view.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authorsService",
                        "type": "AuthorsService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dialog",
                        "type": "DialogService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "authorsService",
                        "type": "AuthorsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"header\"></div>\n\n<div class=\"grid-short\">\n  <div class=\"actions\">\n    <button mat-flat-button \n            color=\"primary\"\n            [routerLink]=\"['show']\"\n            routerLinkActive=\"active\">\n      Details\n    </button>\n\n    <button mat-flat-button \n            color=\"primary\"\n            [routerLink]=\"['edit']\"\n            routerLinkActive=\"active\">\n      Edit\n    </button>\n\n    <button mat-flat-button \n            color=\"primary\"\n            (click)=\"delete()\">\n      Delete\n    </button>\n  </div>\n  <div class=\"content\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n\n"
        },
        {
            "name": "AuthView",
            "id": "component-AuthView-0eb2e5d91dcb380e9e6da3e1fb9f98f1",
            "file": "src/app/auth/views/auth/auth.view.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth",
            "styleUrls": [
                "./auth.view.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./auth.view.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.view.html',\n  styleUrls: ['./auth.view.sass']\n})\nexport class AuthView implements OnInit {\n\n  constructor() { }\n\n  public ngOnInit(): void {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./auth.view.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "BookComponent",
            "id": "component-BookComponent-8600fd04df83d505d54632756ac8bcc4",
            "file": "src/app/ui/components/book/book.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-book",
            "styleUrls": [
                "./book.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./book.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "book",
                    "line": 22,
                    "type": "Book"
                }
            ],
            "outputsClass": [
                {
                    "name": "genreFilter",
                    "defaultValue": "new EventEmitter<string[]>()",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "imageSrc",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "filterByGenre",
                    "args": [
                        {
                            "name": "genre",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "genre",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  ChangeDetectionStrategy,\n  EventEmitter\n} from '@angular/core';\n\nimport { Book } from '../../../books/models/book.model';\nimport { environment } from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-book',\n  templateUrl: './book.component.html',\n  styleUrls: ['./book.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BookComponent implements OnInit {\n\n  @Input('book')\n  public book: Book;\n  public imageSrc: string;\n\n  @Output('genreFilter')\n  private _genreFilter = new EventEmitter<string[]>();\n\n  public ngOnInit(): void {\n    if (this.book.image) {\n      this.imageSrc = environment.hosts.imgHost + this.book.image;\n    }\n  }\n\n  public filterByGenre(genre: string[]): void {\n    this._genreFilter.emit(genre);\n  }\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\nmat-card::ng-deep\n  margin-top: 30px\n  padding: 0px !important\n  opacity: 1px\n  animation: showing 1s linear\n  outline: none\n  width: 300px\n\n  @include tablet\n    width: 275px\n\n  @include mobile\n    width: 275px\n\n@keyframes showing\n  0%\n    opacity: 0\n  100%\n    opacity: 1\n\n.title\n  height: 28px\n  overflow: hidden\n\n.container\n  height: 375px\n  cursor: pointer\n  width: 300px\n\n  @include tablet\n    width: 275px\n\n  @include mobile\n    width: 275px\n\n  &:hover\n    .hover-cover\n      background-color: rgba(0,0,0,0.5)\n\n  .pad-cont\n    padding: 15px 15px 0px 15px\n    outline: none\n\n  .content\n    height: 50px\n    overflow: hidden\n    margin-bottom: 6px\n  \n  .hover-cover\n    height: 100%\n    width: 100%\n    transition: 0.4s\n\n  .img\n    position: relative\n    height: 170px\n    width: 270px\n    transition: 0.6s\n    box-sizing: border-box\n    margin-bottom: 10px\n    background-color: #9ccfff\n    background-size: cover\n    background-position: center\n\n    @include tablet\n      width: 245px\n\n    @include mobile\n      width: 245px\n\n  .flex-cont\n    display: flex\n\n  .price\n    text-align: right\n    font-weight: 700\n    font-size: 20px\n    width: 40%\n\n    @include tablet\n      font-size: 18px\n\n    @include mobile\n      font-size: 18px\n\n  .author\n    font-family: 'roboto-medium'\n    width: 60%\n    font-size: 16px\n    padding-top: 4px\n\n  .genres\n    display: flex\n    flex-wrap: wrap\n\n    .genre\n      box-sizing: border-box\n      padding: 4px\n      background: #ececec\n      transition: 0.4s\n      cursor: pointer\n      font-size: 14px\n      user-select: none\n      margin-left: 12px\n      margin-top: 12px\n\n      @include tablet\n        margin-left: 8px\n        margin-top: 8px\n        font-size: 15px\n        padding: 4px\n\n      @include mobile\n        margin-left: 8px\n        margin-top: 8px\n        font-size: 15px\n        padding: 4px\n\n      &:hover\n        background: #4982b8\n        color: white\n",
                    "styleUrl": "./book.component.sass"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card fxLayoutAlign=\"start stretch\">\n  <div class=\"container\">\n    <div class=\"pad-cont\" [routerLink]=\"['/books', book.id]\">\n      <div  class=\"img\"\n            *ngIf=\"imageSrc; else elseBlock\" \n            [ngStyle]=\"{'background-image': 'url(' + imageSrc + ')'}\">\n          <div class=\"hover-cover\"></div>\n      </div>\n\n      <ng-template #elseBlock>\n        <div class=\"img\">\n        </div>\n      </ng-template>\n      \n      <mat-card-title class=\"title\">\n        {{ book.title }}\n      </mat-card-title>\n      \n      <mat-card-content class=\"content\">\n        {{ book.description }}\n      </mat-card-content>\n      \n      <mat-card-content>\n        <div class=\"flex-cont\">\n          <div class=\"author\"></div>\n\n          <div class=\"price\">\n            {{ book.price | currency : 'USD' : 'symbol' : '1.0-0' }}\n          </div>\n        </div>\n      </mat-card-content>\n    </div>\n    \n    <div class=\"genres\">\n      <div class=\"genre\" \n           *ngFor=\"let genre of book.genres | slice:0:2\"\n           (click)=\"filterByGenre([genre.name])\">\n        {{ genre.name }}\n      </div>\n    </div>\n  \n  </div>\n</mat-card>\n"
        },
        {
            "name": "BookCreateContainer",
            "id": "component-BookCreateContainer-22e8d2e095ed31aecd0f471666a3bb5f",
            "file": "src/app/books/containers/book-create/book-create.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-book-create",
            "styleUrls": [
                "./book-create.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./book-create.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "authors$",
                    "type": "Observable<Author[]>",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "bookForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "compressedFile",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "created",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "croppedImage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "file",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "filename",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "genres$",
                    "type": "Observable<Genre[]>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "imageChangedEvent",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "matcher",
                    "defaultValue": "new BookErrorStateMatcher()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previews",
                    "type": "FileList",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "uploadedImage",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "uploadedPreviews",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "compressImage",
                    "args": [
                        {
                            "name": "fie",
                            "type": "File"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "fie",
                            "type": "File",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAuthors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getGenres",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "imageCropped",
                    "args": [
                        {
                            "name": "event",
                            "type": "ImageCroppedEvent"
                        },
                        {
                            "name": "filename",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ImageCroppedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "cf",
                            "type": "IForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "cf",
                            "type": "IForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "upload",
                    "args": [
                        {
                            "name": "fileList",
                            "type": "FileList"
                        },
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "fileList",
                            "type": "FileList",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadPreviews",
                    "args": [
                        {
                            "name": "fileList",
                            "type": "FileList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "fileList",
                            "type": "FileList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators\n} from '@angular/forms';\n\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil, map } from 'rxjs/operators';\n\nimport { ImageCroppedEvent } from 'ngx-image-cropper';\nimport { NgxImageCompressService } from 'ngx-image-compress';\n\nimport {\n  BookErrorStateMatcher\n} from '../../../core/matchers/error-state.matcher';\nimport { BooksService } from '../../services/books.service';\nimport { AuthorsService } from '../../../core/services/authors.service';\nimport { GenresService } from '../../../core/services/genres.service';\nimport { DialogService } from '../../../core/services/dialog.service';\nimport { IDialogBody } from '../../../core/models/dialog-body.interface';\nimport { Author } from '../../../authors/models/author.model';\nimport { Genre } from '../../../genres/models/genre.model';\nimport { BookRequest } from '../../models/book-request.model';\nimport { IForm } from '../../../../lib/models/form.interface';\nimport { AppValidator } from '../../../core/validators/app.validator';\n\n@Component({\n  selector: 'app-book-create',\n  templateUrl: './book-create.container.html',\n  styleUrls: ['./book-create.container.sass']\n})\nexport class BookCreateContainer implements OnInit, OnDestroy {\n\n  public bookForm: FormGroup;\n  public matcher = new BookErrorStateMatcher();\n\n  public submited = false;\n  public created = false;\n  public uploadedImage = false;\n  public uploadedPreviews = false;\n  public compressedFile: string;\n\n  public imageChangedEvent: Event;\n  public croppedImage: string;\n  public filename: string;\n\n  public authors$: Observable<Author[]>;\n  public genres$: Observable<Genre[]>;\n\n  public file: File;\n  public previews: FileList;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly snack: MatSnackBar,\n    private readonly dialogRef: MatDialogRef<BookCreateContainer>,\n    private readonly booksService: BooksService,\n    private readonly genresService: GenresService,\n    private readonly authorsService: AuthorsService,\n    private readonly fb: FormBuilder,\n    private readonly dialogService: DialogService,\n    private readonly compressService: NgxImageCompressService,\n    private readonly validator: AppValidator\n  ) { }\n\n  public ngOnInit(): void {\n    this.dialogRef.disableClose = true;\n    this.dialogRef.backdropClick()\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(res => this.close());\n\n    this.getAuthors();\n    this.getGenres();\n\n    this._initForm();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public close(): void {\n    if (!this.created) {\n      const data: IDialogBody = {\n        message: 'Do you want save your data?',\n        type: 'multiple'\n      };\n\n      this.dialogService.openDialog(data)\n        .pipe(\n          map(res => res ? null : this.dialogRef.close()),\n          takeUntil(this._destroy$)\n        )\n        .subscribe();\n    } else {\n      this.dialogRef.close();\n    }\n  }\n\n  public getGenres(): void {\n    this.genres$ = this.genresService\n      .getAllGenres();\n  }\n\n  public getAuthors(): void {\n    this.authors$ = this.authorsService\n      .getAllAuthors();\n  }\n\n  public imageCropped(event: ImageCroppedEvent, filename: string): void {\n    this.croppedImage = event.base64;\n    fetch(this.croppedImage)\n      .then(res => res.blob())\n      .then((blob) => {\n        const file = new File([blob], this.filename, { type: 'image/png' });\n        this.compressImage(file);\n      });\n  }\n\n  public upload(fileList: FileList, event: Event): void {\n    this.file = fileList[0];\n    this.uploadedImage = true;\n    this.filename = this.file.name;\n\n    setTimeout(() => this.imageChangedEvent = event, 401);\n  }\n\n  public uploadPreviews(fileList: FileList): void {\n    this.previews = fileList;\n\n    this.bookForm.patchValue({\n      previews: this.previews\n    });\n\n    this.uploadedPreviews = true;\n  }\n\n  public compressImage(fie: File): void {\n    const reader = new FileReader();\n\n    reader.onload = (event: Event) => {\n      const orientation = -1;\n      const localUrl = event.target['result'];\n\n      this.compressService\n        .compressFile(localUrl, orientation, 50, 50)\n        .then(\n          (base64) => {\n            fetch(base64)\n              .then(res => res.blob())\n              .then((blob) => {\n                const compressedFile = new File(\n                  [blob],\n                  this.filename,\n                  { type: 'image/png' }\n                );\n\n                this.bookForm.patchValue({\n                  image: compressedFile\n                });\n              });\n          }\n        );\n    };\n\n    reader.readAsDataURL(this.file);\n  }\n\n  public onSubmit(cf: IForm): void {\n    this.submited = true;\n\n    if (!this.bookForm.invalid) {\n      const bookRequest = BookRequest.new(BookRequest, cf);\n\n      this.booksService.createBook(bookRequest)\n        .pipe(takeUntil(this._destroy$))\n        .subscribe(\n          (res) => {\n            this.created = true;\n\n            this.snack.open('Book created', 'Ok', {\n              duration: 3000,\n              horizontalPosition: 'end',\n              verticalPosition: 'top'\n            });\n\n            this.close();\n          }\n        );\n    }\n  }\n\n  private _initForm(): void {\n    this.bookForm = this.fb.group(\n      {\n        title: ['', Validators.required],\n        description: ['', Validators.required],\n        author: [null, Validators.required],\n        genres: [[]],\n        writingDate: [null, Validators.required],\n        releaseDate: [null, Validators.required],\n        price: ['', Validators.required],\n        image: [null, Validators.required],\n        previews: [null]\n      },\n      {\n        validators: this.validator.checkDateValidation\n      }\n    );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.mat-form-field-wrapper\n  @include mobile\n    padding-bottom: 16px\n\n.container\n  width: 1000px\n  height: 750px\n  position: relative\n\n  @include tablet\n    width: 100%\n    height: 100%\n\n  @include mobile\n    width: 100%\n    height: 600px\n\n  mat-form-field\n    input\n      cursor: pointer\n\n  .close\n    position: absolute\n    top: 0px\n    right: 0px\n    cursor: pointer\n    z-index: 1000\n  \n  form\n    width: 90%\n    margin: 0px auto\n    height: 100%\n    position: relative\n    overflow-y: auto\n\n    @include tablet\n      width: 100%\n\n    @include mobile\n      width: 100%\n\n    .flex\n      display: flex\n      justify-content: space-between\n\n    .md-1\n      width: 0%\n      transition: 0.4s\n      &.wide\n        width: 35%\n\n      @include tablet\n        display: none\n\n      @include mobile\n        display: none\n\n      .croper\n        width: 100%\n        height: 100%\n        // background: #ececec\n        display: flex\n        justify-content: center\n        align-items: center\n\n        \n\n    .md-2\n      width: 100%\n      \n      &.short\n        width: 60%\n\n      @include tablet\n        width: 100%\n\n      @include mobile\n        width: 100%\n\n    mat-form-field\n      width: 100%\n      margin-top: 10px\n\n    .flex-line\n      width: 100%\n      display: flex\n      justify-content: space-between\n\n      @include mobile\n        flex-direction: column\n\n    .half-group\n      width: 46%\n\n      @include mobile\n        width: 100%\n\n    button[type=\"submit\"]\n      width: 100%\n      height: 50px\n      font-size: 17px\n      font-weight: 400\n      margin-top: 30px\n    \n  .error\n    color: red\n    font-size: 12px\n\n  .unfocus:focus\n    border: none\n    outline: none\n\n  .pad-error\n    padding-top: 4px\n\n.empty-field\n  height: 80px\n  width: 100%\n  margin-top: 11px\n\ntextarea\n  resize: none\n\n.file\n  width: 100%\n  height: 60px\n  margin-top: 13px\n  position: relative\n\n  input[type=\"file\"]\n    cursor: pointer\n    z-index: 100\n    position: absolute\n    height: 100%\n    width: 100%\n    top: 0px\n    opacity: 0\n\n  .placeholder\n    user-select: none\n    background: #ececec\n    z-index: 50\n    position: absolute\n    height: 100%\n    width: 100%\n    display: flex \n    justify-content: center\n    align-items: center\n    border-radius: 4px\n\n    &.uploaded\n      background: #3f51b5\n      color: white\n",
                    "styleUrl": "./book-create.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snack",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<BookCreateContainer>"
                    },
                    {
                        "name": "booksService",
                        "type": "BooksService"
                    },
                    {
                        "name": "genresService",
                        "type": "GenresService"
                    },
                    {
                        "name": "authorsService",
                        "type": "AuthorsService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "compressService",
                        "type": "NgxImageCompressService"
                    },
                    {
                        "name": "validator",
                        "type": "AppValidator"
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "snack",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<BookCreateContainer>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "booksService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "genresService",
                        "type": "GenresService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authorsService",
                        "type": "AuthorsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "compressService",
                        "type": "NgxImageCompressService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validator",
                        "type": "AppValidator",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container\">\n  <mat-icon aria-hidden=\"false\"\n            class=\"close\"\n            (click)=\"close()\">\n      close\n  </mat-icon>\n  <form class=\"body\"\n        [formGroup]=\"bookForm\"\n        (ngSubmit)=\"onSubmit(bookForm.value)\">\n    <h1>Create book</h1>\n    \n    <div class=\"flex\">\n      <div  class=\"md md-2\"\n            [ngClass]=\"uploadedImage ? 'short' : ''\">\n        <!-- Title -->\n        <mat-form-field class=\"input\">\n          <mat-label>Title</mat-label>\n          <input matInput\n                 #title\n                 placeholder=\"Enter a title\"\n                 formControlName=\"title\"\n                 required\n                 autocomplete=\"off\"\n                 [errorStateMatcher]=\"matcher\">\n          <mat-error *ngIf=\"bookForm.get('title').hasError('required') && submited\"\n                     class=\"error\">\n            Oops, title is required!\n          </mat-error>\n        </mat-form-field>  \n        \n    \n        <!-- Description -->\n        <mat-form-field>\n          <mat-label>Description</mat-label>\n          <textarea matInput\n                    placeholder=\"Enter a title\"\n                    formControlName=\"description\"\n                    required\n                    rows=\"3\"\n                    [errorStateMatcher]=\"matcher\"\n          ></textarea>\n          <mat-error  *ngIf=\"bookForm.get('description').hasError('required') && submited\"\n                      class=\"error\">\n            Oops, Description is required!\n          </mat-error>\n        </mat-form-field>\n    \n        <div class=\"flex-line\">\n          <div class=\"half-group\">\n            <!-- Author -->\n            <mat-form-field class=\"select\" \n            *ngIf=\"(authors$ | async) as resultAuthors\">\n              <mat-label>Choose an Author</mat-label>\n    \n              <mat-select formControlName=\"author\"\n                          required\n                          [errorStateMatcher]=\"matcher\">\n                <mat-option [value]=\"author\"\n                            *ngFor=\"let author of resultAuthors\">\n                {{ author.firstName }} {{ author.lastName }}\n                </mat-option>\n              </mat-select>\n              \n              <mat-error  *ngIf=\"bookForm.get('author').hasError('required') && submited\"\n                          class=\"error\">\n                Oops, Author is required!\n              </mat-error>\n            </mat-form-field>\n    \n            <!-- Writing Date -->\n            <mat-form-field (click)=\"writingPicker.open()\">\n              <mat-label>Writing date</mat-label>\n              <input matInput\n                     autocomplete=\"off\"\n                     required \n                     [matDatepicker]=\"writingPicker\" \n                     placeholder=\"Enter a writing date\"\n                     formControlName=\"writingDate\"\n                     [errorStateMatcher]=\"matcher\">\n              <mat-datepicker-toggle matSuffix [for]=\"writingPicker\"></mat-datepicker-toggle>\n              <mat-datepicker disabled=\"false\" #writingPicker></mat-datepicker>\n              \n              <mat-error *ngIf=\"bookForm.get('writingDate').hasError('required') && submited\"\n                         class=\"error\">\n                Oops, Writing date is required!\n              </mat-error>\n            </mat-form-field>\n\n            <!-- Price -->\n            <mat-form-field>\n              <mat-label>Price</mat-label>\n              <input matInput\n                     required\n                     autocomplete=\"off\"\n                     type=\"number\"\n                     placeholder=\"Enter a price\"\n                     formControlName=\"price\"\n                     [errorStateMatcher]=\"matcher\">\n              <mat-error  *ngIf=\"bookForm.get('price').hasError('required') && submited\"\n                          class=\"error\">\n                Oops, Price  is required!\n              </mat-error>             \n            </mat-form-field>\n            \n            <!-- file -->\n            <div class=\"file\" matRipple>\n              <input type=\"file\"\n                     (change)=\"upload($event.target.files, $event)\"\n                     name=\"file\"\n                     accept=\"image/png, image/jpeg\">\n              <div class=\"placeholder\"\n                   [ngClass]=\"uploadedImage ? 'uploaded' : ''\">\n                {{ uploadedImage ? 'Uploaded cover': 'Choose a cover *' }}\n              </div>\n            </div>\n            <div class=\"error pad-error\" *ngIf=\"!uploadedImage && submited\">\n              Upload cover\n            </div>            \n          </div>\n\n\n          <div class=\"half-group\">\n            <!-- Genre -->\n            <mat-form-field class=\"select\" \n                            *ngIf=\"(genres$ | async) as resultGenres\">\n    \n              <mat-label>Choose a genres</mat-label>\n              <mat-select multiple formControlName=\"genres\"\n                          [errorStateMatcher]=\"matcher\">\n                <mat-option *ngFor=\"let genre of resultGenres\"\n                            [value]=\"genre\">\n                {{ genre.name }}\n                </mat-option>\n              </mat-select>\n              \n              <mat-error *ngIf=\"bookForm.get('genres').hasError('required') && submited\"\n                         class=\"error\">\n                Oops, Genres is required!\n              </mat-error>\n            </mat-form-field>\n            <!-- Release date -->\n            <mat-form-field (click)=\"releasePicker.open()\">\n              <mat-label>Release date</mat-label>\n              <input class=\"unfocus\"\n                     autocomplete=\"off\" \n                     matInput\n                     required\n                     [matDatepicker]=\"releasePicker\" \n                     placeholder=\"Enter a release date\"\n                     formControlName=\"releaseDate\"\n                     [errorStateMatcher]=\"matcher\">\n              <mat-datepicker-toggle matSuffix [for]=\"releasePicker\"></mat-datepicker-toggle>\n              <mat-datepicker disabled=\"false\" #releasePicker></mat-datepicker>\n              \n              <mat-error *ngIf=\"bookForm.get('releaseDate').hasError('required') && submited\"\n                         class=\"error\">\n                Oops, Release date is required!\n              </mat-error>\n              <mat-error *ngIf=\"bookForm.get('releaseDate').hasError('invalidDate') && submited\"\n                         class=\"error\">\n                Release date should be later than Writing date\n              </mat-error>\n            </mat-form-field>\n    \n            <div class=\"empty-field\"></div>\n\n            <div class=\"file\" matRipple>\n              <input type=\"file\"\n                     (change)=\"uploadPreviews($event.target.files)\"\n                     name=\"file\"\n                     accept=\"image/png, image/jpeg\">\n              <div class=\"placeholder\"\n                   [ngClass]=\"uploadedPreviews ? 'uploaded' : ''\">\n                {{ uploadedPreviews ? 'Uploaded previews': 'Choose a previews *' }}\n              </div>\n            </div>\n            <div class=\"error pad-error\" *ngIf=\"!uploadedPreviews && submited\">\n              Upload previews\n            </div>\n          </div>\n        </div>\n    \n        <button type=\"submit\"\n                mat-flat-button\n                color=\"primary\">\n          Create\n        </button>\n      </div>\n      <div class=\"md md-1\"\n           [ngClass]=\"uploadedImage ? 'wide' : ''\">\n        <div class=\"croper\">\n          <image-cropper\n            [imageChangedEvent]=\"imageChangedEvent\"\n            [maintainAspectRatio]=\"true\"\n            [aspectRatio]=\"16 / 9\"\n            [resizeToWidth]=\"300\"\n            format=\"png\"\n            (imageCropped)=\"imageCropped($event, filename)\">\n          </image-cropper>\n        </div>\n      </div>\n    </div>\n  </form>\n\n</div>\n"
        },
        {
            "name": "BookDeleteComponent",
            "id": "component-BookDeleteComponent-900f19d0cc68ef02ca493a27250b5036",
            "file": "src/app/book/components/book-delete/book-delete.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-book-delete",
            "styleUrls": [
                "./book-delete.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./book-delete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-book-delete',\n  templateUrl: './book-delete.component.html',\n  styleUrls: ['./book-delete.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BookDeleteComponent implements OnInit {\n\n  constructor() { }\n\n  public ngOnInit(): void {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./book-delete.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 mat-dialog-title>Are you sure you want to delete this book?</h2>\n\n<mat-dialog-actions align=\"end\">\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>Yes</button>\n  <button mat-button [mat-dialog-close]=\"false\">No</button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "BookEditContainer",
            "id": "component-BookEditContainer-6ac98616fcdb134d297201c26e15bcc8",
            "file": "src/app/book/containers/book-edit/book-edit.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-book-edit",
            "styleUrls": [
                "./book-edit.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./book-edit.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "authors$",
                    "type": "Observable<Author[]>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "book",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "bookForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "edited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileUrl",
                    "type": "string | ArrayBuffer",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "genres$",
                    "type": "Observable<Genre[]>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "imageSrc",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "matcher",
                    "defaultValue": "new BookErrorStateMatcher()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_snackMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "canDeactivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean | Observable | Promise",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getAuthors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getGenres",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "cf",
                            "type": "IForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "cf",
                            "type": "IForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "upload",
                    "args": [
                        {
                            "name": "fileList",
                            "type": "FileList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "fileList",
                            "type": "FileList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators\n} from '@angular/forms';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\nimport { NgxImageCompressService } from 'ngx-image-compress';\n\nimport { BooksService } from '../../../books/services/books.service';\nimport { AuthorsService } from '../../../core/services/authors.service';\nimport { GenresService } from '../../../core/services/genres.service';\nimport { DialogService } from '../../../core/services/dialog.service';\nimport { IDialogBody } from '../../../core/models/dialog-body.interface';\nimport { Author } from '../../../authors/models/author.model';\nimport { Genre } from '../../../genres/models/genre.model';\nimport { BookRequest } from '../../../books/models/book-request.model';\nimport {\n  BookErrorStateMatcher\n} from '../../../core/matchers/error-state.matcher';\nimport { Book } from '../../../books/models/book.model';\nimport { IForm } from '../../../../lib/models/form.interface';\nimport { environment } from '../../../../environments/environment';\nimport { AppValidator } from '../../../core/validators/app.validator';\n\n@Component({\n  selector: 'app-book-edit',\n  templateUrl: './book-edit.container.html',\n  styleUrls: ['./book-edit.container.sass']\n})\nexport class BookEditContainer implements OnInit, OnDestroy {\n\n  public bookForm: FormGroup;\n  public book: Book;\n  public matcher = new BookErrorStateMatcher();\n\n  public imageSrc: string;\n  public submited = false;\n  public edited = false;\n  public fileUrl: string | ArrayBuffer;\n\n  public authors$: Observable<Author[]>;\n  public genres$: Observable<Genre[]>;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly snack: MatSnackBar,\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly booksService: BooksService,\n    private readonly genresService: GenresService,\n    private readonly authorsService: AuthorsService,\n    private readonly fb: FormBuilder,\n    private readonly dialogService: DialogService,\n    private readonly compressService: NgxImageCompressService,\n    private readonly validator: AppValidator\n  ) { }\n\n  public ngOnInit(): void {\n    this.book = this.route.snapshot.parent.data.book;\n\n    if (this.book.image) {\n      this.imageSrc = environment.hosts.imgHost + this.book.image;\n    }\n\n    this.getAuthors();\n    this.getGenres();\n    this.loadForm();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public onSubmit(cf: IForm): void {\n    this.submited = true;\n\n    if (!this.bookForm.invalid) {\n      const bookRequest = BookRequest.new(BookRequest, cf);\n\n      this.booksService.updateBook(bookRequest)\n        .pipe(takeUntil(this._destroy$))\n        .subscribe(() => this._snackMessage());\n    }\n  }\n\n  public canDeactivate(): boolean | Observable<boolean> | Promise<boolean> {\n    if (this.edited && !this.submited) {\n      const data: IDialogBody = {\n        message: 'Are you sure you want to leave form?',\n        type: 'multiple'\n      };\n\n      return new Promise((resolve) => {\n        const close = this.dialogService.openDialog(data)\n          .pipe(\n            take(1),\n            takeUntil(this._destroy$)\n          )\n          .subscribe(\n            res => resolve(res)\n          );\n      });\n    }\n\n    return true;\n  }\n\n  public loadForm(): void {\n    this.bookForm = this.fb.group(\n      {\n        id: [ this.book.id, Validators.required],\n        title: [ this.book.title, Validators.required],\n        description: [this.book.description, Validators.required],\n        author: [this.book.authorId, Validators.required],\n        genres: [this.book.genres],\n        writingDate: [this.book.writingDate, Validators.required],\n        releaseDate: [this.book.releaseDate, Validators.required],\n        price: [this.book.price, Validators.required],\n        image: [null],\n        previews: [null],\n        uploadedImage: false,\n      },\n      {\n        validators: [\n          this.validator.checkDateValidation,\n          this.validator.checkImageValidation]\n      }\n    );\n    if (this.book.image) {\n      this.bookForm.patchValue({\n        uploadedImage: true\n      });\n    }\n    this.bookForm.valueChanges\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(() => this.edited = true);\n  }\n\n  public upload(fileList: FileList): void {\n    const file = fileList[0];\n    const reader = new FileReader();\n    const filename = file.name;\n    const orientation = -1;\n\n    reader.addEventListener('load', (event: Event) => {\n      const localUrl = event.target['result'];\n      this.fileUrl = `url('${localUrl}')`;\n\n      this.compressService\n        .compressFile(localUrl, orientation, 50, 50)\n        .then(\n          (base64) => {\n            fetch(base64)\n              .then(res => res.blob())\n              .then((blob) => {\n                const compressedFile = new File(\n                  [blob],\n                  filename,\n                  { type: 'image/png' }\n                );\n\n                this.bookForm.patchValue({\n                  image: compressedFile,\n                  uploadedImage: true\n                });\n              });\n          }\n        );\n    });\n    reader.readAsDataURL(file);\n  }\n\n  public getGenres(): void {\n    this.genres$ = this.genresService\n      .getAllGenres();\n  }\n\n  public getAuthors(): void {\n    this.authors$ = this.authorsService\n      .getAllAuthors();\n  }\n\n  private _snackMessage(): void {\n    this.snack.open('Book edited', 'Ok', {\n      duration: 3000,\n      horizontalPosition: 'end',\n      verticalPosition: 'top'\n    });\n\n    this.router.navigate(['/books']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.header-line\n  width: 100%\n  position: relative\n  display: flex\n\n  @include tablet\n    flex-direction: column\n\n  @include mobile\n    flex-direction: column\n\n  .img\n    height: 200px\n    width: 400px\n    position: relative\n    background-color: #ececec\n    background-size: cover\n    background-position: center\n    margin-top: 22px\n\n    @include tablet\n      width: 100%\n      height: 300px\n\n    @include mobile\n      width: 100%\n      height: 200px\n\n    .error\n      z-index: 200\n      position: absolute\n      color: red\n      font-size: 12px\n      padding: 5px 5px\n\n  .info\n    width: calc(100% - 250px)\n    height: 200px\n    margin-left: 50px\n\n    @include tablet\n      width: 100%\n      margin-left: 0px\n      height: auto\n    \n    @include mobile\n      width: 100%\n      margin-left: 0px\n      height: auto\n\n    span\n      font-weight: 500\n\n.flex-line\n  width: 100%\n  display: flex\n  justify-content: space-between\n\n  .form-group\n    width: 47%\n\nmat-form-field\n  width: 100%\n\n.price\n  width: 200px\n\n  @include mobile\n    width: 150px\n\n.description\n  margin-top: 50px\n\nbutton[type=\"submit\"]\n  width: 200px\n  height: 40px\n  margin-top: 22px\n\n  @include mobile\n    width: 100px\n\n.file\n  width: 100%\n  height: 100%\n  margin-top: 13px\n  top: 0px\n\n  input[type=\"file\"]\n    cursor: pointer\n    z-index: 100\n    position: absolute\n    height: 100%\n    width: 100%\n    top: 0px\n    opacity: 0\n\n  .placeholder\n    user-select: none\n    z-index: 50\n    position: absolute\n    background-size: cover\n    background-position: center\n    background-repeat: no-repeat\n    height: 100%\n    width: 100%\n    display: flex \n    top: 0px\n    justify-content: center\n    align-items: center\n    border-radius: 4px\n",
                    "styleUrl": "./book-edit.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snack",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "booksService",
                        "type": "BooksService"
                    },
                    {
                        "name": "genresService",
                        "type": "GenresService"
                    },
                    {
                        "name": "authorsService",
                        "type": "AuthorsService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "compressService",
                        "type": "NgxImageCompressService"
                    },
                    {
                        "name": "validator",
                        "type": "AppValidator"
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "snack",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "booksService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "genresService",
                        "type": "GenresService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authorsService",
                        "type": "AuthorsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "compressService",
                        "type": "NgxImageCompressService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validator",
                        "type": "AppValidator",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<form class=\"body\"\n     [formGroup]=\"bookForm\"\n     (ngSubmit)=\"onSubmit(bookForm.value)\">\n  <div class=\"header-line\">\n    <div class=\"img\" \n         [ngStyle]=\"{'background-image': 'url(' + imageSrc + ')'}\">\n      <div class=\"error\"\n           *ngIf=\"!bookForm.get('uploadedImage').value && submited\">\n        Not Uploaded Cover\n      </div>\n\n      <div class=\"file\" matRipple>\n        <input type=\"file\"\n               (change)=\"upload($event.target.files)\"\n               name=\"file\"\n               accept=\"image/png, image/jpeg\">\n        \n        <div class=\"placeholder\"\n              [style.background-image]=\"fileUrl\">\n          {{ bookForm.get('uploadedImage').value ? '': 'Choose a cover *' }}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"info\">\n      <mat-form-field class=\"input\">\n        <mat-label>Title</mat-label>\n        \n        <input matInput\n               #title\n               placeholder=\"Enter a title\"\n               formControlName=\"title\"\n               required\n               autocomplete=\"off\"\n               [errorStateMatcher]=\"matcher\">\n        \n        <mat-error *ngIf=\"bookForm.get('title').hasError('required') && submited\"\n                   class=\"error\">\n          Oops, title is required!\n        </mat-error>\n      </mat-form-field>  \n\n      <div class=\"flex-line\"> \n        <div class=\"form-group\">\n          <mat-form-field class=\"select\" \n          *ngIf=\"(authors$ | async) as resultAuthors\">\n            <mat-label>Choose an Author</mat-label>\n  \n            <mat-select formControlName=\"author\"\n                        required\n                        [errorStateMatcher]=\"matcher\">\n              <mat-option [value]=\"author.id\"\n                          *ngFor=\"let author of resultAuthors\">\n              {{ author.firstName }} {{ author.lastName }}\n              </mat-option>\n            </mat-select>\n            \n            <mat-error *ngIf=\"bookForm.get('author').hasError('required') && submited\"\n                       class=\"error\">\n              Oops, Author is required!\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div class=\"form-group\">\n            <mat-form-field class=\"select\" \n                            *ngIf=\"(genres$ | async) as resultGenres\">\n    \n              <mat-label>Choose a genres</mat-label>\n              \n              <mat-select multiple formControlName=\"genres\"\n                          [errorStateMatcher]=\"matcher\">\n                <mat-option *ngFor=\"let genre of resultGenres\"\n                            [value]=\"genre\">\n                  {{ genre.name }}\n                </mat-option>\n              </mat-select>\n              \n              <mat-error *ngIf=\"bookForm.get('genres').hasError('required') && submited\"\n                         class=\"error\">\n                Oops, Genres is required!\n              </mat-error>\n            </mat-form-field>            \n        </div>\n      </div>\n\n      <div class=\"flex-line\">\n        <div class=\"form-group\">\n          <mat-form-field (click)=\"writingPicker.open()\">\n            <mat-label>Writing date</mat-label>\n            \n            <input matInput\n                   autocomplete=\"off\"\n                   required \n                   [matDatepicker]=\"writingPicker\" \n                   placeholder=\"Enter a writing date\"\n                   formControlName=\"writingDate\"\n                   [errorStateMatcher]=\"matcher\">\n            \n            <mat-datepicker-toggle matSuffix [for]=\"writingPicker\"></mat-datepicker-toggle>\n            \n            <mat-datepicker disabled=\"false\" #writingPicker></mat-datepicker>\n            \n            <mat-error *ngIf=\"bookForm.get('writingDate').hasError('required') && submited\"\n                       class=\"error\">\n              Oops, Writing date is required!\n            </mat-error>\n          </mat-form-field>          \n        </div>\n\n        <div class=\"form-group\">\n          <mat-form-field (click)=\"releasePicker.open()\">\n            <mat-label>Release date</mat-label>\n            <input class=\"unfocus\"\n                   autocomplete=\"off\" \n                   matInput\n                   required\n                   [matDatepicker]=\"releasePicker\" \n                   placeholder=\"Enter a release date\"\n                   formControlName=\"releaseDate\"\n                   [errorStateMatcher]=\"matcher\">\n            <mat-datepicker-toggle matSuffix [for]=\"releasePicker\"></mat-datepicker-toggle>\n            <mat-datepicker disabled=\"false\" #releasePicker></mat-datepicker>\n            \n            <mat-error *ngIf=\"bookForm.get('releaseDate').hasError('required') && submited\"\n                       class=\"error\">\n              Oops, Release date is required!\n            </mat-error>\n            <mat-error *ngIf=\"bookForm.get('releaseDate').hasError('invalidDate') && submited\"\n                       class=\"error\">\n              Release date should be later than Writing date\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p class=\"description\">\n    <mat-form-field>\n      <mat-label>Description</mat-label>\n      <textarea matInput\n                placeholder=\"Enter a title\"\n                formControlName=\"description\"\n                required\n                rows=\"8\"\n                [errorStateMatcher]=\"matcher\"\n      ></textarea>\n      <mat-error *ngIf=\"bookForm.get('description').hasError('required') && submited\"\n                 class=\"error\">\n        Oops, Description is required!\n      </mat-error>\n    </mat-form-field>  \n  </p>\n\n  <div class=\"flex-line\">\n    <div class=\"price\">\n      <mat-form-field>\n        <mat-label>Price</mat-label>\n        <input matInput\n               required\n               autocomplete=\"off\"\n               type=\"number\"\n               placeholder=\"Enter a price\"\n               formControlName=\"price\"\n               [errorStateMatcher]=\"matcher\">\n        <mat-error *ngIf=\"bookForm.get('price').hasError('required') && submited\"\n                   class=\"error\">\n          Oops, Price  is required!\n        </mat-error>             \n      </mat-form-field>\n    </div>\n\n    <button type=\"submit\" mat-flat-button\n            color=\"primary\"\n            [disabled]=\"!edited && bookForm.valid\">\n      Save\n    </button>    \n  </div>\n</form>\n"
        },
        {
            "name": "BookFilterContainer",
            "id": "component-BookFilterContainer-f9e4d345f97d9f69107ea70dc7cff423",
            "file": "src/app/books/containers/book-filter/book-filter.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-book-filter",
            "styleUrls": [
                "./book-filter.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./book-filter.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_prevParams",
                    "type": "IFilterParam",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "authors$",
                    "type": "Observable<Author[]>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "disabled",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "filterForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "genres$",
                    "type": "Observable<Genre[]>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "openedFilters",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "prevMatrixChanges",
                    "defaultValue": "DEFAULT_MATRIX_OF_CHANGES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_initForm",
                    "args": [
                        {
                            "name": "params",
                            "type": "IFilterParam"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "IFilterParam",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setNullParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_setValueChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "clearFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getAuthors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getGenres",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "toggleFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\nimport { Subject, Observable } from 'rxjs';\nimport { takeUntil, debounceTime } from 'rxjs/operators';\n\nimport { HelperService } from '../../../core/services/helper.service';\nimport { AuthorsService } from '../../../core/services/authors.service';\nimport { GenresService } from '../../../core/services/genres.service';\nimport { ParamsService } from '../../services/params.service';\nimport { Author } from '../../../authors/models/author.model';\nimport { Genre } from '../../../genres/models/genre.model';\nimport { IFilterParam } from '../../models/filter-param.interface';\n\nconst DEFAULT: IFilterParam = {\n  searchText: null,\n  genreNames: null,\n  authorIds: null\n};\n\nconst DEFAULT_MATRIX_OF_CHANGES = [true];\n\n@Component({\n  selector: 'app-book-filter',\n  templateUrl: './book-filter.container.html',\n  styleUrls: ['./book-filter.container.sass']\n})\nexport class BookFilterContainer implements OnInit, OnDestroy {\n\n  public disabled = true;\n  public openedFilters = false;\n\n  public prevMatrixChanges = DEFAULT_MATRIX_OF_CHANGES;\n  public filterForm: FormGroup;\n\n  public authors$: Observable<Author[]>;\n  public genres$: Observable<Genre[]>;\n\n  private _destroy$ = new Subject<void>();\n  private _prevParams: IFilterParam;\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly authorsService: AuthorsService,\n    private readonly genresService: GenresService,\n    private readonly qParams: ParamsService,\n    private readonly helper: HelperService\n  ) {\n    this._getParams();\n  }\n\n  public ngOnInit(): void {\n    this.getGenres();\n    this.getAuthors();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public getGenres(): void {\n    this.genres$ = this.genresService\n      .getAllGenres();\n  }\n\n  public getAuthors(): void {\n    this.authors$ = this.authorsService\n      .getAllAuthors();\n  }\n\n  public clearFilter(): void {\n    this.disabled = true;\n    this.qParams.setNewParams(DEFAULT);\n    this._setNullParams();\n  }\n\n  public toggleFilters(): void {\n    this.openedFilters = !this.openedFilters;\n  }\n\n  private _setValueChanges(): void {\n    this.filterForm.valueChanges\n      .pipe(\n        debounceTime(1000),\n        takeUntil(this._destroy$)\n      )\n      .subscribe((res: IFilterParam) => {\n        this.disabled = false;\n\n        const isMatch = this.helper.isMatchWith(res, this._prevParams);\n        this._prevParams = res;\n\n        if (!isMatch) {\n          this.qParams.setNewParams(res);\n          this.qParams.setNewParams({ page: 1 });\n        }\n      });\n  }\n\n  private _getParams(): void {\n    this.qParams.getParams$()\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(\n        (res) => {\n          this._initForm(res);\n          this._setNullParams();\n          Object.assign(this._prevParams, res);\n          delete this._prevParams.page;\n          this.disabled = false;\n        }\n      );\n  }\n\n\n  private _initForm(params: IFilterParam): void {\n    this.filterForm = this.fb.group({\n      searchText: [params.searchText],\n      authorIds: [params.authorIds],\n      genreNames: [params.genreNames]\n    });\n\n    this._setValueChanges();\n  }\n\n  private _setNullParams(): void {\n    this._prevParams = {\n      searchText: null,\n      genreNames: null,\n      authorIds: null\n    };\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.flex \n  width: 100%\n  height: 50px\n  display: flex\n  justify-content: space-between\n\n  @include tablet\n    height: auto\n    flex-direction: column\n    display: none\n\n  @include mobile\n    height: auto\n    flex-direction: column\n    display: none\n\n  &.opened\n    @include tablet\n      display: flex \n    \n    @include mobile\n      display: flex \n\n  .inputs-cont\n    display: flex\n    justify-content: space-between\n    width: 800px\n\n    @include tablet\n      height: 300px\n      flex-direction: column\n      width: 100%\n    \n    @include mobile\n      height: 300px\n      flex-direction: column\n      width: 100%\n\n.filter\n  width: 100%\n  height: 50px\n  display: none\n  margin-top: 25px\n  \n  @include tablet\n    display: block\n\n  @include mobile\n    display: block\n\n.clear\n  width: 100px\n  height: 60px\n  margin-top: 4px\n\n  @include tablet\n    width: 100%\n    height: 50px\n  \n  @include mobile\n    width: 100%\n    height: 50px\n\n.select \n  width: 180px\n\n  @include tablet\n    width: 100%\n\n  @include mobile\n    width: 100%\n\n.input\n  width: 420px\n\n  @include tablet\n    width: 100%\n\n  @include mobile\n    width: 100%\n",
                    "styleUrl": "./book-filter.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "authorsService",
                        "type": "AuthorsService"
                    },
                    {
                        "name": "genresService",
                        "type": "GenresService"
                    },
                    {
                        "name": "qParams",
                        "type": "ParamsService"
                    },
                    {
                        "name": "helper",
                        "type": "HelperService"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authorsService",
                        "type": "AuthorsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "genresService",
                        "type": "GenresService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "qParams",
                        "type": "ParamsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "helper",
                        "type": "HelperService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"flex\"\n  [ngClass]=\"[openedFilters ? 'opened':'']\">\n  <form class=\"inputs-cont\" [formGroup]=\"filterForm\">\n    <mat-form-field class=\"input\">\n      <mat-label>Enter Search value</mat-label>\n      <input type=\"text\" \n             autocomplete=\"off\"\n             matInput\n             placeholder=\"Enter search value\"\n             formControlName=\"searchText\">\n    </mat-form-field>\n  \n    <mat-form-field class=\"select\">\n      <mat-label>Choose an Author</mat-label>\n  \n      <mat-select formControlName=\"authorIds\"\n                  multiple>\n        <mat-option [value]=\"author.id\"\n                    *ngFor=\"let author of authors$ | async\">\n          {{ author.firstName }} {{ author.lastName }}\n        </mat-option>\n      </mat-select>\n      \n    </mat-form-field>\n  \n    <mat-form-field class=\"select\">\n      <mat-label>Choose a genre</mat-label>\n      <mat-select formControlName=\"genreNames\"\n                  multiple>\n        <mat-option *ngFor=\"let genre of genres$ | async\"\n                    [value]=\"genre.name\">\n          {{ genre.name }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n  </form>\n\n  <button class=\"clear\" \n          mat-flat-button\n          (click)=\"clearFilter()\"\n          [disabled]=\"disabled\">\n          Clear\n  </button>\n</div>\n\n<button class=\"filter\"\n        mat-flat-button\n        (click)=\"toggleFilters()\"\n        color=\"primary\">\n  Filter\n</button>\n"
        },
        {
            "name": "BookShowComponent",
            "id": "component-BookShowComponent-ffee803c9a4c7dda2fcaed94e6b1c536",
            "file": "src/app/book/components/book-show/book-show.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "book-show",
            "styleUrls": [
                "./book-show.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./book-show.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "book",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "imageSrc",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showGenreBook",
                    "args": [
                        {
                            "name": "genre",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "genre",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Book } from '../../../books/models/book.model';\nimport { environment } from '../../../../environments/environment';\n\n@Component({\n  selector: 'book-show',\n  templateUrl: './book-show.component.html',\n  styleUrls: ['./book-show.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BookShowComponent implements OnInit {\n\n  public book: Book;\n  public imageSrc: string;\n\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly router: Router\n  ) { }\n\n  public ngOnInit(): void {\n    this.book = this.route.snapshot.parent.data.book;\n\n    if (this.book.image) {\n      this.imageSrc = environment.hosts.imgHost + this.book.image;\n    }\n  }\n\n  public showGenreBook(genre: string[]): void {\n    const queryParams = {\n      genreNames: genre,\n      page: 1\n    };\n\n    this.router\n      .navigate(['/books'], { queryParams });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.header-line\n  width: 100%\n  position: relative\n  display: flex\n\n  @include tablet\n    flex-direction: column\n\n  @include mobile\n    flex-direction: column\n\n  .img\n      height: 200px\n      width: 400px\n      background-color: #9ccfff\n      background-size: cover\n      background-position: center\n\n      @include tablet\n        width: 100%\n        height: 300px\n\n      @include mobile\n        width: 100%\n        height: 200px\n\n  .info\n    width: calc(100% - 250px)\n    height: 200px\n    margin-left: 50px\n\n    @include tablet\n      width: 100%\n      margin-left: 0px\n      height: auto\n    \n    @include mobile\n      width: 100%\n      margin-left: 0px\n      height: auto\n\n    span\n      font-weight: 500\n\n.text\n  line-height: 29px\n    font-size: 16px\n\n.price\n  font-size: 28px\n  font-weight: 900\n  float: right\n\nmat-chip-list\n  margin-top: 20px\n\n  mat-chip\n    user-select: none\n    cursor: pointer\n",
                    "styleUrl": "./book-show.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header-line\">\n  <div  *ngIf=\"imageSrc; else elseBlock\" \n        class=\"img\" \n        [ngStyle]=\"{'background-image': 'url(' + imageSrc + ')'}\">\n  </div>\n\n  <ng-template #elseBlock>\n    <div class=\"img\"></div>\n  </ng-template>\n\n  <div class=\"info\">\n    <h1>{{book.title}}</h1>\n    <p class=\"info-block\">\n      <span>Author: </span> {{ book.authorId }}\n    </p>\n    <p class=\"info-block\">\n      <span>Writing date: </span> {{ book.writingDate | localizedDate }}\n    </p>\n    <p class=\"info-block\">\n      <span>Release date: </span> {{ book.releaseDate | localizedDate }}\n    </p>\n  </div>\n</div>\n\n<p>\n  <mat-chip-list aria-label=\"Fish selection\">\n    <mat-chip color=\"primary\" \n              selected\n              *ngFor=\"let genre of book.genres\"\n              (click)=\"showGenreBook([genre.name])\">\n      {{ genre.name }}\n    </mat-chip>\n  </mat-chip-list>\n</p>\n\n<p class=\"text\">\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{ book.description }}\n</p>\n\n<div class=\"price\">\n  {{ book.price | currency : 'USD' : 'symbol' : '1.0-0' }}\n</div>\n"
        },
        {
            "name": "BooksListContainer",
            "id": "component-BooksListContainer-85d862a96da75c2da52b2fe5a72dd0fa",
            "file": "src/app/books/containers/books-list/books-list.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-books-list",
            "styleUrls": [
                "./books-list.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./books-list.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "books",
                    "defaultValue": "[]",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "countPages",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "countRecords",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loaded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageSize",
                    "defaultValue": "12",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedAuthors",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedGenres",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "shadowBooks",
                    "defaultValue": "new Array(12)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_listenParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getBooks",
                    "args": [
                        {
                            "name": "params",
                            "type": "IFilterParam"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "IFilterParam",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPageEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPageEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectGenre",
                    "args": [
                        {
                            "name": "genreNames",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "genreNames",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil, delay } from 'rxjs/operators';\n\nimport { BooksService } from '../../services/books.service';\nimport { Book } from '../../models/book.model';\nimport { ParamsService } from '../../services/params.service';\nimport { IFilterParam } from '../../models/filter-param.interface';\n\ninterface IPageEvent {\n  length: number;\n  pageIndex: number;\n  pageSize: number;\n  previousPageIndex: number;\n}\n\n@Component({\n  selector: 'app-books-list',\n  templateUrl: './books-list.container.html',\n  styleUrls: ['./books-list.container.sass']\n})\nexport class BooksListContainer implements OnInit, OnDestroy {\n\n  public books: Book[] = [];\n  public shadowBooks = new Array(12);\n\n  public searchText: string;\n\n  public selectedAuthors: number[];\n  public selectedGenres: string[];\n\n  public pageSize = 12;\n  public pageIndex = 0;\n  public countPages = 1;\n  public countRecords = 0;\n  public loaded = false;\n\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly booksService: BooksService,\n    private readonly qParams: ParamsService,\n  ) {}\n\n  public ngOnInit(): void {\n    this._listenParams();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public getBooks(\n    params: IFilterParam\n  ): void {\n    this.loaded = false;\n    this.booksService.getBooks(params)\n      .pipe(\n        delay(700),\n        takeUntil(this._destroy$)\n      )\n      .subscribe(\n        (res) => {\n          this.loaded = true;\n          this.books = res.books;\n          this.countRecords = res.meta.records;\n          this.countPages = res.meta.pages;\n        }\n      );\n  }\n\n  public selectGenre(genreNames: string[]): void {\n    this.qParams.setNewParams({ genreNames });\n  }\n\n  public pageEvent(event: IPageEvent): void {\n    this.pageIndex = event.pageIndex;\n    this.books = [];\n\n    this.qParams.setNewParams({\n      page: this.pageIndex + 1\n    });\n\n    const el = document.getElementsByClassName('grid')[0];\n    el.scrollIntoView();\n  }\n\n\n  private _listenParams(): void {\n    this.qParams.getParams$()\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(res => this.getBooks(res));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n$base-color: #ddd\n$shine-color: #e8e8e8\n$animation-duration: 1.6s\n$grey: #bdbbbb\n\napp-book\n  margin-left: 30px\n\n  @include mobile\n    margin-left: 0px\n\n  &:nth-child(3n+1)\n    margin-left: 0px\n    \n    @include tablet\n      margin-left: 30px\n    \n    @include mobile\n      margin-left: 0px\n\n  &:nth-child(2n+1)\n\n    @include tablet\n      margin-left: 0px\n    \n    @include mobile\n      margin-left: 0px\n\nmat-paginator\n  width: 100%\n  margin-top: 25px\n\n.container\n  width: 100%\n  display: flex\n  flex-wrap: wrap\n  margin-bottom: 50px\n\n@keyframes hiding\n  0%\n    opacity: 1\n  100%\n    opacity: 0\n\n.shadow-book\n  margin-top: 30px\n  margin-left: 30px\n  position: relative\n  background: #ececec\n  width: 300px\n  height: 375px\n  clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 100% 0%)\n  opacity: 1\n  animation: hiding 1.5s linear\n  \n  @include tablet\n    width: 275px\n\n  @include mobile\n    width: 275px\n    margin-left: 0px\n\n  .gradient\n    background-image: linear-gradient(90deg, $base-color 0px, $shine-color 40px, $base-color 80px) \n    height: 130%\n    width: 140%\n    transform: rotate(15deg) translate(-20%, -10%)\n    animation: loading $animation-duration infinite linear\n\n  .pad-cont\n    padding: 15px 15px 0px 15px\n\n  .img\n    height: 170px\n    width: 270px\n    transition: 0.6s\n    box-sizing: border-box\n    margin-bottom: 10px\n    background: $grey\n\n    @include tablet\n      width: 245px\n\n    @include mobile\n      width: 245px\n\n  .title\n    height: 25px\n    width: 100%\n    background: $grey\n\n  .text\n    margin-top: 10px\n    height: 50px\n    width: 100%\n    background: $grey\n\n  .price\n    margin-top: 10px\n    width: 75px\n    height: 25px\n    background: $grey\n    float: right\n\n  .genres\n    width: 100%\n    display: flex\n\n    .genre\n      margin-top: 20px\n      height: 25px\n      width: 110px\n      background: $grey\n      margin-left: 15px\n\n  &:nth-child(3n+1)\n    margin-left: 0px\n\n    @include tablet\n      margin-left: 30px\n\n    @include mobile\n      margin-left: 0px\n\n  &:nth-child(2n+1)\n\n    @include tablet\n      margin-left: 0px\n\n    @include mobile\n      margin-left: 0px\n\n@keyframes loading\n  0%\n    background-position: 0px\n  100%\n    background-position: 300px\n    \n    \n.not-found\n  margin-top: 40px\n  box-sizing: border-box\n  height: 200px\n  width: 100%\n  background: #ececec\n  display: flex\n  justify-content: center\n  align-items: center\n",
                    "styleUrl": "./books-list.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "booksService",
                        "type": "BooksService"
                    },
                    {
                        "name": "qParams",
                        "type": "ParamsService"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "booksService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "qParams",
                        "type": "ParamsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-book-filter></app-book-filter>\n\n<div class=\"not-found\" \n      *ngIf=\"!countRecords && loaded\">\n  Not found\n</div>\n\n<ng-container *ngIf=\"loaded ; else elseBlock\">\n  <div class=\"container\">\n    <app-book *ngFor=\"let book of books\"\n              [book]=\"book\"\n              (genreFilter)=\"selectGenre($event)\">\n    </app-book>    \n  </div>  \n</ng-container>\n\n<mat-paginator [length]=\"countRecords\"\n               [pageSize]=\"pageSize\"\n               [pageIndex]=\"pageIndex\"\n               (page)=\"pageEvent($event)\">\n</mat-paginator>\n\n<ng-template #elseBlock>\n  <div class=\"container\">\n    <div  class=\"shadow-book\"\n          *ngFor=\"let book of shadowBooks\">\n      <div class=\"pad-cont\">\n        <div class=\"img\"></div>\n\n        <div class=\"title\"></div>\n\n        <div class=\"text\"></div>\n\n        <div class=\"price\"></div>\n      </div>\n      <div class=\"genres\">\n        <div class=\"genre\"></div>\n\n        <div class=\"genre\"></div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "BooksView",
            "id": "component-BooksView-78d6d28cc5b33826a875e1babd350470",
            "file": "src/app/books/views/books/books.view.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-books",
            "styleUrls": [
                "./books.view.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./books.view.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "openCreateModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport {\n  BookCreateContainer\n} from '../../containers/book-create/book-create.container';\n\n@Component({\n  selector: 'app-books',\n  templateUrl: './books.view.html',\n  styleUrls: ['./books.view.sass']\n})\nexport class BooksView implements OnInit, OnDestroy {\n\n  constructor (private readonly dialog: MatDialog) { }\n\n  public ngOnInit(): void {\n    // this.openCreateModal();\n  }\n\n  public ngOnDestroy(): void { }\n\n  public openCreateModal(): void {\n    this.dialog.open(BookCreateContainer);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.line\n  display: flex\n  justify-content: space-between\n  align-items: center\n\n  @include mobile\n    flex-direction: column\n  \n  .create\n    height: 50px\n    width: 200px\n    \n    @include mobile\n      width: 100%\n",
                    "styleUrl": "./books.view.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"header\"></div>\n\n<div class=\"grid-short\">\n  <div class=\"line\">\n    <h1>Books</h1>\n    <button class=\"create\"\n            mat-raised-button\n            (click)=\"openCreateModal()\">\n      Create book\n    </button>\n  </div>\n\n  <app-books-list></app-books-list>\n</div>\n"
        },
        {
            "name": "BookView",
            "id": "component-BookView-6aff7a4a9ce57c73e42c8e607a223c27",
            "file": "src/app/book/views/book/book.view.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "book-view",
            "styleUrls": [
                "./book.view.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./book.view.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "book",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { BooksService } from '../../../books/services/books.service';\nimport { BookDeleteComponent } from '../../components/book-delete/book-delete.component';\nimport { Book } from '../../../books/models/book.model';\n\n@Component({\n  selector: 'book-view',\n  templateUrl: './book.view.html',\n  styleUrls: ['./book.view.sass']\n})\nexport class BookView implements OnInit, OnDestroy {\n\n  public book: Book;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly bookService: BooksService,\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly dialog: MatDialog,\n    private readonly translate: TranslateService\n  ) {\n    translate.setDefaultLang('en');\n    translate.use('en');\n  }\n\n  public ngOnInit(): void {\n    this.book = this.route.snapshot.data.book;\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public delete(): void {\n    const dialogRef = this.dialog.open(BookDeleteComponent);\n\n    dialogRef.afterClosed()\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(res => res ? this._delete() : null);\n  }\n\n  private _delete(): void {\n    this.bookService.deleteBook(this.book.id)\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(res => this.router.navigate(['/books']));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.actions\n  width: 275px\n  height: 40px\n  right: 0px\n  position: absolute\n  display: flex\n  justify-content: space-between\n\n  button\n    width: 125px\n\n    &.active\n      display: none\n\n.content\n  top: 50px\n  position: relative\n",
                    "styleUrl": "./book.view.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "bookService",
                        "type": "BooksService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "bookService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"header\"></div>\n\n<div class=\"grid\">\n  <div class=\"actions\">\n    <button mat-flat-button \n            color=\"primary\"\n            [routerLink]=\"['details']\"\n            routerLinkActive=\"active\">\n      Details\n    </button>\n\n    <button mat-flat-button \n            color=\"primary\"\n            [routerLink]=\"['edit']\"\n            routerLinkActive=\"active\">\n      Edit\n    </button>\n\n    <button mat-flat-button \n            color=\"primary\"\n            (click)=\"delete()\">\n      Delete\n    </button>\n  </div>\n  <div class=\"content\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-26ac2fab14d5b1c065f6d4a763c6e283",
            "file": "src/app/core/components/dialog/dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog",
            "styleUrls": [
                "./dialog.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "IDialogBody",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<DialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "Object",
                    "defaultValue": "Object",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Inject\n} from '@angular/core';\n\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\nimport { IDialogBody } from '../../models/dialog-body.interface';\n\n@Component({\n  selector: 'app-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DialogComponent implements OnInit {\n\n  public Object = Object;\n\n  constructor(\n    public dialogRef: MatDialogRef<DialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: IDialogBody,\n  ) { }\n\n  public ngOnInit(): void {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "span\n  font-weight: 800\n",
                    "styleUrl": "./dialog.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DialogComponent>"
                    },
                    {
                        "name": "data",
                        "type": "IDialogBody"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "IDialogBody",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 mat-dialog-title\n     *ngIf=\"data.type !== 'error-array'; else elseBlock\">\n  {{ data.message }}\n</h2>\n\n<ng-template #elseBlock>\n  <span>Errors:</span>\n    <div *ngFor=\"let key of Object.keys(data.payload.errors)\"> \n      {{ key }} {{  data.payload.errors[key] }} \n    </div>\n</ng-template>\n\n<mat-dialog-actions align=\"end\">\n  <button mat-button \n          [mat-dialog-close]=\"true\" \n          cdkFocusInitial>\n    {{ data.type === 'multiple' ? 'Yes' : 'Ok' }}\n  </button>\n\n  <button mat-button \n          [mat-dialog-close]=\"false\"\n          *ngIf=\"data.type === 'multiple'\">\n    No\n  </button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "ExplainBlockComponent",
            "id": "component-ExplainBlockComponent-ff291e998cdc881c3b4a7aa725efbafe",
            "file": "src/app/home/components/explain-block/explain-block.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-explain-block",
            "styleUrls": [
                "./explain-block.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./explain-block.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-explain-block',\n  templateUrl: './explain-block.component.html',\n  styleUrls: ['./explain-block.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ExplainBlockComponent implements OnInit {\n\n  constructor() { }\n\n  public ngOnInit(): void { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\n.main-cont\n  position: relative\n  width: 100%\n  height: 100%\n  min-height: 920px\n\n  @include desk\n    min-height: 600px\n\n  @include tablet\n    height: 90%\n\n  .bubble\n    position: absolute\n    right: 0px\n\n    img\n      position: relative\n      height: 100%\n      width: 100%\n\n    @include mobile\n      top: -50px\n\n    @include tablet\n      width: 350px\n      top: 25px\n\n    @include desk\n      width: 350px\n\n  .info-block\n    position: absolute\n    width: 850px\n    height: 445px\n    top: 200px\n    left: 175px\n\n    @include mobile\n      margin: 0px auto\n      position: relative\n      width: 320px\n      top: 0px\n      left: 0px\n      height: 600px\n\n    @include tablet\n      margin: 0px auto\n      position: relative\n      width: 500px\n      top: 0px\n      left: 0px\n      height: 500px\n\n    @include desk\n      width: 630px\n      height: 400px\n      top: 100px\n      left: 85px\n\n    .title\n      width: 610px\n      font-size: 86px\n      font-weight: 700\n\n      @include mobile\n        width: 320px\n        font-size: 45px\n      \n      @include tablet\n        width: 600px\n        font-size: 45px\n\n      @include desk\n        font-size: 68px\n        width: 500px\n    \n    .button-line\n      margin-top: 75px\n      width: 100%\n      height: 80px\n      display: flex\n      justify-content: space-between\n      align-items: center\n      \n      @include mobile\n        flex-direction: column\n        height: 170px\n        width: 320px\n        margin-top: 400px\n\n      @include tablet\n        flex-direction: column\n        height: 210px\n        width: 320px\n        margin: 0px auto\n        margin-top: 200px\n\n      @include desk\n        height: 50px\n\n      span\n        font-size: 22px\n        color: $black\n\n      button\n        width: 370px\n        height: 80px\n        font-size: 22px\n\n        @include mobile\n          width: 320px\n          height: 60px\n          font-size: 18px\n\n        @include desk\n          height: 50px\n          width: 270px\n          font-size: 16px\n",
                    "styleUrl": "./explain-block.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-cont\">\n  <div class=\"bubble\">\n    <img src=\"../../../../assets/images/bubbles.png\">\n  </div>\n\n  <div class=\"info-block\">\n    <div class=\"title\">\n      Best Mobile Application For Reading\n    </div>\n\n    <div class=\"button-line\">\n      <button mat-flat-button \n              class=\"blue my-butt\"\n              [routerLink]=\"['/auth/sign-up']\">\n        Create a free Account\n      </button>\n\n      <span>or</span>\n\n      <button mat-flat-button class=\"white my-butt\">\n        <div class=\"icon\"></div>\n        Download an App\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "FirstStepContainer",
            "id": "component-FirstStepContainer-c4b81a2ad4967215c3e5724da5cda0f4",
            "file": "src/app/account-info-form/containers/first-step/first-step.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-first-step",
            "styleUrls": [
                "./../account-info-form/account-info-form.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./first-step.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formGroup",
                    "line": 31,
                    "type": "FormGroup"
                },
                {
                    "name": "steps",
                    "line": 26,
                    "type": "IStep[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "countries",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "filteredCountries$",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "firstMatcher",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filter",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_getCoutries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_setListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport {\n  FormGroup,\n} from '@angular/forms';\n\nimport { Observable, Subject } from 'rxjs';\nimport { map, startWith, takeUntil, debounceTime } from 'rxjs/operators';\n\nimport { environment } from '../../../../environments/environment';\nimport { IStep } from '../../../core/models/step.interface';\nimport {\n  StepErrorStateMatcher\n} from '../../../core/matchers/step-error-state.matcher';\n\nconst COUNTRIES_URL = 'https://restcountries.eu/rest/v2/all';\n\n@Component({\n  selector: 'app-first-step',\n  templateUrl: './first-step.container.html',\n  styleUrls: ['./../account-info-form/account-info-form.container.sass']\n})\nexport class FirstStepContainer implements OnInit, OnDestroy {\n  public filteredCountries$: Observable<string[]>;\n\n  @Input('steps')\n  public steps: IStep[];\n\n  public firstMatcher;\n\n  @Input('formGroup')\n  public formGroup: FormGroup;\n  public countries = [];\n\n  private _destroy$ = new Subject();\n\n  constructor() { }\n\n  public ngOnInit(): void {\n    this.firstMatcher = new StepErrorStateMatcher(this.steps[0]);\n\n    this._getCoutries();\n    this._setListeners();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  private _getCoutries(): void {\n    fetch(COUNTRIES_URL)\n      .then((res) => res.json())\n      .then((data) => this.countries = data);\n  }\n\n  private _setListeners(): void {\n    this.filteredCountries$ = this.formGroup.controls.country .valueChanges\n      .pipe(\n        debounceTime(600),\n        startWith(''),\n        map(value => this._filter(value)),\n        takeUntil(this._destroy$)\n      );\n  }\n\n  private _filter(value: any): string[] {\n    const filterValue = value.toLowerCase();\n    // console.log(this.countries);\n    return this.countries\n      .filter((country) => country.name.toLowerCase().includes(filterValue));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\nh1\n  @include mobile\n    font-size: 25px\n\n.title-line\n  font-weight: 700\n  font-size: 20px\n  display: flex\n  justify-content: space-between\n  align-items: center\n  background: #ececec\n\n  @include mobile\n    font-size: 14px\n\n.steps\n  width: 100%\n  height: 50px\n  display: flex\n\n  @include tablet\n    height: 40px\n\n  @include mobile\n    flex-direction: column\n    height: 120px\n  \n  .step\n    width: 34%\n    background: #ececec\n    height: 50px\n    display: flex\n    justify-content: center\n    align-items: center\n    cursor: pointer\n    font-size: 18px\n    transition: 0.4s\n    user-select: none\n\n    @include tablet\n      font-size: 14px\n\n    @include mobile\n      font-size: 13px\n      width: 100%\n      height: 40px\n\n    &:hover\n      background: rgba(73, 77, 213, 0.4)\n      color: white\n\n    &.active\n      background: $blue\n      color: white\n\n.wrapper\n  width: 100%\n  height: auto\n  position: relative\n\n.form-container\n  width: 100%\n  height: auto\n  background: white\n  box-shadow: $shadow\n  margin-top: 25px\n  padding: 15px 25px 15px 25px\n  box-sizing: border-box\n  position: relative\n\n  @include mobile\n    margin-top: 20px\n    margin-bottom: 20px\n    padding: 5px 15px 5px 15px\n\n\n\n.action-line\n  width: 100%\n  height: 170px\n  margin-top: 20px\n\n.add-button\n  height: 40px\n  width: 150px\n  margin-top: 20px\n\n  @include mobile\n    width: 100%\n\n.line\n  width: 100%\n  height: 60px\n  // background: #ececec\n  margin-top: 20px\n  display: flex\n  justify-content: space-between\n\n  @include mobile\n    flex-direction: column\n    height: auto\n\n.half\n  width: 48%\n  position: relative\n\n  @include mobile\n    width: 100%\n\n.third\n  width: 31%\n\n  @include mobile\n    width: 100%\n\n.sm\n  width: 15%\n\n  @include mobile\n    width: 100%\n\nmat-form-field\n  width: 100%\n",
                    "styleUrl": "./../account-info-form/account-info-form.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 34
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"wrapper\"\n     [formGroup]=\"formGroup\">\n  <h1>{{ steps[0].label }}</h1>\n\n  <div class=\"line\">\n    <div class=\"half\">\n      <mat-form-field>\n        <mat-label>First name</mat-label>\n        <input matInput\n                placeholder=\"Enter a First name\"\n                formControlName=\"firstName\"\n                required\n                autocomplete=\"off\"\n                [errorStateMatcher]=\"firstMatcher\">\n      \n        <mat-error *ngIf=\"formGroup.get('firstName').hasError('required') && steps[0].submitted\"\n            class=\"error\">\n          Oops, First Name is required!\n        </mat-error>\n      </mat-form-field> \n    </div>\n    <div class=\"half\">\n      <mat-form-field>\n        <mat-label>Last name</mat-label>\n        <input matInput\n                placeholder=\"Enter a Last name\"\n                formControlName=\"lastName\"\n                required\n                autocomplete=\"off\"\n                [errorStateMatcher]=\"firstMatcher\">\n        <mat-error *ngIf=\"formGroup.get('lastName').hasError('required') && steps[0].submitted\"\n                    class=\"error\">\n          Oops, Last Name is required!\n        </mat-error>\n      </mat-form-field>  \n    </div>\n  </div>\n\n  <div class=\"line\">\n    <div class=\"third\">\n      <mat-form-field>\n        <mat-label>Country</mat-label>\n        <input matInput\n                placeholder=\"Enter a Country\"\n                formControlName=\"country\"\n                required\n                autocomplete=\"off\"\n                [errorStateMatcher]=\"firstMatcher\"\n                [matAutocomplete]=\"auto\">\n\n        <mat-autocomplete #auto=\"matAutocomplete\">\n          <mat-option *ngFor=\"let country of filteredCountries$ | async\" [value]=\"country.name\">\n            {{ country.name }}\n          </mat-option>\n        </mat-autocomplete>\n\n        <mat-error *ngIf=\"formGroup.get('country').hasError('required') && steps[0].submitted\"\n                    class=\"error\">\n          Oops, Country is required!\n        </mat-error>\n      </mat-form-field>  \n    </div>\n    <div class=\"third\">\n      <mat-form-field>\n        <mat-label>City</mat-label>\n        <input matInput\n                placeholder=\"Enter a City\"\n                formControlName=\"city\"\n                required\n                autocomplete=\"off\"\n                [errorStateMatcher]=\"firstMatcher\">\n        <mat-error *ngIf=\"formGroup.get('city').hasError('required') && steps[0].submitted\"\n                    class=\"error\">\n          Oops, City is required!\n        </mat-error>\n      </mat-form-field>  \n    </div>\n\n    <div class=\"third\">\n      <mat-form-field>\n        <mat-label>Street</mat-label>\n        <input matInput\n                placeholder=\"Enter a Street\"\n                formControlName=\"street\"\n                required\n                autocomplete=\"off\"\n                [errorStateMatcher]=\"firstMatcher\">\n        <mat-error *ngIf=\"formGroup.get('street').hasError('required') && steps[0].submitted\"\n                    class=\"error\">\n          Oops, Street is required!\n        </mat-error>\n      </mat-form-field>  \n    </div>\n  </div>\n\n  <div class=\"line\">\n    <div class=\"sm\">\n      <mat-form-field>\n        <mat-label>Home</mat-label>\n        <input matInput\n                placeholder=\"Enter a Home\"\n                formControlName=\"home\"\n                required\n                autocomplete=\"off\"\n                [errorStateMatcher]=\"firstMatcher\">\n        <mat-error *ngIf=\"formGroup.get('home').hasError('required') && steps[0].submitted\"\n                  class=\"error\">\n          Oops, Home is required!\n        </mat-error>\n      </mat-form-field>  \n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-f709061beedebf43cffb46eac9f430f3",
            "file": "src/app/home/components/footer/footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  public ngOnInit(): void { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\n$icon-size: 30px\n\n.footer\n  width: 100%\n  height: 50px\n  margin-top: 150px\n  background: $blue\n  display: flex\n  justify-content: center \n  align-items: center\n\n  .container\n    width: 1550px\n    height: $icon-size\n    position: relative\n    \n    @include mobile\n      width: 320px\n\n    @include tablet\n      width: 600px\n\n    @include desk\n      width: 1000px\n\n    .soclines\n      height: 100%\n      width: 150px\n      display: flex\n      justify-content: space-between\n\n      .icon\n        height: $icon-size\n        width: $icon-size\n        position: relative\n\n        img\n          height: 100%\n          width: 100%\n",
                    "styleUrl": "./footer.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"footer\">\n  <div class=\"container\">\n    <div class=\"soclines\">\n      <a class=\"icon\" href=\"https://instagram.com\" target=\"_blank\">\n        <img src=\"../../../../assets/icons/instagram.svg\">\n      </a>\n\n      <a class=\"icon\" href=\"https://facebook.com\" target=\"_blank\">\n        <img src=\"../../../../assets/icons/facebook.png\">\n      </a>\n\n      <a class=\"icon\" href=\"https://vk.com\" target=\"_blank\">\n        <img src=\"../../../../assets/icons/vk.png\">\n      </a>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "GenreBooksListContainer",
            "id": "component-GenreBooksListContainer-cfa08e90daa915e2167a1f2bfaea66a7",
            "file": "src/app/genre/containers/genre-books-list/genre-books-list.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-genre-books-list",
            "styleUrls": [
                "./genre-books-list.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./genre-books-list.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "genre",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "books",
                    "defaultValue": "[]",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "countPages",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "countRecords",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loaded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageSize",
                    "defaultValue": "12",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "shadowBooks",
                    "defaultValue": "new Array(12)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getBooks",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy } from '@angular/core';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil, delay } from 'rxjs/operators';\n\nimport { BooksService } from '../../../books/services/books.service';\nimport { Book } from '../../../books/models/book.model';\n\n@Component({\n  selector: 'app-genre-books-list',\n  templateUrl: './genre-books-list.container.html',\n  styleUrls: ['./genre-books-list.container.sass']\n})\nexport class GenreBooksListContainer implements OnInit, OnDestroy {\n\n  @Input('genre')\n  public genre: string;\n\n  public shadowBooks = new Array(12);\n  public pageSize = 12;\n  public pageIndex = 1;\n  public countPages = 1;\n  public countRecords = 0;\n  public loaded = false;\n  public books: Book[] = [];\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly booksService: BooksService,\n  ) { }\n\n  public ngOnInit(): void {\n    this._getBooks(this.pageIndex);\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public loadMore(): void {\n    this.pageIndex += 1;\n\n    this._getBooks(this.pageIndex);\n  }\n\n  private _getBooks(\n    page: number\n  ): void {\n    this.booksService.getGenreBooks(this.genre, page)\n      .pipe(\n        delay(700),\n        takeUntil(this._destroy$)\n      )\n      .subscribe((res) => {\n        this.loaded = true;\n\n        this.books = this.books.concat(res.books);\n        this.countRecords = res.meta.records;\n        this.countPages = res.meta.pages;\n      });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\napp-book\n  margin-left: 30px\n\n  @include mobile\n    margin-left: 0px\n\n  &:nth-child(3n+1)\n    margin-left: 0px\n    \n    @include tablet\n      margin-left: 30px\n    \n    @include mobile\n      margin-left: 0px\n\n  &:nth-child(2n+1)\n\n    @include tablet\n      margin-left: 0px\n    \n    @include mobile\n      margin-left: 0px\n\nmat-paginator\n  width: 100%\n  margin-top: 25px\n\n.container\n  width: 100%\n  display: flex\n  flex-wrap: wrap\n  margin-bottom: 50px\n\n@keyframes hiding\n  0%\n    opacity: 1\n  100%\n    opacity: 0\n\n.shadow-book\n  margin-top: 30px\n  margin-left: 30px\n  position: relative\n  background: #ececec\n  width: 300px\n  height: 375px\n  clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 100% 0%)\n  opacity: 1\n  animation: hiding 1.5s linear\n  \n  @include tablet\n    width: 275px\n\n  @include mobile\n    width: 275px\n    margin-left: 0px\n\n  .gradient\n    background-image: linear-gradient(90deg, $base-color 0px, $shine-color 40px, $base-color 80px) \n    height: 130%\n    width: 140%\n    transform: rotate(15deg) translate(-20%, -10%)\n    animation: loading $animation-duration infinite linear\n\n  .pad-cont\n    padding: 15px 15px 0px 15px\n\n  .img\n    height: 170px\n    width: 270px\n    transition: 0.6s\n    box-sizing: border-box\n    margin-bottom: 10px\n    background: $grey\n\n    @include tablet\n      width: 245px\n\n    @include mobile\n      width: 245px\n\n  .title\n    height: 25px\n    width: 100%\n    background: $grey\n\n  .text\n    margin-top: 10px\n    height: 50px\n    width: 100%\n    background: $grey\n\n  .price\n    margin-top: 10px\n    width: 75px\n    height: 25px\n    background: $grey\n    float: right\n\n  .genres\n    width: 100%\n    display: flex\n\n    .genre\n      margin-top: 20px\n      height: 25px\n      width: 110px\n      background: $grey\n      margin-left: 15px\n\n  &:nth-child(3n+1)\n    margin-left: 0px\n\n    @include tablet\n      margin-left: 30px\n\n    @include mobile\n      margin-left: 0px\n\n  &:nth-child(2n+1)\n\n    @include tablet\n      margin-left: 0px\n\n    @include mobile\n      margin-left: 0px\n\n@keyframes loading\n  0%\n    background-position: 0px\n  100%\n    background-position: 300px\n    \n    \n.not-found\n  margin-top: 40px\n  box-sizing: border-box\n  height: 200px\n  width: 100%\n  background: #ececec\n  display: flex\n  justify-content: center\n  align-items: center\n\n.action-line\n  width: 100%\n  height: 50px\n  display: flex\n  justify-content: center\n  margin-bottom: 50px\n\n  .load-more\n    width: 200px\n    height: 50px\n",
                    "styleUrl": "./genre-books-list.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "booksService",
                        "type": "BooksService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "booksService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"not-found\" \n     *ngIf=\"!countRecords && loaded\">\n  Not found\n</div>\n\n<ng-container *ngIf=\"loaded ; else elseBlock\">\n  <div class=\"container\" >\n    <app-book *ngFor=\"let book of books\" \n                         [book]=\"book\">\n    </app-book>    \n  </div>  \n</ng-container>\n\n\n<ng-template #elseBlock>\n  <div class=\"container\">\n    <div  class=\"shadow-book\"\n          *ngFor=\"let book of shadowBooks\">\n      <div class=\"pad-cont\">\n        <div class=\"img\"></div>\n\n        <div class=\"title\"></div>\n\n        <div class=\"text\"></div>\n\n        <div class=\"price\"></div>\n      </div>\n      <div class=\"genres\">\n        <div class=\"genre\"></div>\n\n        <div class=\"genre\"></div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<div class=\"action-line\"\n     *ngIf=\"pageIndex < countPages\">\n    <button mat-flat-button\n            color=\"primary\"\n            class=\"load-more\"\n            (click)=\"loadMore()\">\n        More\n    </button>\n</div>\n"
        },
        {
            "name": "GenreCardComponent",
            "id": "component-GenreCardComponent-d0126aaf7831cfec6fcfa7436626cd5f",
            "file": "src/app/genres/components/genre-card/genre-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-genre-card",
            "styleUrls": [
                "./genre-card.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./genre-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "genre",
                    "line": 14,
                    "type": "Genre"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { Genre } from '../../models/genre.model';\n\n@Component({\n  selector: 'app-genre-card',\n  templateUrl: './genre-card.component.html',\n  styleUrls: ['./genre-card.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GenreCardComponent implements OnInit {\n\n  @Input('genre')\n  public genre: Genre;\n\n  constructor() { }\n\n  public ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\nmat-card\n  margin-top: 20px\n  cursor: pointer\n  transition: 0.5s\n  \n  &:hover\n    background: #ececec\n    transform: scale(1.1)  \n\n.wrapper\n  width: 190px\n  height: 50px\n  font-weight: 600\n  display: flex\n  justify-content: center\n  align-items: center\n  font-size: 18px\n\n  @include mobile\n    width: 100%\n",
                    "styleUrl": "./genre-card.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card fxLayoutAlign=\"start stretch\"\n          [routerLink]=\"['/genres/details', genre.id]\">\n  <div class=\"wrapper\">\n    {{ genre.name }}\n  </div>\n</mat-card>\n"
        },
        {
            "name": "GenreCreateContainer",
            "id": "component-GenreCreateContainer-a3c8b425d6d4a3b08fcc31a7dd2d6646",
            "file": "src/app/genres/containers/genre-create/genre-create.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-genre-create",
            "styleUrls": [
                "./genre-create.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./genre-create.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "edited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "genreForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "genreFormData",
                    "defaultValue": "new Genre()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_snackMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "canDeactivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean | Observable | Promise",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "cf",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "cf",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators\n} from '@angular/forms';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\nimport { DialogService } from '../../../core/services/dialog.service';\nimport { GenresService } from '../../../core/services/genres.service';\nimport { IDialogBody } from '../../../core/models/dialog-body.interface';\nimport { Genre } from '../../../genres/models/genre.model';\n\n@Component({\n  selector: 'app-genre-create',\n  templateUrl: './genre-create.container.html',\n  styleUrls: ['./genre-create.container.sass']\n})\nexport class GenreCreateContainer implements OnInit, OnDestroy {\n\n  public genreForm: FormGroup;\n  public genreFormData = new Genre();\n  public submited = false;\n  public edited = false;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly snack: MatSnackBar,\n    private readonly route: ActivatedRoute,\n    private readonly dialogService: DialogService,\n    private readonly router: Router,\n    private readonly fb: FormBuilder,\n    private readonly genresService: GenresService\n  ) { }\n\n  public ngOnInit(): void {\n    this._initForm();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public onSubmit(cf: Object): void {\n    this.submited = true;\n\n    if (!this.genreForm.invalid) {\n      Object.assign(this.genreFormData, cf);\n\n      this.genresService.updateGenre(this.genreFormData)\n        .pipe(takeUntil(this._destroy$))\n        .subscribe(() => this._snackMessage());\n    }\n  }\n\n  public canDeactivate(): boolean | Observable<boolean> | Promise<boolean> {\n    if (this.edited && !this.submited) {\n      const data: IDialogBody = {\n        message: 'Are you sure you want to leave form?',\n        type: 'multiple'\n      };\n\n      return new Promise((resolve) => {\n        const close = this.dialogService.openDialog(data)\n          .pipe(\n            take(1),\n            takeUntil(this._destroy$)\n          )\n          .subscribe(res => resolve(res));\n      });\n    }\n\n    return true;\n  }\n\n  private _initForm(): void {\n    this.genreForm = this.fb.group(\n      {\n        name: [ '', Validators.required ],\n      }\n    );\n\n    this.genreForm.valueChanges\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(() => this.edited = true);\n  }\n\n  private _snackMessage(): void {\n    this.snack.open('Genre edited', 'Ok', {\n      duration: 3000,\n      horizontalPosition: 'end',\n      verticalPosition: 'top'\n    });\n\n    this.router.navigate(['/genres']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.line\n  width: 100%\n  display: flex\n  justify-content: space-between\n\n  mat-form-field\n    width: 100%\n",
                    "styleUrl": "./genre-create.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snack",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "genresService",
                        "type": "GenresService"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "snack",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "genresService",
                        "type": "GenresService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<form [formGroup]=\"genreForm\"\n      (ngSubmit)=\"onSubmit(genreForm.value)\">\n  \n  <h1>Create Genre</h1>\n  \n  <div class=\"line\">\n    <mat-form-field>\n      <mat-label>Genre Name</mat-label>\n      \n      <input matInput\n             placeholder=\"Enter a Name of genre\"\n             formControlName=\"name\"\n             required\n             autocomplete=\"off\">\n      \n      <mat-error *ngIf=\"genreForm.get('name').hasError('required') && submited\"\n                 class=\"error\">\n        Oops,  Name is required!\n      </mat-error>\n    </mat-form-field>  \n  </div>\n\n  <button type=\"submit\" mat-flat-button\n          color=\"primary\">\n    Save\n  </button>   \n</form>\n"
        },
        {
            "name": "GenreEditContainer",
            "id": "component-GenreEditContainer-3f65381ea6636036a27966dfbfc8c18d",
            "file": "src/app/genre/containers/genre-edit/genre-edit.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-genre-edit",
            "styleUrls": [
                "./genre-edit.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./genre-edit.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "edited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "genre",
                    "type": "Genre",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "genreForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "genreFormData",
                    "defaultValue": "new Genre()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_snackMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "canDeactivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean | Observable | Promise",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "cf",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "cf",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators\n} from '@angular/forms';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\nimport { DialogService } from '../../../core/services/dialog.service';\nimport { GenresService } from '../../../core/services/genres.service';\nimport { IDialogBody } from '../../../core/models/dialog-body.interface';\nimport { Genre } from '../../../genres/models/genre.model';\n\n@Component({\n  selector: 'app-genre-edit',\n  templateUrl: './genre-edit.container.html',\n  styleUrls: ['./genre-edit.container.sass']\n})\nexport class GenreEditContainer implements OnInit, OnDestroy {\n\n  public genreForm: FormGroup;\n  public genreFormData = new Genre();\n  public genre: Genre;\n  public submited = false;\n  public edited = false;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly snack: MatSnackBar,\n    private readonly route: ActivatedRoute,\n    private readonly dialogService: DialogService,\n    private readonly router: Router,\n    private readonly fb: FormBuilder,\n    private readonly genresService: GenresService\n  ) { }\n\n  public ngOnInit(): void {\n    this.genre = this.route.parent.snapshot.data.author;\n    this._initForm();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public onSubmit(cf: Object): void {\n    this.submited = true;\n\n    if (!this.genreForm.invalid) {\n      Object.assign(this.genreFormData, cf);\n\n      this.genresService.updateGenre(this.genreFormData)\n        .pipe(takeUntil(this._destroy$))\n        .subscribe(\n          () => this._snackMessage()\n        );\n    }\n  }\n\n  public canDeactivate(): boolean | Observable<boolean> | Promise<boolean> {\n    if (this.edited && !this.submited) {\n      const data: IDialogBody = {\n        message: 'Are you sure you want to leave form?',\n        type: 'multiple'\n      };\n\n      return new Promise((resolve) => {\n        const close = this.dialogService.openDialog(data)\n          .pipe(\n            take(1),\n            takeUntil(this._destroy$)\n          )\n          .subscribe(\n            res => resolve(res)\n          );\n      });\n    }\n\n    return true;\n  }\n\n  private _initForm(): void {\n    this.genreForm = this.fb.group(\n      {\n        id: [ this.genre.id, Validators.required ],\n        name: [ this.genre.name, Validators.required ],\n      }\n    );\n\n    this.genreForm.valueChanges\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(() => this.edited = true);\n  }\n\n  private _snackMessage(): void {\n    this.snack.open('Genre edited', 'Ok', {\n      duration: 3000,\n      horizontalPosition: 'end',\n      verticalPosition: 'top'\n    });\n\n    this.router.navigate(['/genres']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.line\n  width: 100%\n  display: flex\n  justify-content: space-between\n\n  mat-form-field\n    width: 100%\n",
                    "styleUrl": "./genre-edit.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snack",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "genresService",
                        "type": "GenresService"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "snack",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "genresService",
                        "type": "GenresService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<form [formGroup]=\"genreForm\"\n      (ngSubmit)=\"onSubmit(genreForm.value)\">\n  \n  <h1>Edit Genre</h1>\n  \n  <div class=\"line\">\n    <mat-form-field>\n      <mat-label>Genre Name</mat-label>\n      \n      <input matInput\n             placeholder=\"Enter a Name of genre\"\n             formControlName=\"name\"\n             required\n             autocomplete=\"off\">\n      \n      <mat-error *ngIf=\"genreForm.get('name').hasError('required') && submited\"\n                  class=\"error\">\n        Oops,  Name is required!\n      </mat-error>\n    </mat-form-field>  \n  </div>\n\n  <button type=\"submit\" mat-flat-button\n          color=\"primary\"\n          [disabled]=\"!edited && genreForm.valid\">\n    Save\n  </button>   \n</form>\n"
        },
        {
            "name": "GenreShowContainer",
            "id": "component-GenreShowContainer-17846d7d18a9bab30b98177a9da1f294",
            "file": "src/app/genre/containers/genre-show/genre-show.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-genre-show",
            "styleUrls": [
                "./genre-show.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./genre-show.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "genre",
                    "type": "Genre",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Genre } from '../../../genres/models/genre.model';\n\n@Component({\n  selector: 'app-genre-show',\n  templateUrl: './genre-show.container.html',\n  styleUrls: ['./genre-show.container.sass'],\n})\nexport class GenreShowContainer implements OnInit {\n\n  public genre: Genre;\n\n  constructor(\n    private readonly route: ActivatedRoute\n  ) { }\n\n  public ngOnInit(): void {\n    this.genre = this.route.snapshot.parent.data.author;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.line\n  height: 3px\n  width: 100%\n  background: #ececec\n\n  &.marg\n    margin-top: 50px\n\n.bold\n  font-weight: 600\n  font-size: 20px\n  margin-top: 20px\n",
                    "styleUrl": "./genre-show.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>\n    {{ genre.name }}\n</h1>\n\n<div class=\"line\"></div>\n<h2>\n  Description\n</h2>\n<div class=\"line\"></div>\n\n<p>\n  William Shakespeare (bapt. 26 April 1564 – 23 April 1616) was an English playwright, poet, and actor, widely regarded as the greatest writer in the English language and the world's greatest dramatist. He is often called England's national poet and the \"Bard of Avon\" (or simply \"the Bard\"). His extant works, including collaborations, consist of some 39 plays, 154 sonnets, two long narrative poems, and a few other verses, some of uncertain authorship. His plays have been translated into every major living language and are performed more often than those of any other playwright. They also continue to be studied and reinterpreted.\n</p>\n<p>\n  Shakespeare was born and raised in Stratford-upon-Avon, Warwickshire. At the age of 18, he married Anne Hathaway, with whom he had three children: Susanna and twins Hamnet and Judith. Sometime between 1585 and 1592, he began a successful career in London as an actor, writer, and part-owner of a playing company called the Lord Chamberlain's Men, later known as the King's Men. At age 49 (around 1613), he appears to have retired to Stratford, where he died three years later. Few records of Shakespeare's private life survive; this has stimulated considerable speculation about such matters as his physical appearance, his sexuality, his religious beliefs, and whether the works attributed to him were written by others.\n</p>\n\n<div class=\"line marg\"></div>\n<h2>Related books</h2>\n<div class=\"line\"></div>\n\n<app-genre-books-list [genre]=\"genre.name\">\n</app-genre-books-list>\n"
        },
        {
            "name": "GenresListContainer",
            "id": "component-GenresListContainer-f9fe9e4a1988655c70380570fb65d1b4",
            "file": "src/app/genres/containers/genres-list/genres-list.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-genres-list",
            "styleUrls": [
                "./genres-list.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./genres-list.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "genres",
                    "defaultValue": "[]",
                    "type": "Genre[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getGenres",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { GenresService } from '../../../core/services/genres.service';\nimport { Genre } from '../../models/genre.model';\n\n@Component({\n  selector: 'app-genres-list',\n  templateUrl: './genres-list.container.html',\n  styleUrls: ['./genres-list.container.sass']\n})\nexport class GenresListContainer implements OnInit, OnDestroy {\n\n  public genres: Genre[] = [];\n\n  private _destroy$ = new Subject<void>();\n\n\n  constructor(\n    private genresService: GenresService\n  ) { }\n\n  public ngOnInit(): void {\n    this.getGenres();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public getGenres(): void {\n    this.genresService.getAllGenres()\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(res => this.genres = res);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\napp-genre-card\n  margin-left: 20px\n  \n  @include mobile\n    margin-left: 0px\n\n  &:nth-child(4n+1)\n    margin-left: 0px\n\n.container\n  width: 100%\n  display: flex\n  flex-wrap: wrap\n  margin-bottom: 50px\n  \n  @include mobile\n    flex-direction: column\n\n",
                    "styleUrl": "./genres-list.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "genresService",
                        "type": "GenresService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "genresService",
                        "type": "GenresService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container\">\n  <app-genre-card [genre]=\"genre\"\n                   *ngFor=\"let genre of genres\">\n  </app-genre-card>\n</div>\n"
        },
        {
            "name": "GenresView",
            "id": "component-GenresView-2cac2b2f6ef81f15a6ef5a90346690e7",
            "file": "src/app/genres/views/genres/genres.view.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-genres",
            "styleUrls": [
                "./genres.view.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./genres.view.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isHidden",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "openCreate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-genres',\n  templateUrl: './genres.view.html',\n  styleUrls: ['./genres.view.sass']\n})\nexport class GenresView implements OnInit, OnDestroy {\n\n  public isHidden = false;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly router: Router\n  ) {\n    this.router.events\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((event) => {\n        if (event instanceof NavigationEnd) {\n          if (event.url.includes('create')) {\n            this.isHidden = true;\n          } else {\n            this.isHidden = false;\n          }\n        }\n      });\n  }\n\n  public ngOnInit(): void {}\n\n  public openCreate(): void {\n    this.router.navigate(['/genres/create']);\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.line\n  display: flex\n  justify-content: space-between\n  align-items: center\n\n  @include mobile\n    flex-direction: column\n  \n  .create\n    height: 50px\n    width: 200px\n    \n    @include mobile\n      width: 100%\n",
                    "styleUrl": "./genres.view.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"header\"></div>\n\n<div class=\"grid\">\n  <div class=\"line\"\n        *ngIf=\"!isHidden\" \n        routerLinkActive=\"active\">\n    <h1>Genres</h1>\n    <button class=\"create\"\n            mat-raised-button\n            (click)=\"openCreate()\">\n      Create Genre\n    </button>\n  </div>\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "GenreView",
            "id": "component-GenreView-8f9306ff810b792da1cc52fb11659eb3",
            "file": "src/app/genre/views/genre/genre.view.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-genre",
            "styleUrls": [
                "./genre.view.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./genre.view.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "genre",
                    "type": "Genre",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { GenresService } from '../../../core/services/genres.service';\nimport { DialogService } from '../../../core/services/dialog.service';\nimport { Genre } from '../../../genres/models/genre.model';\n\n@Component({\n  selector: 'app-genre',\n  templateUrl: './genre.view.html',\n  styleUrls: ['./genre.view.sass']\n})\nexport class GenreView implements OnInit, OnDestroy {\n\n  public genre: Genre;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly genresService: GenresService,\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly dialog: DialogService\n  ) { }\n\n  public ngOnInit(): void {\n    this.genre = this.route.snapshot.data.author;\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public delete(): void {\n    this.dialog.openDialog({\n      message: 'Are you sure you want to delete this genre?',\n      type: 'multiple'\n    }).pipe(takeUntil(this._destroy$))\n      .subscribe(\n        (res) => res ? this._delete() : null\n      );\n  }\n\n  private _delete(): void {\n    this.genresService.deleteGenre(this.genre.id)\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(res => this.router.navigate(['/genres']));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n\n.actions\n  width: 275px\n  height: 40px\n  right: 0px\n  position: absolute\n  display: flex\n  justify-content: space-between\n\n  button\n    width: 125px\n\n    &.active\n      display: none\n\n.content\n  top: 50px\n  position: relative\n",
                    "styleUrl": "./genre.view.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "genresService",
                        "type": "GenresService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dialog",
                        "type": "DialogService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "genresService",
                        "type": "GenresService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"header\"></div>\n\n<div class=\"grid-short\">\n    <div class=\"actions\">\n      <button mat-flat-button \n              color=\"primary\"\n              [routerLink]=\"['show']\"\n              routerLinkActive=\"active\">\n        Details\n      </button>\n  \n      <button mat-flat-button \n              color=\"primary\"\n              [routerLink]=\"['edit']\"\n              routerLinkActive=\"active\">\n        Edit\n      </button>\n  \n      <button mat-flat-button \n              color=\"primary\"\n              (click)=\"delete()\">\n        Delete\n      </button>\n    </div>\n    <div class=\"content\">\n      <router-outlet></router-outlet>\n    </div>\n  </div>\n"
        },
        {
            "name": "HelloBlockComponent",
            "id": "component-HelloBlockComponent-f68f4200f5dccffbf4df72e2c45e3c09",
            "file": "src/app/home/components/hello-block/hello-block.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hello-block",
            "styleUrls": [
                "./hello-block.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./hello-block.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-hello-block',\n  templateUrl: './hello-block.component.html',\n  styleUrls: ['./hello-block.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HelloBlockComponent implements OnInit {\n\n  constructor() { }\n\n  public ngOnInit(): void { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\n.main-cont\n  position: relative\n  width: 100%\n  height: 100%\n  min-height: 600px\n  background-image: url('../../../../assets/images/background.png')\n  background-repeat: none\n  background-size: cover\n  background-position: center \n\n  @include mobile\n    display: flex\n    flex-direction: column\n    justify-content: center\n    background-position: 550px 0px \n\n  @include tablet\n    display: flex\n    flex-direction: column\n    justify-content: center\n    background-position: 550px 0p\n\n  .info-text\n    position: absolute\n    top: 150px\n    left: 150px\n\n    @include mobile\n      position: relative\n      top: 0px\n      left: 0px\n      width: 320px\n      margin: 0px auto\n\n    @include tablet\n      width: 500px\n      position: relative\n      top: 0px\n      left: 0px\n      margin: 0px auto\n\n\n    @include desk\n      top: 120px\n      left: 120px\n\n    .title\n      color: $blue\n      font-size: 6em\n      font-weight: 900\n\n      @include mobile\n        font-size: 40px\n        width: 320px\n\n      @include tablet\n        text-align: center\n        font-size: 70px\n\n      @include desk\n        font-size: 6em\n\n  .button-line\n    height: 60px\n    width: 100%\n    position: absolute\n    bottom: 50px\n    display: flex\n    justify-content: center\n\n    @include mobile\n      position: relative\n      bottom: 0px\n      margin-top: 20px\n",
                    "styleUrl": "./hello-block.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-cont\">\n  <div class=\"info-text\">\n    <div class=\"title\">\n      JUST IMAGINE\n    </div>\n\n    <div class=\"title\">\n      JUST READ\n    </div>\n  </div>\n\n  <div class=\"button-line\">\n    <button mat-flat-button \n            class=\"blue my-butt\"\n            [routerLink]=\"['/auth/sign-in']\">\n      Let's start\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "HomeView",
            "id": "component-HomeView-07060775f287094317eb81ffe2e5ea22",
            "file": "src/app/home/views/home/home.view.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.view.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./home.view.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.view.html',\n  styleUrls: ['./home.view.sass']\n})\nexport class HomeView implements OnInit {\n\n  constructor() { }\n\n  public ngOnInit(): void { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.view.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-hello-block></app-hello-block>\n\n<app-explain-block></app-explain-block>\n\n<app-purpose></app-purpose>\n\n<app-video-block></app-video-block>\n\n<app-addministration></app-addministration>\n\n<app-footer></app-footer>\n"
        },
        {
            "name": "PurposeComponent",
            "id": "component-PurposeComponent-1e39c47b274dba08b451d8e027d4946f",
            "file": "src/app/home/components/purpose/purpose.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-purpose",
            "styleUrls": [
                "./purpose.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./purpose.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-purpose',\n  templateUrl: './purpose.component.html',\n  styleUrls: ['./purpose.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PurposeComponent implements OnInit {\n\n  constructor() { }\n\n  public ngOnInit(): void { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\n.subtitle\n  color: $blue\n  text-align: center\n  font-size: 30px\n  font-weight: 500\n  \n  @include mobile\n    font-size: 15px\n\n  @include tablet\n    font-size: 18px\n\n  @include desk\n    font-size: 20px\n\n.title\n  width: 1000px\n  margin: 0px auto\n  font-size: 69px\n  color: $black\n  text-align: center\n  font-weight: 600\n\n  @include mobile\n    width: 320px\n    font-size: 29px\n\n  @include tablet\n    width: 550px\n    font-size: 38px\n\n  @include desk\n    width: 800px\n    font-size: 49px\n\n.purposes\n  width: 1550px\n  height: 450px\n  margin: 120px auto \n  display: flex\n  justify-content: space-between\n  \n  @include mobile\n    width: 320px\n    height: 900px\n    flex-direction: column\n    margin: 60px auto \n\n  @include tablet\n    width: 600px\n    height: 550px\n    flex-wrap: wrap\n    margin: 30px auto \n    justify-content: space-around\n\n  @include desk\n    width: 1000px\n    height: 310px\n    margin: 60px auto \n\n  .purpose\n    height: 450px\n    width: 450px\n    background: white\n    box-shadow: $shadow\n    border-radius: 18px\n    position: relative\n\n    @include mobile\n      width: 320px\n      height: 290px\n      border-radius: 10px\n\n    @include tablet\n      width: 275px\n      height: 250px\n      border-radius: 10px\n\n    @include desk\n      width: 310px\n      height: 310px\n      border-radius: 10px\n\n    img\n      border-radius: 18px\n\n      @include mobile\n        border-radius: 10px\n\n      @include desk\n        border-radius: 10px\n\n    .text\n      text-align: center\n      font-weight: 500\n      font-size: 30px\n      margin-top: 50px\n      \n      @include mobile\n        margin-top: 15px\n        font-size: 20px\n\n      @include desk\n        margin-top: 30px\n        font-size: 20px\n\n    img\n      width: 100%\n      height: auto\n      position: absolute\n      bottom: 0px\n\n",
                    "styleUrl": "./purpose.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"subtitle\">\n  Our proposal\n</div>\n\n<div class=\"title\">\n  We provide you best experience of reading\n</div>\n\n<div class=\"purposes\">\n  <div class=\"purpose\">\n    <div class=\"text\">Best team ever</div>\n    <img src=\"../../../../assets/images/expirience/dr-01.png\">\n  </div>\n\n  <div class=\"purpose\">\n    <div class=\"text\">Exploring Reading Comfort</div>\n    <img src=\"../../../../assets/images/expirience/dr-02.png\">\n  </div>\n\n  <div class=\"purpose\">\n    <div class=\"text\">Сozy like home</div>\n    <img src=\"../../../../assets/images/expirience/dr-03.png\">\n  </div>\n</div>\n"
        },
        {
            "name": "SecondStepContainer",
            "id": "component-SecondStepContainer-9f0db8fcd0a87d40188df7ab25441adb",
            "file": "src/app/account-info-form/containers/second-step/second-step.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-second-step",
            "styleUrls": [
                "./../account-info-form/account-info-form.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./second-step.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formGroup",
                    "line": 26,
                    "type": "FormGroup"
                },
                {
                    "name": "steps",
                    "line": 21,
                    "type": "IStep[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "secondMatcher",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addQuestion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "createQuestion",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deleteQuestion",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport {\n  FormGroup,\n  FormArray,\n  FormBuilder\n} from '@angular/forms';\n\nimport { IStep } from '../../../core/models/step.interface';\nimport {\n  StepErrorStateMatcher\n} from '../../../core/matchers/step-error-state.matcher';\n\n@Component({\n  selector: 'app-second-step',\n  templateUrl: './second-step.container.html',\n  styleUrls: ['./../account-info-form/account-info-form.container.sass']\n})\nexport class SecondStepContainer implements OnInit {\n\n  @Input('steps')\n  public steps: IStep[];\n\n  public secondMatcher;\n\n  @Input('formGroup')\n  public formGroup: FormGroup;\n\n  constructor(\n    private readonly fb: FormBuilder,\n  ) { }\n\n  public ngOnInit(): void {\n    this.secondMatcher = new StepErrorStateMatcher(this.steps[1]);\n  }\n\n  get questionsArray(): FormArray {\n    return this.formGroup.controls.questions as FormArray;\n  }\n\n  public deleteQuestion(index: number): void {\n    this.questionsArray.removeAt(index);\n  }\n\n  public addQuestion(): void {\n    this.questionsArray.push(this.createQuestion());\n  }\n\n  public createQuestion(): FormGroup {\n    return this.fb.group({\n      question: '',\n      answer: ''\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\nh1\n  @include mobile\n    font-size: 25px\n\n.title-line\n  font-weight: 700\n  font-size: 20px\n  display: flex\n  justify-content: space-between\n  align-items: center\n  background: #ececec\n\n  @include mobile\n    font-size: 14px\n\n.steps\n  width: 100%\n  height: 50px\n  display: flex\n\n  @include tablet\n    height: 40px\n\n  @include mobile\n    flex-direction: column\n    height: 120px\n  \n  .step\n    width: 34%\n    background: #ececec\n    height: 50px\n    display: flex\n    justify-content: center\n    align-items: center\n    cursor: pointer\n    font-size: 18px\n    transition: 0.4s\n    user-select: none\n\n    @include tablet\n      font-size: 14px\n\n    @include mobile\n      font-size: 13px\n      width: 100%\n      height: 40px\n\n    &:hover\n      background: rgba(73, 77, 213, 0.4)\n      color: white\n\n    &.active\n      background: $blue\n      color: white\n\n.wrapper\n  width: 100%\n  height: auto\n  position: relative\n\n.form-container\n  width: 100%\n  height: auto\n  background: white\n  box-shadow: $shadow\n  margin-top: 25px\n  padding: 15px 25px 15px 25px\n  box-sizing: border-box\n  position: relative\n\n  @include mobile\n    margin-top: 20px\n    margin-bottom: 20px\n    padding: 5px 15px 5px 15px\n\n\n\n.action-line\n  width: 100%\n  height: 170px\n  margin-top: 20px\n\n.add-button\n  height: 40px\n  width: 150px\n  margin-top: 20px\n\n  @include mobile\n    width: 100%\n\n.line\n  width: 100%\n  height: 60px\n  // background: #ececec\n  margin-top: 20px\n  display: flex\n  justify-content: space-between\n\n  @include mobile\n    flex-direction: column\n    height: auto\n\n.half\n  width: 48%\n  position: relative\n\n  @include mobile\n    width: 100%\n\n.third\n  width: 31%\n\n  @include mobile\n    width: 100%\n\n.sm\n  width: 15%\n\n  @include mobile\n    width: 100%\n\nmat-form-field\n  width: 100%\n",
                    "styleUrl": "./../account-info-form/account-info-form.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "questionsArray": {
                    "name": "questionsArray",
                    "getSignature": {
                        "name": "questionsArray",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 36
                    }
                }
            },
            "templateData": "<div class=\"wrapper\"\n     [formGroup]=\"formGroup\">\n  <h1>{{ steps[1].label }}</h1>\n\n  <div formArrayName=\"questions\" \n        *ngFor=\"let item of questionsArray.controls; let i = index;\">\n    <div class=\"action-line\" \n          [formGroupName]=\"i\">\n      <div class=\"title-line\">\n        <div class=\"title\">\n          Question {{ i + 1}}\n        </div>\n        <button type=\"button\"\n                mat-flat-button\n                color=\"primary\"\n                (click)=\"deleteQuestion(i)\"\n                *ngIf=\"i > 0\">\n          Remove question\n        </button>\n      </div> \n\n      <mat-form-field>\n        <mat-label>Question</mat-label>\n        <input matInput\n               placeholder=\"Enter a Question\"\n               formControlName=\"question\"\n               required\n               autocomplete=\"off\"\n               [errorStateMatcher]=\"secondMatcher\">\n        <mat-error *ngIf=\"item.invalid && steps[1].submitted\"\n                    class=\"error\">\n          Oops, Question is required!\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field>\n        <mat-label>Answer</mat-label>\n        <input matInput\n                placeholder=\"Enter a answer\"\n                formControlName=\"answer\"\n                required\n                autocomplete=\"off\"\n                [errorStateMatcher]=\"secondMatcher\">\n        <mat-error *ngIf=\"item.invalid && steps[1].submitted\"\n                    class=\"error\">\n          Oops, Answer is required!\n        </mat-error>\n      </mat-form-field>  \n    </div>\n  </div>\n\n  <button type=\"button\"\n          mat-flat-button\n          color=\"primary\"\n          class=\"add-button\"\n          (click)=\"addQuestion()\">\n    Add question\n  </button>\n</div>\n"
        },
        {
            "name": "SignInContainer",
            "id": "component-SignInContainer-955cf70164c973bc4c1d84c54f707337",
            "file": "src/app/auth/containers/sign-in/sign-in.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-in",
            "styleUrls": [
                "./sign-in.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "leave",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loaded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "matcher",
                    "defaultValue": "new BookErrorStateMatcher()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "signInForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_setLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "canDeactivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "cf",
                            "type": "ISignInForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "cf",
                            "type": "ISignInForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators\n} from '@angular/forms';\n\nimport { Subject, Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { AuthService } from '../../services/auth.service';\nimport { ISignInForm } from '../../models/sign-in-form.interface';\nimport {\n  BookErrorStateMatcher\n} from '../../../core/matchers/error-state.matcher';\n\n@Component({\n  selector: 'app-sign-in',\n  templateUrl: './sign-in.container.html',\n  styleUrls: ['./sign-in.container.sass']\n})\nexport class SignInContainer implements OnInit, OnDestroy {\n\n  public leave = false;\n  public loaded = false;\n  public submited = false;\n\n  public signInForm: FormGroup;\n  public matcher = new BookErrorStateMatcher();\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly auth: AuthService\n  ) { }\n\n  public ngOnInit(): void {\n    this.signInForm = this.fb.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n\n    this._setLoaded();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public onSubmit(cf: ISignInForm): void {\n    this.submited = true;\n\n    if (this.signInForm.valid) {\n      this.auth.signIn(cf)\n        .pipe(takeUntil(this._destroy$))\n        .subscribe();\n    }\n  }\n\n  public canDeactivate(): Promise<boolean> {\n    return new Promise((resolve) => {\n      this.leave = true;\n      setTimeout(() => resolve(true), 900);\n    });\n  }\n\n  private _setLoaded(): void {\n    setTimeout(() => this.loaded = true, 600);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\n.container\n  width: 100%\n  height: 100%\n  position: absolute\n  background-image: url('../../../../assets/images/server.jpg')\n  background-size: cover\n  background-repeat: no-repeat\n  background-position: center\n  overflow-y: auto\n  min-height: 720px\n\n  @include mobile\n    display: flex\n    justify-content: center\n    align-items: center\n\n  @include tablet\n    display: flex\n    justify-content: center\n    align-items: center\n\nform\n  background: white\n  width: 500px\n  height: 100%\n  display: flex\n  justify-content: center\n  align-items: center\n  flex-direction: column\n  position: relative\n  transition: 0.9s\n  transform: translateX(-500px)\n\n  @include mobile\n    width: 350px\n    height: 650px\n    box-shadow: $shadow\n\n  @include tablet\n    height: 600px\n    box-shadow: $shadow\n    transform: translateX(-1000px)\n\n  &.loaded\n    transform: translateX(0px)\n\n  &.leave\n    transform: translateX(-500px)\n\n    @include tablet\n      transform: translateX(-1000px)\n\n  h1\n    font-size: 50px\n    width: fit-content\n\n  .note\n    position: absolute\n    left: 70px\n    bottom: 20px\n    color: #636363\n\nmat-form-field\n  width: 80%\n\nbutton[type=\"submit\"]\n  width: 80%\n  height: 50px\n  font-size: 18px\n  margin-top: 25px\n\n.link\n  margin-top: 10px\n  font-size: 15px\n  text-decoration: none\n  color: #4982b8\n\n.text\n  position: absolute\n  bottom: 50px\n  right: 100px\n  color: white\n  width: 550px\n  font-size: 66px\n  font-weight: 700\n\n  @include mobile\n    display: none\n\n  @include tablet\n    display: none\n\n  @include desk\n    right: 75px\n    bottom: 35px\n    width: 370px\n    font-size: 46px\n  \n  .line\n    clip-path: polygon(0% 0%, 0% 100%, 0% 100%, 0% 0%)\n    transition: 0.9s\n\n    &.loaded\n      clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 100% 0%)\n\n    &.leave\n      clip-path: polygon(0% 0%, 0% 100%, 0% 100%, 0% 0%)\n\n  span\n    color: #54d6ba\n\n@keyframes slide\n  0%\n    transform: translateX(-500px)\n  100%\n    transform: translateX(0px)\n\n@keyframes tablet-slide\n  0%\n    transform: translateX(-1000px)\n  100%\n    transform: translateX(0px)\n\n@keyframes slide-text\n  0%\n    clip-path: polygon(0% 0%, 0% 100%, 0% 100%, 0% 0%)\n  100%\n    clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 100% 0%)\n",
                    "styleUrl": "./sign-in.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "auth",
                        "type": "AuthService"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container\">\n  <form class=\"body\"\n        [formGroup]=\"signInForm\"\n        (ngSubmit)=\"onSubmit(signInForm.value)\"\n        [ngClass]=\"[loaded && leave ? 'leave':'', loaded ? 'loaded': '']\">\n\n    <h1>Sign In</h1>\n    <mat-form-field>\n      <mat-label>Login</mat-label>\n\n      <input matInput\n             placeholder=\"Enter a login\"\n             formControlName=\"email\"\n             required\n             autocomplete=\"off\"\n             [errorStateMatcher]=\"matcher\">\n\n      <mat-error *ngIf=\"signInForm.get('email').hasError('required') && submited\"\n                 class=\"error\">\n        Oops, login is required!\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>Password</mat-label>\n      <input matInput\n             placeholder=\"Enter a password\"\n             formControlName=\"password\"\n             required\n             autocomplete=\"off\"\n             type=\"password\"\n             [errorStateMatcher]=\"matcher\">\n      <mat-error *ngIf=\"signInForm.get('password').hasError('required') && submited\"\n                 class=\"error\">\n        Oops, password is required!\n      </mat-error>\n    </mat-form-field>\n\n    <button type=\"submit\"\n            mat-flat-button\n            color=\"primary\">\n      SignIn\n    </button>\n    <a class=\"link\" [routerLink]=\"['/auth/sign-up']\">\n      SignUp\n    </a>\n\n    <div class=\"note\">\n      © Created by ArioShaman\n    </div>\n  </form>\n\n  <div class=\"text\">\n    <div class=\"line\" [ngClass]=\"[loaded && leave ? 'leave':'', loaded ? 'loaded': '']\">\n      We provide <span>BEST</span> \n    </div>\n    <div class=\"line\" [ngClass]=\"[loaded && leave ? 'leave':'', loaded ? 'loaded': '']\">\n      solutions for\n    </div>\n    <div class=\"line\" [ngClass]=\"[loaded && leave ? 'leave':'', loaded ? 'loaded': '']\">\n      reading\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SignUpContainer",
            "id": "component-SignUpContainer-2bfe4ce765c351d278ff70bf752fbbe8",
            "file": "src/app/auth/containers/sign-up/sign-up.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "../sign-in/sign-in.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "leave",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loaded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "matcher",
                    "defaultValue": "new BookErrorStateMatcher()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "signUpFormData",
                    "defaultValue": "new SignUpForm()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "signUpFormGroup",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submited",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "validator",
                    "type": "AppValidator",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_setLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_showConfimationMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "canDeactivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "cf",
                            "type": "ISignUpForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "cf",
                            "type": "ISignUpForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators\n} from '@angular/forms';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { AuthService } from '../../services/auth.service';\nimport { DialogService } from '../../../core/services/dialog.service';\nimport { IDialogBody } from '../../../core/models/dialog-body.interface';\nimport { SignUpForm } from '../../models/sign-up-form.model';\nimport { ISignUpForm } from '../../models/sign-up-form.interface';\nimport {\n  BookErrorStateMatcher\n} from '../../../core/matchers/error-state.matcher';\nimport { AppValidator } from '../../../core/validators/app.validator';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.container.html',\n  styleUrls: ['../sign-in/sign-in.container.sass']\n})\n\nexport class SignUpContainer implements OnInit, OnDestroy {\n\n  public signUpFormGroup: FormGroup;\n  public signUpFormData = new SignUpForm();\n  public matcher = new BookErrorStateMatcher();\n\n  public submited = false;\n  public leave = false;\n  public loaded = false;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    public validator: AppValidator,\n    private readonly fb: FormBuilder,\n    private readonly auth: AuthService,\n    private readonly router: Router,\n    private readonly dialogService: DialogService\n  ) { }\n\n  public ngOnInit(): void {\n    this.signUpFormGroup = this.fb.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n      passwordConfirmation: ['', Validators.required],\n    }, {\n      validators: [this.validator.checkPasswordValidation]\n    });\n\n    this._setLoaded();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public onSubmit(cf: ISignUpForm): void {\n    this.submited = true;\n\n    Object.assign(this.signUpFormData, cf);\n\n    if (this.signUpFormGroup.valid) {\n      this.auth.signUp(this.signUpFormData)\n        .pipe(takeUntil(this._destroy$))\n        .subscribe(() => this._showConfimationMessage());\n    }\n  }\n\n  public canDeactivate(): Promise<boolean> {\n    return new Promise((resolve) => {\n      this.leave = true;\n      setTimeout(() => resolve(true), 900);\n    });\n  }\n\n  private _setLoaded(): void {\n    setTimeout(() => this.loaded = true, 600);\n  }\n\n  private _showConfimationMessage(): void {\n    const data: IDialogBody = {\n      message: 'Confirmation email was sended to you!',\n      type: 'single'\n    };\n\n    this.dialogService.openDialog(data)\n      .pipe(takeUntil(this._destroy$))\n      .subscribe(\n        () => this.router.navigate(['/auth/sign-in'])\n      );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\n.container\n  width: 100%\n  height: 100%\n  position: absolute\n  background-image: url('../../../../assets/images/server.jpg')\n  background-size: cover\n  background-repeat: no-repeat\n  background-position: center\n  overflow-y: auto\n  min-height: 720px\n\n  @include mobile\n    display: flex\n    justify-content: center\n    align-items: center\n\n  @include tablet\n    display: flex\n    justify-content: center\n    align-items: center\n\nform\n  background: white\n  width: 500px\n  height: 100%\n  display: flex\n  justify-content: center\n  align-items: center\n  flex-direction: column\n  position: relative\n  transition: 0.9s\n  transform: translateX(-500px)\n\n  @include mobile\n    width: 350px\n    height: 650px\n    box-shadow: $shadow\n\n  @include tablet\n    height: 600px\n    box-shadow: $shadow\n    transform: translateX(-1000px)\n\n  &.loaded\n    transform: translateX(0px)\n\n  &.leave\n    transform: translateX(-500px)\n\n    @include tablet\n      transform: translateX(-1000px)\n\n  h1\n    font-size: 50px\n    width: fit-content\n\n  .note\n    position: absolute\n    left: 70px\n    bottom: 20px\n    color: #636363\n\nmat-form-field\n  width: 80%\n\nbutton[type=\"submit\"]\n  width: 80%\n  height: 50px\n  font-size: 18px\n  margin-top: 25px\n\n.link\n  margin-top: 10px\n  font-size: 15px\n  text-decoration: none\n  color: #4982b8\n\n.text\n  position: absolute\n  bottom: 50px\n  right: 100px\n  color: white\n  width: 550px\n  font-size: 66px\n  font-weight: 700\n\n  @include mobile\n    display: none\n\n  @include tablet\n    display: none\n\n  @include desk\n    right: 75px\n    bottom: 35px\n    width: 370px\n    font-size: 46px\n  \n  .line\n    clip-path: polygon(0% 0%, 0% 100%, 0% 100%, 0% 0%)\n    transition: 0.9s\n\n    &.loaded\n      clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 100% 0%)\n\n    &.leave\n      clip-path: polygon(0% 0%, 0% 100%, 0% 100%, 0% 0%)\n\n  span\n    color: #54d6ba\n\n@keyframes slide\n  0%\n    transform: translateX(-500px)\n  100%\n    transform: translateX(0px)\n\n@keyframes tablet-slide\n  0%\n    transform: translateX(-1000px)\n  100%\n    transform: translateX(0px)\n\n@keyframes slide-text\n  0%\n    clip-path: polygon(0% 0%, 0% 100%, 0% 100%, 0% 0%)\n  100%\n    clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 100% 0%)\n",
                    "styleUrl": "../sign-in/sign-in.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "validator",
                        "type": "AppValidator"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "auth",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "validator",
                        "type": "AppValidator",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container\">\n    <form class=\"body\"\n          [formGroup]=\"signUpFormGroup\"\n          (ngSubmit)=\"onSubmit(signUpFormGroup.value)\"\n          [ngClass]=\"[loaded && leave ? 'leave':'', loaded ? 'loaded': '']\">\n      <h1>Sign Up</h1>\n\n      <!-- first name -->\n      <mat-form-field class=\"input\">\n        <mat-label>First name</mat-label>\n        <input matInput\n               placeholder=\"Enter a first name\"\n               formControlName=\"firstName\"\n               required\n               autocomplete=\"off\"\n               [errorStateMatcher]=\"matcher\">\n        <mat-error *ngIf=\"signUpFormGroup.get('firstName').hasError('required') && submited\"\n                   class=\"error\">\n          Oops, first name is required!\n        </mat-error>\n      </mat-form-field>  \n\n      <!-- last name -->\n      <mat-form-field class=\"input\">\n        <mat-label>Last name</mat-label>\n        <input matInput\n               placeholder=\"Enter a last name\"\n               formControlName=\"lastName\"\n               required\n               autocomplete=\"off\"\n               [errorStateMatcher]=\"matcher\">\n        <mat-error  *ngIf=\"signUpFormGroup.get('lastName').hasError('required') && submited\"\n                    class=\"error\">\n          Oops, login is required!\n        </mat-error>\n      </mat-form-field>  \n\n      <!-- login -->\n      <mat-form-field class=\"input\">\n        <mat-label>Login</mat-label>\n        <input matInput\n               placeholder=\"Enter a login\"\n               formControlName=\"email\"\n               required\n               autocomplete=\"off\"\n               [errorStateMatcher]=\"matcher\">\n        <mat-error  *ngIf=\"signUpFormGroup.get('email').hasError('required') && submited\"\n                    class=\"error\">\n          Oops, login is required!\n        </mat-error>\n      </mat-form-field>  \n\n      <!-- password -->\n      <mat-form-field class=\"input\">\n        <mat-label>Password</mat-label>\n        <input matInput\n               placeholder=\"Enter a password\"\n               formControlName=\"password\"\n               autocomplete=\"off\"\n               required\n               type=\"password\"\n               [errorStateMatcher]=\"matcher\">\n        <mat-error  *ngIf=\"signUpFormGroup.get('password').hasError('required') && submited\"\n                    class=\"error\">\n          Oops, password is required!\n        </mat-error>\n      </mat-form-field>\n\n      <!-- password confirmation -->\n      <mat-form-field class=\"input\">\n        <mat-label>Repeat Password</mat-label>\n        <input matInput\n               placeholder=\"Repeat a password\"\n               formControlName=\"passwordConfirmation\"\n               required\n               name=\"password_confirmation\"\n               autocomplete=\"off\"\n               type=\"password\"\n               [errorStateMatcher]=\"matcher\">\n        <mat-error  *ngIf=\"signUpFormGroup.get('passwordConfirmation').hasError('required') && submited\"\n                    class=\"error\">\n          Oops, password is required!\n        </mat-error>\n        <mat-error  *ngIf=\"signUpFormGroup.get('passwordConfirmation').hasError('confirmationInvalid') && submited\"\n                    class=\"error\">\n          Oops, this field shold be the same value like 'Password' field!\n        </mat-error>\n      </mat-form-field>  \n      <button type=\"submit\"\n              mat-flat-button\n              color=\"primary\">\n        SignUp\n      </button>\n      <a class=\"link\" [routerLink]=\"['/auth/sign-in']\">\n        SignIn\n      </a>\n\n      <div class=\"note\">\n        © Created by ArioShaman\n      </div>\n    </form>\n\n    <div class=\"text\">\n      <div class=\"line\" [ngClass]=\"[loaded && leave ? 'leave':'', loaded ? 'loaded': '']\">\n        We provide <span>BEST</span> \n      </div>\n      <div class=\"line\" [ngClass]=\"[loaded && leave ? 'leave':'', loaded ? 'loaded': '']\">\n        solutions for\n      </div>\n      <div class=\"line\" [ngClass]=\"[loaded && leave ? 'leave':'', loaded ? 'loaded': '']\">\n        reading\n      </div>\n    </div>    \n  </div>\n"
        },
        {
            "name": "StepButtonsComponent",
            "id": "component-StepButtonsComponent-da57372d512bb43ba6ba996a5b344b3f",
            "file": "src/app/account-info-form/components/step-buttons/step-buttons.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-step-buttons",
            "styleUrls": [
                "./step-buttons.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./step-buttons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeStep",
                    "line": 21
                },
                {
                    "name": "steps",
                    "line": 24,
                    "type": "IStep[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "action",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "nextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "prevStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  EventEmitter,\n  Output,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport { IStep } from '../../../core/models/step.interface';\n\n@Component({\n  selector: 'app-step-buttons',\n  templateUrl: './step-buttons.component.html',\n  styleUrls: ['./step-buttons.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StepButtonsComponent implements OnInit {\n\n  @Input('activeStep')\n  public activeStep;\n\n  @Input('steps')\n  public steps: IStep[];\n\n  @Output('action')\n  public action = new EventEmitter<string>();\n\n  constructor() { }\n\n  public ngOnInit(): void {\n  }\n\n  public nextStep(): void {\n    this.action.next('next');\n  }\n\n  public prevStep(): void {\n    this.action.next('prev');\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\n.line-buttons\n  height: 40px\n  justify-content: flex-end\n  margin-top: 20px\n  \n  @include mobile\n    min-height: 40px\n    height: auto\n    max-height: 90px\n\n.buttons\n  display: flex\n  justify-content: space-between\n  max-width: 400px\n  min-width: 180px\n\n  @include mobile\n    width: 100%\n    flex-direction: column\n\n  button\n    width: 180px\n\n    @include mobile\n      width: 100%\n\n    &:nth-child(2)        \n      margin-left: 20px\n\n      @include mobile\n        margin-left: 0px\n        margin-top: 10px\n\n    &.grey\n      background: #ececec\n",
                    "styleUrl": "./step-buttons.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 27
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"line line-buttons\">\n  <div class=\"buttons\">\n    <button type=\"button\"\n            mat-flat-button\n            class=\"grey\"\n            (click)=\"prevStep()\"\n            *ngIf=\"activeStep.id !== 1\">\n      Prev\n    </button>\n    <button type=\"button\"\n            mat-flat-button\n            color=\"primary\"\n            (click)=\"nextStep()\"\n            *ngIf=\"activeStep.id !== 3\">\n      Next\n    </button>\n    <button type=\"submit\"\n            mat-flat-button\n            color=\"primary\"\n            *ngIf=\"activeStep.id === steps.length\">\n      Submit\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "ThirdStepContainer",
            "id": "component-ThirdStepContainer-423b2661007bc4a7c23404790482deb0",
            "file": "src/app/account-info-form/containers/third-step/third-step.container.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-third-step",
            "styleUrls": [
                "./../account-info-form/account-info-form.container.sass",
                "./third-step.container.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./third-step.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formGroup",
                    "line": 27,
                    "type": "FormGroup"
                },
                {
                    "name": "steps",
                    "line": 24,
                    "type": "IStep[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "bankLogoSrc",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "brandLogoSrc",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_apiBankCall",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_getBankData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport {\n  FormGroup,\n} from '@angular/forms';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { IStep } from '../../../core/models/step.interface';\nimport { environment } from '../../../../environments/environment';\n\n\n@Component({\n  selector: 'app-third-step',\n  templateUrl: './third-step.container.html',\n  styleUrls: [\n    './../account-info-form/account-info-form.container.sass',\n    './third-step.container.sass'\n  ]\n})\nexport class ThirdStepContainer implements OnInit, OnDestroy {\n\n  @Input('steps')\n  public steps: IStep[];\n\n  @Input('formGroup')\n  public formGroup: FormGroup;\n\n  public brandLogoSrc: string;\n  public bankLogoSrc: string;\n\n  private _destroy$ = new Subject();\n\n  constructor() { }\n\n  public ngOnInit(): void {\n    this._getBankData();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  private _getBankData(): void {\n    this.formGroup.get('numberCard').valueChanges\n      .pipe(takeUntil(this._destroy$))\n      .subscribe((res) => {\n        this._apiBankCall(res);\n      });\n  }\n\n  private _apiBankCall(value: string): void {\n    const brandLogo = 'brandLogoLightSvg';\n    const bankLogo = 'bankLogoSmallLightSvg';\n\n    const url = `https://api.cardinfo.online/?input=${value}&apiKey=${environment.API_KEY}&fields=${brandLogo},${bankLogo}`;\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data[brandLogo]) {\n          this.brandLogoSrc = data[brandLogo];\n        }\n        if (data[bankLogo]) {\n          this.bankLogoSrc = data[bankLogo];\n        }\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\nh1\n  @include mobile\n    font-size: 25px\n\n.title-line\n  font-weight: 700\n  font-size: 20px\n  display: flex\n  justify-content: space-between\n  align-items: center\n  background: #ececec\n\n  @include mobile\n    font-size: 14px\n\n.steps\n  width: 100%\n  height: 50px\n  display: flex\n\n  @include tablet\n    height: 40px\n\n  @include mobile\n    flex-direction: column\n    height: 120px\n  \n  .step\n    width: 34%\n    background: #ececec\n    height: 50px\n    display: flex\n    justify-content: center\n    align-items: center\n    cursor: pointer\n    font-size: 18px\n    transition: 0.4s\n    user-select: none\n\n    @include tablet\n      font-size: 14px\n\n    @include mobile\n      font-size: 13px\n      width: 100%\n      height: 40px\n\n    &:hover\n      background: rgba(73, 77, 213, 0.4)\n      color: white\n\n    &.active\n      background: $blue\n      color: white\n\n.wrapper\n  width: 100%\n  height: auto\n  position: relative\n\n.form-container\n  width: 100%\n  height: auto\n  background: white\n  box-shadow: $shadow\n  margin-top: 25px\n  padding: 15px 25px 15px 25px\n  box-sizing: border-box\n  position: relative\n\n  @include mobile\n    margin-top: 20px\n    margin-bottom: 20px\n    padding: 5px 15px 5px 15px\n\n\n\n.action-line\n  width: 100%\n  height: 170px\n  margin-top: 20px\n\n.add-button\n  height: 40px\n  width: 150px\n  margin-top: 20px\n\n  @include mobile\n    width: 100%\n\n.line\n  width: 100%\n  height: 60px\n  // background: #ececec\n  margin-top: 20px\n  display: flex\n  justify-content: space-between\n\n  @include mobile\n    flex-direction: column\n    height: auto\n\n.half\n  width: 48%\n  position: relative\n\n  @include mobile\n    width: 100%\n\n.third\n  width: 31%\n\n  @include mobile\n    width: 100%\n\n.sm\n  width: 15%\n\n  @include mobile\n    width: 100%\n\nmat-form-field\n  width: 100%\n",
                    "styleUrl": "./../account-info-form/account-info-form.container.sass"
                },
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\n.uppercase\n  text-transform: uppercase\n\n.card-wrapper\n  width: 100%\n  height: 300px\n  display: flex\n  align-items: center\n  justify-content: center\n\n  .wrapper\n    width: 320px\n    height: auto \n    margin: 0px auto\n    position: relative\n\n    @include mobile\n      width: 270px\n\n    .inputs\n      height: 100px\n      width: 100%\n      margin-top: 110px\n\n      @include mobile\n        margin-top: 55px\n\n      .input-line\n        // background: #ececec\n        height: 40px\n        width: 100%\n        display: flex\n        justify-content: space-between\n\n        .md-2\n          width: 60%\n\n        .md-1\n          width: 25%\n\n        &:nth-child(2)\n          margin-top: 15px\n\n        input\n          width: 100%\n          height: 40px\n          border-width: 0px\n          border-radius: 5px\n          background: rgba(0, 0, 0, 0.24)\n          font-size: 16px\n          padding-top: 4px\n          color: white\n          box-sizing: border-box\n          padding-left: 8px\n          outline: none\n\n          &.errored\n            border: 2px solid #ff3936\n\n          &::placeholder\n            color: rgba(255, 255, 255, 0.48)\n\n  .sm-1\n    width: 15%\n\n    @include mobile\n      width: 50px\n\n  .cards\n    width: 470px\n    height: 260px\n    position: relative\n\n    @include mobile\n      width: 100%\n\n    .card\n      position: absolute\n      width: 370px\n      height: 230px\n      border-radius: 20px\n      background: linear-gradient(167.6deg, #B8C7FF -9.78%, #474CE4 107.04%)\n\n      @include mobile\n        width: 100%\n        height: 160px\n        border-radius: 10px\n\n      &:nth-child(1)\n        z-index: 300\n\n      &:nth-child(2)\n        right: 0px\n        bottom: 0px\n        z-index: 100\n\n        @include mobile\n          left: 0px\n\n        .input-line\n          justify-content: flex-end !important\n\n  .magnit\n    height: 45px\n    width: 100%\n    background: rgba(0, 0, 0, 0.48)\n    position: absolute\n    top: 40px\n\n\n  .text\n    font-weight: 500\n    font-size: 14px\n    color: white\n    margin-top: 30px\n\n  .logo\n    position: absolute\n    top: 15px\n    height: 50px\n    width: 70px\n\n    @include mobile\n      width: 50px\n      height: 30px\n\n    &.logo-l\n      left: 30px\n\n      @include mobile\n        left: 15px\n\n    &.logo-r\n      right: 30px\n\n      @include mobile\n        right: 15px\n\n    img\n      width: 100%\n      height: auto\n",
                    "styleUrl": "./third-step.container.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 32
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"wrapper\" \n      [formGroup]=\"formGroup\">\n  <h1>{{ steps[2].label }}</h1>\n  \n  <div class=\"card-wrapper\">\n    <div class=\"cards\">\n      <div class=\"card\">\n        <div class=\"logo logo-l\">\n          <img [src]=\"brandLogoSrc\">\n        </div>\n        <div class=\"logo logo-r\">\n          <img [src]=\"bankLogoSrc\">\n        </div>\n        <div class=\"wrapper\">\n          <div class=\"inputs\">\n            <div class=\"input-line\">\n              <input type=\"text\" \n                     placeholder=\"1234 1234 1234 1234\"\n                     formControlName=\"numberCard\"\n                     [mask]=\"'0000 0000 0000 0000'\"\n                     [ngClass]=\"formGroup.get('numberCard').invalid && steps[2].submitted ? 'errored':''\">\n            </div>\n\n            <div class=\"input-line\">\n              <div class=\"md-2\">\n                <input type=\"text\"\n                       class=\"uppercase\"\n                       placeholder=\"IVAN IVANOV\"\n                       formControlName=\"cardOwner\"\n                       [ngClass]=\"formGroup.get('cardOwner').invalid && steps[2].submitted ? 'errored':''\">\n              </div>\n\n              <div class=\"md-1\">\n                <input type=\"text\" \n                       placeholder=\"MM/YY\"\n                       formControlName=\"expiredDate\"\n                       [mask]=\"'00/00'\"\n                       [ngClass]=\"formGroup.get('expiredDate').invalid && steps[2].submitted ? 'errored':''\">\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"magnit\">\n          <div class=\"wrapper\">\n            <div class=\"inputs\">\n              <div class=\"input-line\">\n                <div class=\"sm-1\">\n                  <input type=\"text\" \n                          placeholder=\"CVV\"\n                          formControlName=\"cvv\"\n                          [mask]=\"'000'\"\n                          [ngClass]=\"formGroup.get('cvv').invalid && steps[2].submitted ? 'errored':''\">\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "VideoBlockComponent",
            "id": "component-VideoBlockComponent-ad1b3447c5557e650574e344ca57149d",
            "file": "src/app/home/components/video-block/video-block.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-video-block",
            "styleUrls": [
                "./video-block.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./video-block.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-video-block',\n  templateUrl: './video-block.component.html',\n  styleUrls: ['./video-block.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class VideoBlockComponent implements OnInit {\n\n  constructor() { }\n\n  public ngOnInit(): void { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../../../mixins.sass\"\n@import \"./../../../../variables.sass\"\n\n.container\n  position: relative\n  height: 920px\n  width: 100%\n\n  @include desk\n    height: 740px\n\n  @include tablet\n    height: 650px\n  \n  @include mobile\n    height: 600px\n\n  .title\n    width: 900px\n    margin: 0px auto\n    font-size: 60px\n    color: $black\n    text-align: center\n    font-weight: 600\n    margin-top: 40px\n\n    @include mobile\n      width: 320px\n      margin-top: 20px\n      font-size: 24px\n\n    @include tablet\n      width: 600px\n      margin-top: 20px\n      font-size: 34px\n\n    @include desk\n      margin-top: 20px\n      font-size: 40px\n      \n  .video-cont\n    width: 1450px\n    height: 750px\n    margin: 0px auto\n    margin-top: 30px\n    position: relative\n    clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 100% 0%)\n\n    @include mobile\n      width: 320px\n      height: 500px\n      background: #ececec\n    \n    @include tablet\n      height: 500px\n      width: 600px\n\n    @include desk\n      width: 1000px\n      height: 580px\n\n    video\n      height: 100%\n      width: 100%\n\n      @include mobile\n        width: initial\n        position: absolute\n        left: -200px\n\n      @include tablet\n        width: initial\n        position: absolute\n        left: -200px\n\n",
                    "styleUrl": "./video-block.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <div class=\"title\">\n    Just relax. Just look at video\n  </div>\n\n  <div class=\"video-cont\">\n    <video autoplay loop>\n      <source src=\"../../../../assets/videos/video.webm\" type=\"video/webm\">\n      <source src=\"../../../../assets/videos/video.mp4\" type=\"video/mp4\">\n    </video>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AccountInfoFormModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountInfoFormContainer"
                        },
                        {
                            "name": "AccountInfoFormView"
                        },
                        {
                            "name": "FirstStepContainer"
                        },
                        {
                            "name": "SecondStepContainer"
                        },
                        {
                            "name": "StepButtonsComponent"
                        },
                        {
                            "name": "ThirdStepContainer"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AccountInfoFormRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AccountInfoFormRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AccountModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountBooksListContainer"
                        },
                        {
                            "name": "AccountShowContainer"
                        },
                        {
                            "name": "AccountView"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AccountRoutingModule"
                        },
                        {
                            "name": "UIModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AccountRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthView"
                        },
                        {
                            "name": "SignInContainer"
                        },
                        {
                            "name": "SignUpContainer"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthorBooksListContainer"
                        },
                        {
                            "name": "AuthorEditContainer"
                        },
                        {
                            "name": "AuthorShowContainer"
                        },
                        {
                            "name": "AuthorView"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthorRoutingModule"
                        },
                        {
                            "name": "UIModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthorRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthorsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthorCardComponent"
                        },
                        {
                            "name": "AuthorCreateContainer"
                        },
                        {
                            "name": "AuthorsListContainer"
                        },
                        {
                            "name": "AuthorsView"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthorsRoutingModule"
                        },
                        {
                            "name": "UIModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthorsRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BookModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BookDeleteComponent"
                        },
                        {
                            "name": "BookEditContainer"
                        },
                        {
                            "name": "BookShowComponent"
                        },
                        {
                            "name": "BookView"
                        },
                        {
                            "name": "LocalizedDatePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BookRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BookRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BooksModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "BooksService"
                        },
                        {
                            "name": "ParamsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BookCreateContainer"
                        },
                        {
                            "name": "BookFilterContainer"
                        },
                        {
                            "name": "BooksListContainer"
                        },
                        {
                            "name": "BooksView"
                        },
                        {
                            "name": "FilterByAuthorPipe"
                        },
                        {
                            "name": "FilterByGenrePipe"
                        },
                        {
                            "name": "SearchTextPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BooksRoutingModule"
                        },
                        {
                            "name": "UIModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BooksRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthorsService"
                        },
                        {
                            "name": "DomainInterceptor"
                        },
                        {
                            "name": "GenresService"
                        },
                        {
                            "name": "HelperService"
                        },
                        {
                            "name": "HttpConfigInterceptor"
                        },
                        {
                            "name": "MatAppearenceService"
                        },
                        {
                            "name": "RansackService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GenreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GenreBooksListContainer"
                        },
                        {
                            "name": "GenreEditContainer"
                        },
                        {
                            "name": "GenreShowContainer"
                        },
                        {
                            "name": "GenreView"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "GenreRoutingModule"
                        },
                        {
                            "name": "UIModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GenreRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GenresModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GenreCardComponent"
                        },
                        {
                            "name": "GenreCreateContainer"
                        },
                        {
                            "name": "GenresListContainer"
                        },
                        {
                            "name": "GenresView"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "GenresRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GenresRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddministrationComponent"
                        },
                        {
                            "name": "ExplainBlockComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HelloBlockComponent"
                        },
                        {
                            "name": "HomeView"
                        },
                        {
                            "name": "PurposeComponent"
                        },
                        {
                            "name": "VideoBlockComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UIModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BookComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BookComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appearance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/core.module.ts",
                "type": "MatFormFieldDefaultOptions",
                "defaultValue": "{\n  appearance: 'standard'\n}"
            },
            {
                "name": "appearenceFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/core.module.ts",
                "type": "",
                "defaultValue": "() => new MatAppearenceService()"
            },
            {
                "name": "appearences",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/mat-appearence.service.ts",
                "type": "[]",
                "defaultValue": "[\n  'legacy',\n  'standard',\n  'fill',\n  'outline'\n]"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/book/stories/book.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "book",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/book/stories/book.stories.ts",
                "type": "object",
                "defaultValue": "{\n  id: 5,\n  description: \"Actually, I didn't make the claim that Ruby follows the principle of least surprise. Someone felt the design of Ruby follows that philosophy, so they started saying that. I didn't bring that up, actually.\",\n  author_id: 2,\n  title: 'Cabbages and Kings',\n  price: 1640.0,\n  genres: [\n    {\n      id: 11,\n      name: 'Mythopoeia'\n    }\n  ],\n  previews: [],\n  image: '/uploads/book/5/image/2524bf2226043e88b56bf5c090f322d6.jpg',\n  writing_date: '2007-07-03T00:00:00.000Z',\n  release_date: '2012-12-27T00:00:00.000Z'\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "COUNTRIES_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/account-info-form/containers/first-step/first-step.container.ts",
                "type": "string",
                "defaultValue": "'https://restcountries.eu/rest/v2/all'"
            },
            {
                "name": "DEFAULT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/containers/book-filter/book-filter.container.ts",
                "type": "IFilterParam",
                "defaultValue": "{\n  searchText: null,\n  genreNames: null,\n  authorIds: null\n}"
            },
            {
                "name": "DEFAULT_MATRIX_OF_CHANGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/containers/book-filter/book-filter.container.ts",
                "type": "[]",
                "defaultValue": "[true]"
            },
            {
                "name": "DEFAULT_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/dialog.service.ts",
                "type": "ISize",
                "defaultValue": "{\n  width: '400px',\n  height: 'auto'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  hosts: {\n    imgHost: 'http://matweyw.kubesh.ru',\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  API_KEY: '4df01d1b3666fe417d472fcaaae3347d',\n  hosts: {\n    imgHost: 'http://matweyw.kubesh.ru',\n  },\n}"
            },
            {
                "name": "months",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/account/containers/account-show/account-show.container.ts",
                "type": "[]",
                "defaultValue": "[\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July'\n]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/components/book/stories/book.stories.ts",
                "type": "Story<BookComponent>",
                "defaultValue": "(args: BookComponent) => ({\n  component: BookComponent,\n  props: args\n})"
            },
            {
                "name": "testFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.component.ts",
                "type": "object",
                "defaultValue": "{\n  // author: [1, 2],\n  authorId: [1, 2],\n  price: {\n    min: 1,\n    max: 2000,\n  },\n  title: 'Nine Coaches Waiting'\n}"
            },
            {
                "name": "testOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.component.ts",
                "type": "object",
                "defaultValue": "{\n  authorId: {\n    matcher: Ransack.In,\n    // postfix: 'id'\n  },\n  price: [\n    {\n      matcher: Ransack.Gt,\n      from: 'min'\n    },\n    {\n      matcher: Ransack.Lt,\n      from: 'max'\n    }\n  ],\n  title: Ransack.NotEq,\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "Ransack",
                "childs": [
                    {
                        "name": "Eq"
                    },
                    {
                        "name": "NotEq"
                    },
                    {
                        "name": "Gt"
                    },
                    {
                        "name": "Gteq"
                    },
                    {
                        "name": "GtAny"
                    },
                    {
                        "name": "Lt"
                    },
                    {
                        "name": "Lteq"
                    },
                    {
                        "name": "LtAny"
                    },
                    {
                        "name": "In"
                    },
                    {
                        "name": "NotIn"
                    },
                    {
                        "name": "Present"
                    },
                    {
                        "name": "Blank"
                    },
                    {
                        "name": "Cont"
                    },
                    {
                        "name": "NotCont"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/core/models/ransack.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/core/core.module.ts": [
                {
                    "name": "appearance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/core.module.ts",
                    "type": "MatFormFieldDefaultOptions",
                    "defaultValue": "{\n  appearance: 'standard'\n}"
                },
                {
                    "name": "appearenceFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/core.module.ts",
                    "type": "",
                    "defaultValue": "() => new MatAppearenceService()"
                }
            ],
            "src/app/core/services/mat-appearence.service.ts": [
                {
                    "name": "appearences",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/mat-appearence.service.ts",
                    "type": "[]",
                    "defaultValue": "[\n  'legacy',\n  'standard',\n  'fill',\n  'outline'\n]"
                }
            ],
            "src/app/ui/components/book/stories/book.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/book/stories/book.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "book",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/book/stories/book.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  id: 5,\n  description: \"Actually, I didn't make the claim that Ruby follows the principle of least surprise. Someone felt the design of Ruby follows that philosophy, so they started saying that. I didn't bring that up, actually.\",\n  author_id: 2,\n  title: 'Cabbages and Kings',\n  price: 1640.0,\n  genres: [\n    {\n      id: 11,\n      name: 'Mythopoeia'\n    }\n  ],\n  previews: [],\n  image: '/uploads/book/5/image/2524bf2226043e88b56bf5c090f322d6.jpg',\n  writing_date: '2007-07-03T00:00:00.000Z',\n  release_date: '2012-12-27T00:00:00.000Z'\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/components/book/stories/book.stories.ts",
                    "type": "Story<BookComponent>",
                    "defaultValue": "(args: BookComponent) => ({\n  component: BookComponent,\n  props: args\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/account-info-form/containers/first-step/first-step.container.ts": [
                {
                    "name": "COUNTRIES_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/account-info-form/containers/first-step/first-step.container.ts",
                    "type": "string",
                    "defaultValue": "'https://restcountries.eu/rest/v2/all'"
                }
            ],
            "src/app/books/containers/book-filter/book-filter.container.ts": [
                {
                    "name": "DEFAULT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/containers/book-filter/book-filter.container.ts",
                    "type": "IFilterParam",
                    "defaultValue": "{\n  searchText: null,\n  genreNames: null,\n  authorIds: null\n}"
                },
                {
                    "name": "DEFAULT_MATRIX_OF_CHANGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/containers/book-filter/book-filter.container.ts",
                    "type": "[]",
                    "defaultValue": "[true]"
                }
            ],
            "src/app/core/services/dialog.service.ts": [
                {
                    "name": "DEFAULT_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/dialog.service.ts",
                    "type": "ISize",
                    "defaultValue": "{\n  width: '400px',\n  height: 'auto'\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  hosts: {\n    imgHost: 'http://matweyw.kubesh.ru',\n  },\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  API_KEY: '4df01d1b3666fe417d472fcaaae3347d',\n  hosts: {\n    imgHost: 'http://matweyw.kubesh.ru',\n  },\n}"
                }
            ],
            "src/app/account/containers/account-show/account-show.container.ts": [
                {
                    "name": "months",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/account/containers/account-show/account-show.container.ts",
                    "type": "[]",
                    "defaultValue": "[\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July'\n]"
                }
            ],
            "src/app/app.component.ts": [
                {
                    "name": "testFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.component.ts",
                    "type": "object",
                    "defaultValue": "{\n  // author: [1, 2],\n  authorId: [1, 2],\n  price: {\n    min: 1,\n    max: 2000,\n  },\n  title: 'Nine Coaches Waiting'\n}"
                },
                {
                    "name": "testOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.component.ts",
                    "type": "object",
                    "defaultValue": "{\n  authorId: {\n    matcher: Ransack.In,\n    // postfix: 'id'\n  },\n  price: [\n    {\n      matcher: Ransack.Gt,\n      from: 'min'\n    },\n    {\n      matcher: Ransack.Lt,\n      from: 'max'\n    }\n  ],\n  title: Ransack.NotEq,\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/core/models/ransack.enum.ts": [
                {
                    "name": "Ransack",
                    "childs": [
                        {
                            "name": "Eq"
                        },
                        {
                            "name": "NotEq"
                        },
                        {
                            "name": "Gt"
                        },
                        {
                            "name": "Gteq"
                        },
                        {
                            "name": "GtAny"
                        },
                        {
                            "name": "Lt"
                        },
                        {
                            "name": "Lteq"
                        },
                        {
                            "name": "LtAny"
                        },
                        {
                            "name": "In"
                        },
                        {
                            "name": "NotIn"
                        },
                        {
                            "name": "Present"
                        },
                        {
                            "name": "Blank"
                        },
                        {
                            "name": "Cont"
                        },
                        {
                            "name": "NotCont"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/core/models/ransack.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/account-info-form/components/step-buttons/step-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StepButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/account-info-form/containers/account-info-form/account-info-form.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountInfoFormContainer",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/account-info-form/containers/first-step/first-step.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "FirstStepContainer",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/account-info-form/containers/first-step/first-step.container.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COUNTRIES_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/account-info-form/containers/second-step/second-step.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "SecondStepContainer",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/account-info-form/containers/third-step/third-step.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThirdStepContainer",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/account-info-form/views/account-info-form/account-info-form.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountInfoFormView",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/account/containers/account-books-list/account-books-list.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountBooksListContainer",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/account/containers/account-show/account-show.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountShowContainer",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/account/containers/account-show/account-show.container.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "months",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/account/views/account/account.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountView",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/containers/sign-in/sign-in.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInContainer",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/containers/sign-up/sign-up.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpContainer",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/sign-in-form.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISignInForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/sign-in-request.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignInRequest",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/sign-up-form.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISignUpForm",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/sign-up-form.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpForm",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/views/auth/auth.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthView",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/author/containers/author-books-list/author-books-list.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorBooksListContainer",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/author/containers/author-edit/author-edit.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorEditContainer",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/author/containers/author-show/author-show.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorShowContainer",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/author/resolvers/author.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthorResolve",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/author/views/author/author.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorView",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/authors/components/author-card/author-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/authors/containers/author-create/author-create.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorCreateContainer",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/authors/containers/authors-list/authors-list.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorsListContainer",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/authors/models/author.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Author",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/authors/views/authors/authors.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthorsView",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/book/components/book-delete/book-delete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookDeleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/book/components/book-show/book-show.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookShowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/book/containers/book-edit/book-edit.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookEditContainer",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/book/pipes/localized-date.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LocalizedDatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book/resolvers/book.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "BookResolve",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/book/views/book/book.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookView",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/books/containers/book-create/book-create.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookCreateContainer",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/books/containers/book-filter/book-filter.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookFilterContainer",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/books/containers/book-filter/book-filter.container.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/containers/book-filter/book-filter.container.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_MATRIX_OF_CHANGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/containers/books-list/books-list.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooksListContainer",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/books/containers/books-list/books-list.container.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPageEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/books/models/book-request.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BookRequest",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/books/models/book.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Book",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/books/models/books-response.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BooksResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/books/models/filter-param.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFilterParam",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/books/pipes/filter-by-author.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FilterByAuthorPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/pipes/filter-by-genre.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FilterByGenrePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/pipes/search-text.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SearchTextPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/services/books.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BooksService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/books/services/params.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ParamsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/books/views/books/books.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "BooksView",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appearance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appearenceFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/exit.guard.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICanComponentDeactivate",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/exit.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CanDeactivateGuard",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/exit.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CanDeactivateGuard",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/domain.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "DomainInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/httpconfig.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpConfigInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/matchers/error-state.matcher.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BookErrorStateMatcher",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/matchers/step-error-state.matcher.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StepErrorStateMatcher",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/dialog-body.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDialogBody",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/dialog-body.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISize",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/error.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/ransack-param.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRansackParam",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/step.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStep",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/authors.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthorsService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/authors.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/dialog.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/genres.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GenresService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/genres.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/helper.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HelperService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/mat-appearence.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MatAppearenceService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/mat-appearence.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appearences",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/ransack.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RansackService",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/validators/app.validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppValidator",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/genre/containers/genre-books-list/genre-books-list.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenreBooksListContainer",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/genre/containers/genre-edit/genre-edit.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenreEditContainer",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/genre/containers/genre-show/genre-show.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenreShowContainer",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/genre/resolvers/genre.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "GenreResolve",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/genre/views/genre/genre.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenreView",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/genres/components/genre-card/genre-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenreCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/genres/containers/genre-create/genre-create.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenreCreateContainer",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/genres/containers/genres-list/genres-list.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenresListContainer",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/genres/models/genre.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Genre",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/genres/views/genres/genres.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenresView",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/home/components/addministration/addministration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddministrationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/components/explain-block/explain-block.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExplainBlockComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/components/hello-block/hello-block.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HelloBlockComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/components/purpose/purpose.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PurposeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/components/video-block/video-block.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VideoBlockComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/views/home/home.view.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeView",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/book/book.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/book/stories/book.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/book/stories/book.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "book",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/components/book/stories/book.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/form.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IForm",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/meta.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Meta",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/preview.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Preview",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}